@using MudBlazor
@using ReserGO.DTO;
@using ReserGO.Utils.DTO.Service;
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.UI.Utils
@using ReserGO.Miscellaneous.Model;
@using ReserGO.Utils.DTO.Utils;
@inject IDialogService DialogService

@if (Bookings is object)
{
    <MudTable Items="@Bookings.CurrentPageData" Loading="IsLoading"
              Hover="true" Class="w-100 shadow tableClass" Breakpoint="Breakpoint.Sm"
              LoadingProgressColor="Color.Primary" RowsPerPage="PagingOptions.PageSize.HasValue ? PagingOptions.PageSize.Value : 10"
              TotalItems="PagingOptions.TotalCount.Value">
        <ToolBarContent>
            <div class="d-flex w-100 h-100 align-items-center toolbarCss" style="background-color:#0066FF;">
                <MudText Typo="Typo.h6"> <span style="@(IsSmallView ? "padding-inline:2vw;":"")">@(IsSmallView ? "Storico" : "Storico prenotazioni")</span> </MudText>
                <MudSpacer />
                <div class="d-flex flex-row align-items-center @(IsSmallView ? "w-100 justify-content-end":"w-50")">
                    <div class="m-2 w-100">
                        <MudSelect T="string" Label="Stato" ValueChanged="@((string value) => OnCheckBoxChange(value))" Variant="Variant.Outlined" Value="statusSelected" Class="selectStato">
                            @foreach (var stato in status)
                            {
                                <MudSelectItem Value="stato">@stato</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                    <div class="toolItem w-100">
                        <BaseTextField MinLenght="0" Bind="@((string value) => OnChangeSearchText(value))" Value="@PagingOptions.Filter.SearchText" Required="false" Label="Ricerca per nome, cognome, email e premi invio..."></BaseTextField>
                    </div>
                </div>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Cognome</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Telefono</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Data</MudTh>
            <MudTh>Stato</MudTh>
            <MudTh>Risorsa</MudTh>
            <MudTh>Servizi</MudTh>
            @if (IsAdmin)
            {
                <MudTh></MudTh>
                <MudTh></MudTh>
            }
        </HeaderContent>

        <RowTemplate Context="element">
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:2vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Nome: </b>
                    }
                    @element.User.FirstName
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Cognome: </b>
                    }
                    @element.User.LastName
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Email: </b>
                    }
                    @element.User.Email
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Telefono: </b>
                    }
                    @element.User.PhoneNumber
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Data inizio: </b>
                    }
                    @element.StartDateTime
                </div>
            </MudTd>
            <MudTd>
                <div class="@(IsSmallView ? "d-flex flex-row w-100 align-items-center":"")" style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Stato: </b>
                    }
                    @{
                        var statusText = GetStatus(element.Status.Value);
                        <div title="@statusText">
                            @if (statusText == "Confermata")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Beenhere" Color="Color.Success"></MudIcon>
                            }
                            @if (statusText == "Da confermare")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Pending" Color="Color.Secondary"></MudIcon>
                            }
                            @if (statusText == "Rifiutata")
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error"></MudIcon>
                            }
                        </div>
                    }
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Risorsa: </b>
                    }
                    @element.Resource.ResourceName
                </div>
            </MudTd>
            <MudTd>
                <div style="@(IsSmallView ? "margin-top:1vh;":"")">
                    @if (IsSmallView)
                    {
                        <b style="padding-inline:2vw;">Servizi: </b>
                    }
                    @if (element.Services is object && element.Services.Count() > 0)
                    {
                        var servizi = string.Join(", ", @element.Services.Select(x => x.ServiceName));
                        @if (servizi.Length > 50)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.ShoppingBasket" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Filled" @onclick="(() => ShowServices(element.Services))">Mostra servizi</MudButton>
                        }
                        else
                        {
                            <span>@servizi</span>
                        }
                    }
                    else
                    {
                        <span>(nessun servizio)</span>
                    }
                </div>
            </MudTd>



            @if (IsAdmin)
            {
                <MudTd>
                    <div class="d-flex flex-row @(IsSmallView ? "w-100":"")">
                        @if (element.Status.Value == (int)BookingStatus.Pending)
                        {
                            <div title="Valida" class="m-3 @(IsSmallView ? "w-100":"")">
                                    <MudButton StartIcon="@Icons.Material.Filled.NotificationAdd" Style="@(IsSmallView ? "width:100%":"")" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" @onclick="(() =>ValidateDialog(element))">Valida</MudButton>
                            </div>
                        }
                        <div title="Elimina" class="m-3 @(IsSmallView ? "w-100":"")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Style="@(IsSmallView ? "width:100%":"")" Color="Color.Error" Variant="Variant.Filled" @onclick="(() =>DeleteDialog(element))"></MudIconButton>
                        </div>
                    </div>  
                </MudTd>

            }
        </RowTemplate>
        <PagerContent>
            <div class="d-flex flex-row align-items-center @(IsSmallView ? "":"justify-content-between")">
                <MudPagination SelectedChanged="OnPageChangedHandler" ShowPageButtons="!IsSmallView" Count="@((PagingOptions.TotalCount.Value + PagingOptions.PageSize.Value - 1) / PagingOptions.PageSize.Value)" Class="pa-4" />
                <div class="paginatorPageSize" style="@(IsSmallView ? "width:50%;":"")">
                    <MudSelect T="int" Label="Elementi per pagina" ValueChanged="@OnPageSizeHandler" Value="PagingOptions.PageSize.HasValue ? PagingOptions.PageSize.Value : 10" Variant="Variant.Outlined">
                        @foreach (var size in pageSizes)
                        {
                            <MudSelectItem Value="size">@size</MudSelectItem>
                        }
                    </MudSelect>

                </div>
            </div>
        </PagerContent>
    </MudTable>

}


@code {
    [Parameter]
    public GenericPagedList<DTOBooking> Bookings { get; set; }
    [Parameter]
    public GenericPagedFilter<DTOBookingFilter> PagingOptions { get; set; }
    [Parameter]
    public EventCallback<GridAction<DTOBooking, DTOBookingFilter>> Action { get; set; }
    [Parameter]
    public bool IsLoading { get; set; }
    [Parameter]
    public bool IsAdmin { get; set; }
    [Parameter]
    public bool IsSmallView { get; set; }

    private DTOBookingFilter Filter = new();
    private List<int> pageSizes = new List<int> { 5, 10, 20, 50 }; // Opzioni di PageSize
    private List<string> status = new List<string> { "Tutte", "Da confermare", "Confermate", "Rifiutate" }; // Opzioni di conferma
    private string statusSelected = "Tutte";

    protected override async Task OnParametersSetAsync()
    {
        StateHasChanged();
    }

    private async Task OnPageChangedHandler(int currPageIndex)
    {
        if (Action.HasDelegate)
        {
            PagingOptions.Page = currPageIndex;
            var action = new GridAction<DTOBooking, DTOBookingFilter>(PagingOptions, TypeActionsGRID.PAGE_CHANGED, "");
            await Action.InvokeAsync(action);
        }
    }

    private async Task OnPageSizeHandler(int pageSize)
    {
        PagingOptions.PageSize = pageSize;
        if (Action.HasDelegate)
        {
            var action = new GridAction<DTOBooking, DTOBookingFilter>(PagingOptions, TypeActionsGRID.PAGE_SIZE_CHANGED, "");
            await Action.InvokeAsync(action);
        }
    }

    private string GetStatus(int status)
    {

        switch (status)
        {
            case (int)BookingStatus.Confirmed:
                return "Confermata";
            case (int)BookingStatus.Canceled:
                return "Rifiutata";
            case (int)BookingStatus.Pending:
                return "Da confermare";
            default:
                return "";
        }
    }
    private async Task OnChangeSearchText(string value)
    {
        Filter.SearchText = value;
        var action = new GridAction<DTOBooking, DTOBookingFilter>(Filter, TypeActionsGRID.FILTER, "");
        await ChangeFilter(action);

    }
    private async Task OnCheckBoxChange(string value)
    {
        switch (value)
        {
            case "Da confermare":
                Filter.Status = (int)BookingStatus.Pending; break;
            case "Rifiutate":
                Filter.Status = (int)BookingStatus.Canceled; break;
            case "Confermate":
                Filter.Status = (int)BookingStatus.Confirmed; break;
            default:
                Filter.Status = null; break;
        }
        var action = new GridAction<DTOBooking, DTOBookingFilter>(Filter, TypeActionsGRID.FILTER, "");
        statusSelected = value;
        await ChangeFilter(action);

    }

    private async Task ChangeFilter(GridAction<DTOBooking, DTOBookingFilter> filter)
    {
        if (Action.HasDelegate)
        {
            await Action.InvokeAsync(filter);
        }
    }

    private async Task ValidateDialog(DTOBooking booking)
    {
        if (IsAdmin)
        {
            var dialogParameters = new DialogParameters
            {
                { "Callback", EventCallback.Factory.Create<BookingStatus>(this,((BookingStatus status) => HandleCallback(status, booking))) }  // Passa l'oggetto direttamente
            };

            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    Position = DialogPosition.Center
                };

            var result = await DialogService.Show<ConfirmValidateModal>("Valida prenotazione", dialogParameters, options).Result;
        }

    }

    private async Task ShowServices(List<DTOService> services)
    {
        if (IsAdmin)
        {
            var dialogParameters = new DialogParameters
            {
                { "Services", services}
            };

            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    Position = DialogPosition.Center
                };

            var result = await DialogService.Show<ModalServicesHistorical>("Servizi", dialogParameters, options).Result;
        }

    }

    private async Task DeleteDialog(DTOBooking booking)
    {
        if (IsAdmin)
        {
            var callback = EventCallback.Factory.Create<bool>(this, ((bool value) => DeleteCallback(value, booking)));
            string text = "<b>Attenzione, stai per eliminare questa prenotazione.</b><br />Eliminata la prenotazione verrà inviata una mail all'utente che ha inoltrato la richiesta e non sarà più possibile visualizzarla. ";
            var modal = new GenericModal<bool>(callback, text, "Elimina prenotazione", TypeActionsGRID.GENERIC_DELETE);

            var dialogParameters = new DialogParameters
            {
                { "Modal", modal }  // Passa l'oggetto direttamente
            };

            var options = new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    Position = DialogPosition.Center
                };

            var result = await DialogService.Show<ConfirmModal>("Elimina prenotazione", dialogParameters, options).Result;
        }
    }

    private async Task HandleCallback(BookingStatus status, DTOBooking booking)
    {
        if (Action.HasDelegate)
        {
            booking.Status = (int)status;
            var list = new List<DTOBooking>();
            list.Add(booking);

            var action = new GridAction<DTOBooking, DTOBookingFilter>(list, TypeActionsGRID.UPDATE, "");
            await Action.InvokeAsync(action);
        }
    }

    private async Task DeleteCallback(bool value, DTOBooking booking)
    {
        if (Action.HasDelegate && value)
        {
            var list = new List<DTOBooking>();
            list.Add(booking);

            var action = new GridAction<DTOBooking, DTOBookingFilter>(list, TypeActionsGRID.SINGLE_DELETE, "");
            await Action.InvokeAsync(action);
        }
    }


}

<style>

    .tableClass {
        border: 1px solid lightgray !important;
        border-radius: 25px !important;
    }

    .toolbarCss {
        background: linear-gradient(45deg, #006, transparent);
        border-radius: 25px 25px 0px 0px;
        color: white;
        padding-inline: 2vw;
    }

    .mud-table-root .mud-table-head {
        display: table-header-group;
        background-color: #0066FF;
    }

        .mud-table-root .mud-table-head .mud-table-cell {
            color: white !important;
            font-weight: 500;
            line-height: 1.5rem;
        }

    .paginatorPageSize {
        width: 15%;
        padding-inline: 2vw;
    }

    .selectStato {
        width: 7vw;
    }

    .inputSpace {
        height: 45px;
    }

    .mud-table-container {
        max-height: 75vh;
        height: 75vh;
    }


    .mud-toolbar-gutters {
        padding-left: 0px !important;
        padding-right: 0px !important;
    }

    .mud-input-control-input-container {
        background-color: white !important;
        border-radius: 15px !important;
    }

    @@media (max-width: 960px) {
        .mud-sm-table .mud-table-cell {
            justify-content: unset !important;
            padding: 0px 16px !important;
        }
    }
</style>