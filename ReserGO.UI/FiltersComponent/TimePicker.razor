@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Service.Interface.Service
@inject ITranslateService t

@inherits MudComponentBase

<MudGrid>
    <MudItem xs="6">
        <MudTimePicker Label="@(t.Words["Ora inizio"])"
                       @bind-Time="StartTime"
                       AmPm="false"
                       AutoClose="true"
                       MinuteSelectionStep="30"
                       Required="true" />
    </MudItem>
    <MudItem xs="6">
        <MudTimePicker Label="@(t.Words["Ora inizio"])"
                       @bind-Time="EndTime"
                       AmPm="false"
                       AutoClose="true"
                       MinuteSelectionStep="30"
                       Required="true" />
    </MudItem>
</MudGrid>

@code {
    private TimeSpan? _startTime;
    private TimeSpan? _endTime;

    [Parameter] public EventCallback<DTOTimeSlot> OnRangeChanged { get; set; }
    [Parameter] public Dictionary<int, DTOTimeSlot> DictionaryTimeSlot { get; set; }

    private bool IsInvalid => _endTime.HasValue && _startTime.HasValue && _endTime <= _startTime;

    private bool IsTimeRangeValid(TimeSpan? start, TimeSpan? end)
    {
        if (!start.HasValue || !end.HasValue)
            return false;

        foreach (var slot in DictionaryTimeSlot.Values)
        {
            // Controlla se il nuovo range è interno o sovrapposto a uno esistente
            if ((start < slot.EndTime && end > slot.StartTime) ||
                (start >= slot.StartTime && start < slot.EndTime) ||
                (end > slot.StartTime && end <= slot.EndTime))
            {
                return false;
            }
        }
        return true;
    }

    private TimeSpan? StartTime
    {
        get => _startTime;
        set
        {
            if (value == _startTime) return;
            _startTime = value;

            // Verifica la validità dell'intervallo di tempo
            if (_startTime.HasValue && _endTime.HasValue)
            {
                if (!IsTimeRangeValid(_startTime, _endTime))
                {
                    _startTime = null;
                    _endTime = null;
                    return;
                }
            }

            // // Imposta orario di fine a +30 minuti se non ancora impostato o non valido
            // if (!_endTime.HasValue || IsInvalid)
            // {
            //     _endTime = _startTime?.Add(TimeSpan.FromMinutes(30));
            // }

        }
    }

    private TimeSpan? EndTime
    {
        get => _endTime;
        set
        {
            if (value == _endTime) return;

            if (_startTime.HasValue && value <= _startTime)
            {
                _endTime = _startTime?.Add(TimeSpan.FromMinutes(30));
            }
            else
            {
                _endTime = value;
            }

            // Verifica la validità dell'intervallo di tempo
            if (_startTime.HasValue && _endTime.HasValue && !IsTimeRangeValid(_startTime, _endTime))
            {
                _startTime = null;
                _endTime = null;
            }

            NotifyRangeChanged();
        }
    }

    private void NotifyRangeChanged()
    {
        if (_startTime.HasValue && _endTime.HasValue && !IsInvalid)
        {
            OnRangeChanged.InvokeAsync(new DTOTimeSlot(_startTime.Value, _endTime.Value));
        }
    }
}
