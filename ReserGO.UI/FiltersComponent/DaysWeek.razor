@using MudBlazor
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.ViewModel.FiltersComponent

@inherits BaseComponentChild<IDayOfWeekViewModel, DTODayOfWeekWizard>

<div class="containerDayOfWeek h-100">
	<MudGrid>
		<MudItem>
			<div class="days-container">
				@foreach (var day in DaysOfWeek)
				{
					<MudButton Class="@($"day-circle {(day.IsSelected ? "selected" : "")}")" OnClick="@(() => ToggleDaySelection(day))" Title="@day.FullName">
						@day.Initial
					</MudButton>
				}
			</div>
		</MudItem>
	</MudGrid>
<div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
            <div class="d-flex w-100 p-2 align-items-center justify-content-center">
			<MudButton Variant="Variant.Filled" Color="Color.Error" Style="width:10vw;height:5vh" @onclick="Annulla" EndIcon="@Icons.Material.Filled.Close">Annulla</MudButton>
            </div>
            <div class="d-flex w-100 p-2 align-items-center justify-content-center">
               	<MudButton Color="Color.Primary" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="GoNext" Disabled="CurrentViewModel.List.Count()==0" EndIcon="@Icons.Material.Filled.ArrowForward">Avanti</MudButton>
            </div>
        </div>
</div>


@code {
	[Parameter]
	public EventCallback<(List<DTODayOfWeekWizard> days, bool next)> Callback { get; set; }

	[Parameter]
	public EventCallback Reset { get; set; }

	[Parameter]
	public List<DTODayOfWeekWizard> DaysSelected { get; set; }

	protected override async Task OnInitializedAsync()
	{
		CurrentViewModel.List = new();
	}

	private List<DTODayOfWeekWizard> DaysOfWeek = new()
	{
		new DTODayOfWeekWizard { FullName = "Lunedì" },
		new DTODayOfWeekWizard { FullName = "Martedì" },
		new DTODayOfWeekWizard { FullName = "Mercoledì" },
		new DTODayOfWeekWizard { FullName = "Giovedì" },
		new DTODayOfWeekWizard { FullName = "Venerdì" },
		new DTODayOfWeekWizard { FullName = "Sabato" },
		new DTODayOfWeekWizard { FullName = "Domenica" }
	};

	// Metodo per gestire la selezione dei giorni

	protected override async Task OnParametersSetAsync()
	{
		if(DaysSelected!=null && DaysSelected.Count()>0)
		{
			var d = DaysSelected.Where(x => x.IsSelected).Select(x => x.FullName).ToList();
			DaysOfWeek.ForEach(day =>
			{
				if (d.Contains(day.FullName))
					day.IsSelected = true;
			});
		}
	}

	private async Task ToggleDaySelection(DTODayOfWeekWizard day)
	{
		day.IsSelected = !day.IsSelected;
		if (day.IsSelected)
			CurrentViewModel.List.Add(day);
		else
			CurrentViewModel.List = CurrentViewModel.List.Where(d => d.FullName != day.FullName).ToList();

		if (Callback.HasDelegate)
			await Callback.InvokeAsync((CurrentViewModel.List,false));
	}

	public async Task GoNext()
	{
		if (Callback.HasDelegate)
			await Callback.InvokeAsync((CurrentViewModel.List,true));
	}

	public async Task Annulla()
	{
		if (Reset.HasDelegate)
			await Reset.InvokeAsync();
	}
}
<style>
	.days-container {
		display: flex;
		gap: 10px;
		justify-content: center;
		align-items: center;
		padding: 20px;
	}

	.day-circle {
		width: 4vw;
		height: 7vh;
		background-color: whitesmoke !important;
		border:1px solid lightgrey !important;
	}

		.day-circle:hover {
			background-color: #bdbdbd;
		}

		.selected {
			background-color: #0066FF !important;
		color: white !important;
		}
</style>