@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@using Microsoft.AspNetCore.Components.Forms
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t

@inherits BaseComponentChild<IInsertResourceViewModel, DTOResource>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "resourceDialogCssSmall" : "resourceDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler" Options="@Options">
    <TitleContent>

    </TitleContent>

    <DialogContent>
        <div class="d-flex flex-row align-items-center w-100 p-3" style="height:10%;background-color:#0066FF;">
            <span style="font-size:xx-large; color:white; border-radius: 30px 30px 0px 0px;">@(t.Words["Nuova risorsa"])</span>
        </div>
            
        <MudForm @ref="_form" @bind-IsValid="@_success" Class="w-100" >

               @* SEZIONE REGOLE DISPONIBILITA' IN SMALL *@
               @if(_smallViewRule && _enableHoursRule)
               {
                <div class="d-flex flex-column p-3" style="height:90%;" >
                       <div class="d-flex flex-column h-100 w-100" >
                            @if (_enableHoursRule && CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                            {
                                <div class="d-flex flex-row w-100" style="padding-block:1vh; height:30%;">
                                    <div class="d-flex flex-column w-100 p-2" style="border-radius:15px; border:1px solid lightgrey;" >
                                    <span><b>@(t.Words["Giorni disponibilità risorsa"]):</b> @_daysMarkup</span><br />
                                    <span><b>@(t.Words["Orari disponibilità risorsa"]): </b>@_recurringRulesMarkup</span>
                                    </div>
                                </div>


                                <div class="d-flex justify-content-center w-100 ruleTable" style="height:78%;">
                                    <div class="w-100 h-100">
                                        <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.Stepper.Index" Style="height:100%">
                                            <MudTabPanel Text="@(t.Words["Giorni disponibilità"])">
                                                <div class="d-flex flex-column w-100" style="height:55vh;" >

                                                    <div class="d-flex w-100 p-3 justify-content-center" style="height:20%">
                                                        <span style="color:#0066FF; font-size:large;">
                                                            <b>
                                                            @(t.Words["Seleziona giorni risorsa"])
                                                            </b>
                                                        </span>
                                                    </div>
                                                    <div class="d-flex w-100" style="height:70%;">
                                                        <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                                            <Content>
                                                                <DaysWeek CurrentViewModel.IsSmallView="true" Callback="@(((List<DTODayOfWeekWizard> days, bool next) Value) => UpdateDays(Value))" Reset="@(() => Reset())" DaysSelected="CurrentViewModel.Stepper.DaysSelected" />
                                                            </Content>
                                                        </BaseComponent>
                                                    </div>
                                                </div>
                                            </MudTabPanel>
                                        <MudTabPanel Text="@(t.Words["Orari ricorrenti"])" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.RECURRING_RULES)">
                                                <div class="d-flex flex-column w-100" style="height: 47vh;" >

                                                    <div class="d-flex w-100 p-3 justify-content-center" style="height:20%">
                                                        <span style="color:#0066FF; font-size:large;">
                                                            <b>
                                                            @(t.Words["Seleziona orari risorsa"])
                                                            </b>
                                                        </span>
                                                    </div>
                                                    <div class="d-flex w-100" style="height:80%">
                                                        <DaysSliderComponent CurrentViewModel.IsSmallView="true" Callback="@(((List<DTOTimeSlot> slots, bool next)values) => UpdateRecurringRules(values))" Reset="@(() => Reset())" SelectedTimeSlot="CurrentViewModel.Stepper.RecurringRules" />
                                                    </div>
                                                </div>

                                            </MudTabPanel>
                                            <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.CONFIRM)">
                                                <div class="d-flex flex-column justify-content-around w-100" style="overflow:auto; height:40vh;" >
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-around w-100 p-3" >
                                                        <span style="font-size:large; color:#0066FF;"><b>@(t.Words["Hai selezionato per i seguenti giorni"]):</b></span>
                                                            <span style="font-size:medium;">@_daysMarkup</span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-around w-100 p-3">
                                                        <span style="font-size:large; color:#0066FF;"><b>@(t.Words["Hai selezionato queste regole orarie"]):</b></span>
                                                            <span style="font-size:medium;"><b>@_recurringRulesMarkup</b></span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-center align-items-center w-100 p-3">
                                                        <span style="font-size:medium; text-align:center;">@(t.Words["Potrai inserire ulteriori regole"])</span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="d-flex flex-row w-100 justify-content-around align-items-center p-3">
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                    <MudButton Color="Color.Error" Variant="Variant.Filled" Style="width:20vw;height:5vh" @onclick="() => Reset()">@(t.Words["Annulla"])</MudButton>
                                                        </div>
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                                                    <MudButton Color="Color.Default" Variant="Variant.Filled" Style="width:20vw;height:5vh" @onclick="@(() => {CurrentViewModel.Stepper = new(); StateHasChanged();_daysMarkup = (MarkupString)String.Empty;_recurringRulesMarkup = (MarkupString)String.Empty;})">@(t.Words["Reset"])</MudButton>
                                                        </div>
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                    <MudButton Color="Color.Success" Variant="Variant.Filled" Style="width:20vw;height:5vh" @onclick="@(() => {_smallViewRule = false; CurrentViewModel.Stepper.Confirm();})">@(t.Words["Salva"])</MudButton>
                                                        </div>
                                                </div>

                                            </MudTabPanel>

                                        </MudTabs>
                                    </div>
                                </div>
                            }
                    </div>
                </div>
               }
               else
               {
                <div class="d-flex p-3 @(CurrentViewModel.IsSmallView ? "flex-column" : "flex-row h-75")"  style="@(CurrentViewModel.IsSmallView ? "height:80%;" : "")">

                    <div class="d-flex flex-column @(CurrentViewModel.IsSmallView ? "w-100" : "w-50")" style="@(CurrentViewModel.IsSmallView ? "overflow:auto;" : "")" >
                        <div class="d-flex flex-column w-100">
                    
                            <div class="d-flex flex-column w-100 justify-content-around p-2">
                                <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Label="@(t.Words["Nome"])" />
                                <div class="d-flex w-100">
                                    <BaseTextField MinLenght="0" Lines="10" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Label="Descrizione" Required="false" />
                                </div>
                            </div>

                            <div class="d-flex p-2 @(CurrentViewModel.IsSmallView ? "flex-column" : "flex-row")" style="@(CurrentViewModel.IsSmallView ? "height:22vh;" : "height:10vh;")" >
                                <div class="d-flex align-items-center" style="@(CurrentViewModel.IsSmallView ? "width:100%;" : "width:60%;")">
                                    <BaseComponent TViewModel="IServicesComboViewModel" TModel="DTOService">
                                        <Content>
                                            <ServicesCombo Callback="@((List<DTOService> list) => CurrentViewModel.SelectedItem.Services = list)"/>
                                        </Content>
                                    </BaseComponent>
                                </div>
                                <div class="d-flex flex-column align-items-center" style="@(CurrentViewModel.IsSmallView ? "width:100%; padding-top:5vh;" : "width:40%; padding-top:1.2vh;")">
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg" MaximumFileCount="1">
                                        <ActivatorContent>
                                            <MudButton Variant="Variant.Filled"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Material.Filled.Image">
                                                @(t.Words["Carica immagine"])
                                            </MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>

                                    @if (selectedFile != null)
                                    {
                                        <div class="w-100" >

                                            <MudChip T="string" Color="Color.Default">
                                                <div title="@(t.Words["Rimuovi"])">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Size="Size.Small" @onclick="@(() => DeleteFile())" />
                                                </div>
                                                @selectedFile.Name
                                            </MudChip>
                                        </div>
                                    }
                                </div>
                            
                            </div>
                            <div class="d-flex justify-content-between w-100 @(CurrentViewModel.IsSmallView ? "flex-column pt-4" : "align-items-center flex-row")">
                                <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="@(t.Words["Richiesta di conferma"])" Color="Color.Primary"></MudCheckBox>
                                @if (CurrentViewModel.SelectedItem.RequestToConfirm)
                                {
                                    <span style="padding-left:1vw;">(La prenotazione dovrà essere confermata da Admin)</span>
                                }
                                <div class="d-flex flex-row" style="@(CurrentViewModel.IsSmallView ? "padding-inline:4vw;" : "")">
                                    <MudSwitch @bind-Value="CurrentViewModel.EnableResource" Label="@(t.Words["Abilita risorsa da subito"])" Color="Color.Success" />
                                </div>
                            </div>

                            @* SEZIONE REGOLE DISPONIBILITA CARD/RIPILOGO SMALL *@
                            @if(CurrentViewModel.IsSmallView && !_smallViewRule)
                            {
                                @if(CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                                {
                                    <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2 pt-4">
                                        <div class="d-flex flex-column align-items-center justify-content-center shadow ruleMask" @onclick="() =>{_enableHoursRule = true; _smallViewRule = true;} ">
                                            <div class="d-flex p-2" >
                                                <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                            </div>
                                            <span class="p-3">@(t.Words["Abilita regole di disponibilità"])</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2">
                                        <div class="d-flex flex-column shadow ruleRecap" @onclick="() => _enableHoursRule=true">
                                            <div class="d-flex flex-row w-100 h-25 align-items-center p-3" style="background-color:#0066FF;color:white; border-radius: 15px 15px 0px 0px;">
                                                <MudIcon Icon="@Icons.Material.Filled.AccessTimeFilled"></MudIcon>
                                                <span style="font-size:x-large; padding-inline:1vw;">@(t.Words["Disponibilità risorsa"])</span>
                                            </div>
                                             <div class="d-flex flex-column w-100 h-100  p-3" style="border-radius: 0px 0px 15px 15px;">
                                                 <div class="d-flex flex-row justify-content-center align-items-center p-1">
                                                    <span style="font-size:x-large; color:#0066FF">@(t.Words["Giorni disponibilità"]):</span>
                                                 </div>
                                                 <div class="d-flex flex-row justify-content-center p-3">
                                                     <span style="font-size:large; text-align:center;"><b>@_daysMarkup</b></span>
                                                 </div>
                                                 <div class="d-flex flex-row justify-content-center align-items-center p-1">
                                                    <span style="font-size:x-large; color:#0066FF">@(t.Words["Orari disponibilità"]):</span>
                                                 </div>
                                                 <div class="d-flex flex-row justify-content-center p-3">
                                                     <span style="font-size:large; text-align:center;"><b>@_recurringRulesMarkup</b></span>
                                                 </div>
                                            </div>
    
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                
                
               
                   @* SEZIONE REGOLE DISPONIBILITA LARGE *@
                    <div class="flex-column w-50 h-100" style="@(CurrentViewModel.IsSmallView ? "display:none;":"display:flex;")" >
                            @if (_enableHoursRule && CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                            {
                                <div class="d-flex flex-row w-100" style="padding-block:1vh;">
                                    <div class="d-flex flex-column w-100 p-2" style="border-radius:15px; border:1px solid lightgrey;" >
                                    <span><b>@(t.Words["Giorni disponibilità risorsa"]):</b> @_daysMarkup</span><br />
                                    <span><b>@(t.Words["Orari disponibilità risorsa"]): </b>@_recurringRulesMarkup</span>
                                    </div>
                                </div>


                                <div class="d-flex justify-content-center h-100 w-100 ruleTable">
                                    <div class="w-100 h-100">
                                        <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.Stepper.Index" Style="height:100%">
                                        <MudTabPanel Text="@(t.Words["Giorni disponibilità"])">
                                                <div class="d-flex flex-column w-100" style="height:30vh;" >

                                                    <div class="d-flex w-100 p-3 justify-content-center" style="height:30%">
                                                        <span style="color:#0066FF; font-size:large;">
                                                            <b>
                                                            @(t.Words["Seleziona giorni risorsa"])
                                                            </b>
                                                        </span>
                                                    </div>
                                                <div class="d-flex w-100" style="height:70%">
                                                        <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                                            <Content>
                                                                <DaysWeek Callback="@(((List<DTODayOfWeekWizard> days, bool next) Value) => UpdateDays(Value))" Reset="@(() => Reset())" DaysSelected="CurrentViewModel.Stepper.DaysSelected" />
                                                            </Content>
                                                        </BaseComponent>
                                                    </div>
                                                </div>
                                            </MudTabPanel>
                                            <MudTabPanel Text="Orari ricorrenti" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.RECURRING_RULES)">
                                                <div class="d-flex flex-column w-100" style="height:30vh;" >

                                                    <div class="d-flex w-100 p-3 justify-content-center" style="height:20%">
                                                        <span style="color:#0066FF; font-size:large;">
                                                            <b>
                                                            @(t.Words["Seleziona orari risorsa"])
                                                            </b>
                                                        </span>
                                                    </div>
                                                    @if(!CurrentViewModel.IsSmallView)
                                                    {
                                                        <div class="d-flex w-100" style="height:80%">
                                                            <DaysSliderComponent Callback="@(((List<DTOTimeSlot> slots, bool next)values) => UpdateRecurringRules(values))" Reset="@(() => Reset())" SelectedTimeSlot="CurrentViewModel.Stepper.RecurringRules" />
                                                        </div>
                                                    } 
                                                </div>

                                            </MudTabPanel>
                                            <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.CONFIRM)">
                                                <div class="d-flex flex-column justify-content-around w-100 h-100" >
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-around w-100 p-3" >
                                                        <span style="font-size:large; color:#0066FF;"><b>@(t.Words["Hai selezionato per i seguenti giorni"]):</b></span>
                                                            <span style="font-size:medium;">@_daysMarkup</span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-around w-100 p-3">
                                                        <span style="font-size:large; color:#0066FF;"><b>@(t.Words["Hai selezionato queste regole orarie"]):</b></span>
                                                            <span style="font-size:medium;"><b>@_recurringRulesMarkup</b></span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row w-100">
                                                        <div class="d-flex flex-column justify-content-center align-items-center w-100 p-3">
                                                        <span style="font-size:medium; text-align:center;">@(t.Words["Potrai inserire ulteriori regole"])</span>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center p-3">
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                        <MudButton Color="Color.Error" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="() => Reset()">@(t.Words["Annulla"])</MudButton>
                                                        </div>
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                                                        <MudButton Color="Color.Default" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="@(() => {CurrentViewModel.Stepper = new(); StateHasChanged();_daysMarkup = (MarkupString)String.Empty;_recurringRulesMarkup = (MarkupString)String.Empty;})">@(t.Words["Reset"])</MudButton>
                                                        </div>
                                                        <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                        <MudButton Color="Color.Success" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="@(() => CurrentViewModel.Stepper.Confirm())">@(t.Words["Salva"])</MudButton>
                                                        </div>
                                                    </div>
                                                </div>

                                            </MudTabPanel>

                                        </MudTabs>
                                    </div>
                                </div>
                            }
                            else
                            {
                            
                            @* SEZIONE REGOLE DISPONIBILITA CARD/RIPILOGO LARGE *@
                                @if(!CurrentViewModel.IsSmallView)
                                {
                                    @if (CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                                    {
                                        <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2">
                                            <div class="d-flex flex-column w-75 h-75 align-items-center justify-content-center shadow ruleMask" @onclick="() => _enableHoursRule=true">
                                                <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                            <span class="p-3"> @(t.Words["Abilita regole disponibilità"]) </span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2">
                                            <div class="d-flex flex-column w-75 h-75 shadow ruleRecap" @onclick="() => _enableHoursRule=true">
                                                <div class="d-flex flex-row w-100 h-25 align-items-center p-3" style="background-color:#0066FF;color:white; border-radius: 15px 15px 0px 0px;">
                                                    <MudIcon Icon="@Icons.Material.Filled.AccessTimeFilled"></MudIcon>
                                                <span style="font-size:xx-large; padding-inline:1vw;">@(t.Words["Disponibilità risorsa"])</span>
                                                </div>
                                                 <div class="d-flex flex-column w-100 h-100  p-3" style="border-radius: 0px 0px 15px 15px;">
                                                     <div class="d-flex flex-row align-items-center p-1">
                                                    <span style="font-size:x-large; color:#0066FF">@(t.Words["Giorni disponibilità"]):</span>
                                                     </div>
                                                     <div class="d-flex flex-row justify-content-center p-3">
                                                         <span style="font-size:large; text-align:center;"><b>@_daysMarkup</b></span>
                                                     </div>
                                                     <div class="d-flex flex-row align-items-center p-1">
                                                    <span style="font-size:x-large; color:#0066FF">@(t.Words["Orari disponibilità"]):</span>
                                                     </div>
                                                     <div class="d-flex flex-row justify-content-center p-3">
                                                         <span style="font-size:large; text-align:center;"><b>@_recurringRulesMarkup</b></span>
                                                     </div>
                                                </div>
                                        
                                            </div>
                                        </div>
                                    }
                                }
                            }

                    </div>
                </div>
               }
        </MudForm>
        
        <div style="@(CurrentViewModel.IsSmallView ? "height:8vh;" : "")">
            @if (!_enableHoursRule || _enableHoursRule && CurrentViewModel.Stepper.ActualState == ResourceStepperState.FINISH)
            {
                <div class="d-flex  @(CurrentViewModel.IsSmallView ? "flex-row align-items-end justify-content-around h-100" : "align-items-end justify-content-between  h-75")">
                    <div class="d-flex justify-content-center @(CurrentViewModel.IsSmallView ? "w-100 p-2" : "w-25")">
                        <MudButton Color="Color.Default" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.Stepper = new())" style="@(CurrentViewModel.IsSmallView ? "width:40vw;border-radius:15px;" : "width:10vw;border-radius:15px;")">@(t.Words["Reset"])</MudButton>
                    </div>
                    <div class="d-flex justify-content-center @(CurrentViewModel.IsSmallView ? "w-100 p-2" : "w-25")">
                        <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.InsertResource())" style="@(CurrentViewModel.IsSmallView ? "width:40vw;border-radius:15px;" : "width:10vw;border-radius:15px;")" Disabled="!_success">@(t.Words["Salva"])</MudButton>
                    </div>
                </div>
            }
        </div>
    </DialogContent>

</MudDialog>

@code {

    private bool _enablePrice = false;
    private bool _enableHoursRule = false;
    private int _numRecurringRules = 1;
    private List<DTODayOfWeekWizard> _listDays { get; set; }
    private MarkupString _recurringRulesMarkup { get; set; }
    private MarkupString _daysMarkup { get; set; }
    private MudForm _form;
    private bool _success { get; set; }
    private IBrowserFile selectedFile;
    private bool _smallViewRule { get; set; }

    private Dictionary<int, DTOTimeSlot> _recurringRules = new();
    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };


    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
    }

    private void UpdateRecurringRules((List<DTOTimeSlot> slots, bool next) values)
    {
        CurrentViewModel.Stepper.UpdateRecurringRules(values.slots, values.next);
        _recurringRulesMarkup = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.RecurringRules.Select(dic => $"dalle <b><u>{dic.StartTime}</u></b> alle <b><u>{dic.EndTime}</u></b>"));
    }

    private void UpdateDays((List<DTODayOfWeekWizard> days, bool next) Value)
    {
        CurrentViewModel.Stepper.UpdateDays(Value.days, Value.next);
        _daysMarkup = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.DaysSelected.Select(d => $"<b>{d.FullName}</b>"));
    }

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.IsOpen = false;
    }

    private void Reset()
    {
        CurrentViewModel.Stepper = new();
        _enableHoursRule = false;
        _daysMarkup = (MarkupString)String.Empty;
        _recurringRulesMarkup = (MarkupString)String.Empty;
    }
    private void OnTimeChanged(DTOTimeSlot timePicker, int numRecurringRules, bool isEnd = false)
    {
        if (timePicker != null)
        {
            _recurringRules.TryGetValue(numRecurringRules, out DTOTimeSlot exist);
            TimeSpan startTime;
            TimeSpan endTime;

            if (exist != null)
                _recurringRules[numRecurringRules] = timePicker;
            else
            {
                var success = _recurringRules.TryAdd(numRecurringRules, timePicker);
                if (!success)
                {
                    _numRecurringRules = 1;
                    _recurringRules = new();
                }
            }

        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        selectedFile = file;
        await CurrentViewModel.HandleFileSelected(file);
    }

    private async Task DeleteFile()
    {
        selectedFile = null;
        CurrentViewModel.SelectedItem.ImageData = null;
        CurrentViewModel.SelectedItem.ImageContentType = String.Empty;
    }

    private void RemoveLastRule()
    {
        _numRecurringRules--;
        _recurringRules = _recurringRules.Where(x => x.Key != _numRecurringRules).ToDictionary();
    }
}


<style>
    .resourceDialogCss {
        width:70%;
        height:65%;
        border-radius: 30px !important;
    }

    .resourceDialogCssSmall {
        width: 100%;
        height: 100%;
        border-radius: 30px !important;
    }

    .insertResourceDivider {
        height: 95%;
        width: 1px;
        border: 1px solid #E1E1E1;
        padding-block: 10px;
    }

    .ruleMask{
        border-radius: 30px;
        background-color: #0066FF;
        font-size: x-large;
        text-align: center;
        color: white;
        cursor:pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .ruleMask:hover {
        z-index: 1;
        transform: scale(1.05);
    }

    .ruleTable{
        border:1px solid lightgrey;
        border-radius:15px;
    }

    .ruleRecap{
        border-radius: 15px;
        font-size: x-large;
        text-align: center;
    }

</style>

