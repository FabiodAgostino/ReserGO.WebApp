@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@using Microsoft.AspNetCore.Components.Forms

@inherits BaseComponentChild<IInsertResourceViewModel, DTOResource>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "resourceDialogCssSmall" : "resourceDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler" Options="@Options">
    <TitleContent>

    </TitleContent>

    <DialogContent>
        <div class="d-flex flex-row align-items-center w-100 p-3" style="height:10%;background-color:#0066FF;">
            <span style="font-size:xx-large; color:white; border-radius: 30px 30px 0px 0px;">Nuova risorsa</span>
        </div>
            
        <MudForm @ref="_form" @bind-IsValid="@_success" Class="w-100" >
            <div class="d-flex flex-row p-3 h-75">
                <div class="d-flex flex-column w-50">
                    <div class="d-flex flex-column w-100">
                    
                        <div class="d-flex flex-column w-100 justify-content-around p-2">
                            <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Label="Nome" />
                            <div class="d-flex w-100">
                                <BaseTextField MinLenght="0" Lines="10" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Label="Descrizione" Required="false" />
                            </div>
                        </div>

                        <div class="d-flex flex-row p-2" style="height:10vh;" >
                            <div class="d-flex align-items-center" style="width:60%;">
                                <BaseComponent TViewModel="IServicesComboViewModel" TModel="DTOService">
                                    <Content>
                                        <ServicesCombo Callback="@((List<DTOService> list) => CurrentViewModel.SelectedItem.Services = list)"/>
                                    </Content>
                                </BaseComponent>
                            </div>
                            <div class="d-flex flex-column align-items-center" style="width:40%; padding-top:1.2vh;">
                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg" MaximumFileCount="1">
                                    <ActivatorContent>
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.Image">
                                            Carica Immagine
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>

                                @if (selectedFile != null)
                                {
                                    <div class="w-100" >

                                        <MudChip T="string" Color="Color.Default">
                                            <div title="Rimuovi">
                                                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Size="Size.Small" @onclick="@(() => DeleteFile())" />
                                            </div>
                                            @selectedFile.Name
                                        </MudChip>
                                    </div>
                                }
                            </div>

                            
                            
                        </div>
                        <div class="d-flex flex-row align-items-center w-100">
                            <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="Richiesta di conferma" Color="Color.Primary"></MudCheckBox>
                            @if (CurrentViewModel.SelectedItem.RequestToConfirm)
                            {
                                <span style="padding-left:1vw;">(La prenotazione dovrà essere confermata da Admin)</span>
                            }
                        </div>

                        
                    </div>
                </div>
                
                <div class="d-flex flex-column w-50 h-100">
                        @if (_enableHoursRule && CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                        {
                        <div class="d-flex flex-row w-100" style="padding-block:1vh;">
                                <div class="d-flex flex-column w-100 p-2" style="border-radius:15px; border:1px solid lightgrey;" >
                                    <span><b>Giorni disponibilità risorsa:</b> @_daysMarkup</span><br />
                                    <span><b>Orari disponibilità risorsa: </b>@_recurringRulesMarkup</span>
                                </div>
                            </div>


                            <div class="d-flex justify-content-center h-100 w-100 ruleTable">
                                <div class="w-100 h-100">
                                    <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.Stepper.Index" Style="height:100%">
                                        <MudTabPanel Text="Giorni disponibilità">
                                            <div class="d-flex flex-column w-100" style="height:30vh;" >

                                                <div class="d-flex w-100 p-3 justify-content-center" style="height:30%">
                                                    <span style="color:#0066FF; font-size:large;">
                                                        <b>
                                                            Seleziona i giorni in cui la risorsa sarà disponibile
                                                        </b>
                                                    </span>
                                                </div>
                                            <div class="d-flex w-100" style="height:70%">
                                                    <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                                        <Content>
                                                            <DaysWeek Callback="@(((List<DTODayOfWeekWizard> days, bool next) Value) => CurrentViewModel.Stepper.UpdateDays(Value.days, Value.next))" DaysSelected="CurrentViewModel.Stepper.DaysSelected" />
                                                        </Content>
                                                    </BaseComponent>
                                                </div>
                                            </div>
                                        </MudTabPanel>
                                        <MudTabPanel Text="Orari ricorrenti" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.RECURRING_RULES)">
                                        
                                            <div class="d-flex flex-column w-100" style="height:30vh;" >

                                                <div class="d-flex w-100 p-3 justify-content-center" style="height:20%">
                                                    <span style="color:#0066FF; font-size:large;">
                                                        <b>
                                                            Seleziona gli orari di disponibilità
                                                        </b>
                                                    </span>
                                                </div>
                                                <div class="d-flex w-100" style="height:80%">
                                                    <DaysSliderComponent Callback="@(((List<DTOTimeSlot> slots, bool next)values) => CurrentViewModel.Stepper.UpdateRecurringRules(values.slots,values.next))" SelectedTimeSlot="CurrentViewModel.Stepper.RecurringRules" />
                                                </div>
                                            </div>

                                        </MudTabPanel>
                                        <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.CONFIRM)">
                                        @{
                                            _daysMarkup = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.DaysSelected.Select(d => $"<b>{d.FullName}</b>"));
                                        }
                                            <div class="d-flex flex-column justify-content-around w-100 h-100" >
                                                <div class="d-flex flex-row w-100">
                                                    <div class="d-flex flex-column justify-content-around w-100 p-3" >
                                                        <span style="font-size:large; color:#0066FF;"><b>Hai selezionato per i seguenti giorni:</b></span>
                                                        <span style="font-size:medium;">@_daysMarkup</span>
                                                    </div>
                                                </div>
                                                <div class="d-flex flex-row w-100">
                                                    <div class="d-flex flex-column justify-content-around w-100 p-3">
                                                        <span style="font-size:large; color:#0066FF;"><b>Hai selezionato queste regole orarie:</b></span>
                                                        <span style="font-size:medium;"><b>@_recurringRulesMarkup</b></span>
                                                    </div>
                                                </div>
                                                <div class="d-flex flex-row w-100">
                                                    <div class="d-flex flex-column justify-content-center align-items-center w-100 p-3">
                                                        <span style="font-size:medium; text-align:center;">Potrai inserire ulteriori regole orarie accedendo alla funzione di modifica della risorsa</span>
                                                    </div>
                                                </div>
                                                <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center p-3">
                                                    <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                        <MudButton Color="Color.Error" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="() => _enableHoursRule=false">Annulla</MudButton>
                                                    </div>
                                                    <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                                                        <MudButton Color="Color.Default" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="@(() => {CurrentViewModel.Stepper = new(); StateHasChanged();})">Reset</MudButton>
                                                    </div>
                                                    <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                                        <MudButton Color="Color.Success" Variant="Variant.Filled" Style="width:10vw;height:5vh" @onclick="@(() => CurrentViewModel.Stepper.Confirm())">Salva</MudButton>
                                                    </div>
                                                </div>
                                            </div>

                                        </MudTabPanel>

                                    </MudTabs>
                                </div>
                            </div>
                        }
                        else
                        {
                            
                            <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2 ruleMaskContainer">
                                <div class="d-flex flex-column w-75 h-75 align-items-center justify-content-center shadow ruleMask" @onclick="() => _enableHoursRule=true">
                                    <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                    <span class="p-3" > Abilita regole di disponibilità </span>
                                </div>
                            </div>
                        }
                </div>
            </div>
        </MudForm>
        <div>
            @if (!_enableHoursRule || _enableHoursRule && CurrentViewModel.Stepper.ActualState == ResourceStepperState.FINISH)
            {
                <div class="d-flex justify-content-between align-items-end h-75">
                    <div class="d-flex justify-content-center w-25">
                        <MudButton Color="Color.Default" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.Stepper = new())" style="width:10vw;height:6vh;border-radius:15px;">Reset</MudButton>
                    </div>
                    <div class="d-flex justify-content-center w-25">
                        <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.InsertResource())" style="width:10vw;height:6vh;border-radius:15px;" Disabled="!_success">Salva</MudButton>
                    </div>
                </div>
            }
        </div>
    </DialogContent>

</MudDialog>

@code {

    private bool _enablePrice = false;
    private bool _enableHoursRule = false;
    private int _numRecurringRules = 1;
    private List<DTODayOfWeekWizard> _listDays { get; set; }
    private MarkupString _recurringRulesMarkup { get; set; }
    private MarkupString _daysMarkup { get; set; }
    private MudForm _form;
    private bool _success { get; set; }
    private IBrowserFile selectedFile;

    private Dictionary<int, DTOTimeSlot> _recurringRules = new();
    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };


    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
    }

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.IsOpen = false;
    }
    private void OnTimeChanged(DTOTimeSlot timePicker, int numRecurringRules, bool isEnd = false)
    {
        if (timePicker != null)
        {
            _recurringRules.TryGetValue(numRecurringRules, out DTOTimeSlot exist);
            TimeSpan startTime;
            TimeSpan endTime;

            if (exist != null)
                _recurringRules[numRecurringRules] = timePicker;
            else
            {
                var success = _recurringRules.TryAdd(numRecurringRules, timePicker);
                if (!success)
                {
                    _numRecurringRules = 1;
                    _recurringRules = new();
                }
            }

        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        selectedFile = file;
        await CurrentViewModel.HandleFileSelected(file);
    }

    private async Task DeleteFile()
    {
        selectedFile = null;
        CurrentViewModel.SelectedItem.ImageData = null;
        CurrentViewModel.SelectedItem.ImageContentType = String.Empty;
    }

    private void RemoveLastRule()
    {
        _numRecurringRules--;
        _recurringRules = _recurringRules.Where(x => x.Key != _numRecurringRules).ToDictionary();
    }
}


<style>
    .resourceDialogCss {
        width:70%;
        height:65%;
        border-radius: 30px !important;
    }

    .resourceDialogCssSmall {
        width: 100%;
        height: 100%;
        border-radius: 30px !important;
    }

    .insertResourceDivider {
        height: 95%;
        width: 1px;
        border: 1px solid #E1E1E1;
        padding-block: 10px;
    }

    .ruleMask{
        border-radius: 30px;
        background-color: #0066FF;
        font-size: x-large;
        text-align: center;
        color: white;
        cursor:pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .ruleMask:hover {
        z-index: 1;
        transform: scale(1.05);
    }

    .ruleTable{
        border:1px solid lightgrey;
        border-radius:15px;
    }

</style>

