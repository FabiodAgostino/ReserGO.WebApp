@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@using Microsoft.AspNetCore.Components.Forms

@inherits BaseComponentChild<IInsertResourceViewModel, DTOResource>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "scheduleDialogCssSmall" : "scheduleDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler" Options="@Options">
    <TitleContent>

    </TitleContent>

    <DialogContent>
        <div class="insertResourceContainer">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <div class="d-flex flex-column w-100">
                    <div class="d-flex p-2">
                        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Label="Nome" />
                        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Label="Descrizione" Required="false" />
                    </div>
                    <div class="d-flex justify-content-evenly p-2">
                        <div>
                            <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="Richiesta di conferma"></MudCheckBox>
                        </div>

                        <div>
                            <BaseComponent TViewModel="IServicesComboViewModel" TModel="DTOService">
                                <Content>
                                    <ServicesCombo />
                                </Content>
                            </BaseComponent>
                        </div>
                        <div>
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg" MaximumFileCount="1">
                                <ActivatorContent>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Image">
                                        Carica Immagine
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>

                        </div>
                        <div style="width:132px">
                            @if (selectedFile != null)
                            {

                                <MudChip T="string" Color="Color.Default">
                                    <div title="Rimuovi">
                                        <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Size="Size.Small" @onclick="@(() => DeleteFile())" />
                                    </div>
                                    @selectedFile.Name
                                </MudChip>
                            }
                        </div>
                    </div>
                </div>

                <div style="height:320px">
                    @if (CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                    {
                        @if (!_enableHoursRule)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.ControlPoint" Color="Color.Primary" @onclick="() => _enableHoursRule=true" />
                            <span>Abilita regole di disponibilità</span>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Error" @onclick="() => _enableHoursRule=false" />
                            <span>Disabilita regole di disponibilità</span>
                        }
                    }
                    else
                    {
                        <div>
                            <span><b>Giorni disponibilità risorsa:</b> @_daysMarkup</span><br />
                            <span><b>Orari disponibilità risorsa: </b>@_recurringRulesMarkup</span>
                        </div>
                    }
                    @if (_enableHoursRule && CurrentViewModel.Stepper.ActualState != ResourceStepperState.FINISH)
                    {
                        <div class="d-flex justify-content-center" style="height:320px; max-height:320px; overflow:scroll;">
                            <div class="w-75">
                                <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.Stepper.Index" Style="height:100%">
                                    <MudTabPanel Text="Giorni disponibilità">
                                        <div>Seleziona i giorni in cui la risorsa sarà disponibile</div>
                                        <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                            <Content>
                                                <DaysWeek Callback="@(((List<DTODayOfWeekWizard> days, bool next) Value) => CurrentViewModel.Stepper.UpdateDays(Value.days, Value.next))" DaysSelected="CurrentViewModel.Stepper.DaysSelected" />
                                            </Content>
                                        </BaseComponent>
                                    </MudTabPanel>
                                    <MudTabPanel Text="Orari ricorrenti" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.RECURRING_RULES)">
                                        <div class="d-flex justify-content-center mt-5 pb-5">
                                            @{
                                                _recurringRulesMarkup = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.RecurringRules.Select(dic => $"dalle <b><u>{dic.StartTime}</u></b> alle <b><u>{dic.EndTime}</u></b>"));
                                            }
                                            @if (CurrentViewModel.Stepper.RecurringRules.Count() > 0)
                                            {
                                                <span>La risorsa sarà disponibile @_recurringRulesMarkup</span>
                                            }
                                        </div>
                                        <DaysSliderComponent Callback="@(((List<DTOTimeSlot> slots, bool next)values) => CurrentViewModel.Stepper.UpdateRecurringRules(values.slots,values.next))" SelectedTimeSlot="CurrentViewModel.Stepper.RecurringRules" />

                                    </MudTabPanel>
                                    <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.CONFIRM)">
                                        <div>
                                            @{
                                                _daysMarkup = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.DaysSelected.Select(d => $"<b>{d.FullName}</b>"));
                                            }
                                            Hai selezionato per i seguenti giorni: @_daysMarkup <br />
                                            Hai selezionato queste regole orarie: @_recurringRulesMarkup<br /><br />
                                            Potrai inserire ulteriori regole orarie accedendo alla funzione di modifica della risorsa.
                                        </div>
                                        <div>
                                            <MudButton Color="Color.Default" Variant="Variant.Filled" @onclick="@(() => {CurrentViewModel.Stepper = new(); StateHasChanged();})">Reset</MudButton>
                                            <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.Stepper.Confirm())">Salva</MudButton>
                                        </div>
                                    </MudTabPanel>

                                </MudTabs>
                            </div>
                        </div>
                    }
                    @if (!_enableHoursRule || _enableHoursRule && CurrentViewModel.Stepper.ActualState == ResourceStepperState.FINISH)
                    {
                        <div class="d-flex justify-content-center align-items-end h-75">
                            <div class="d-flex m-3 w-25">
                                <MudButton Color="Color.Default" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.Stepper = new())" style="width:9vw">Reset</MudButton>
                            </div>
                            <div class="d-flex m-3 w-25">
                                <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="@(() => CurrentViewModel.InsertResource())" style="width:9vw" Disabled="!_success">Salva</MudButton>
                            </div>
                        </div>
                    }
                </div>
            </MudForm>
        </div>

    </DialogContent>

</MudDialog>

@code {

    private bool _enablePrice = false;
    private bool _enableHoursRule = false;
    private int _numRecurringRules = 1;
    private List<DTODayOfWeekWizard> _listDays { get; set; }
    private MarkupString _recurringRulesMarkup { get; set; }
    private MarkupString _daysMarkup { get; set; }
    private MudForm _form;
    private bool _success { get; set; }
    private IBrowserFile selectedFile;

    private Dictionary<int, DTOTimeSlot> _recurringRules = new();
    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.IsOpen = false;
    }
    private void OnTimeChanged(DTOTimeSlot timePicker, int numRecurringRules, bool isEnd = false)
    {
        if (timePicker != null)
        {
            _recurringRules.TryGetValue(numRecurringRules, out DTOTimeSlot exist);
            TimeSpan startTime;
            TimeSpan endTime;

            if (exist != null)
                _recurringRules[numRecurringRules] = timePicker;
            else
            {
                var success = _recurringRules.TryAdd(numRecurringRules, timePicker);
                if (!success)
                {
                    _numRecurringRules = 1;
                    _recurringRules = new();
                }
            }

        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        selectedFile = file;
        await CurrentViewModel.HandleFileSelected(file);
    }

    private async Task DeleteFile()
    {
        selectedFile = null;
        CurrentViewModel.SelectedItem.ImageData = null;
        CurrentViewModel.SelectedItem.ImageContentType = String.Empty;
    }

    private void RemoveLastRule()
    {
        _numRecurringRules--;
        _recurringRules = _recurringRules.Where(x => x.Key != _numRecurringRules).ToDictionary();
    }
}

<style>
    .insertResourceContainer {
        width: 65vw;
        padding: 3vw;
    }
</style>
