@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@inherits BaseComponentChild<IInsertResourceViewModel, DTOResource>

<div class="insertResourceContainer">
    <div class="d-flex flex-column w-100">

        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Label="Nome" />
        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Label="Descrizione" />
        <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="Richiesta di conferma"></MudCheckBox>
        <BaseComponent TViewModel="IServicesComboViewModel" TModel="DTOService">
            <Content>
                <ServicesCombo /> 
            </Content>
        </BaseComponent>
    </div>
    <div>
        @if (!_enableHoursRule)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ControlPoint" Color="Color.Primary" @onclick="() => _enableHoursRule=true" />
            <span>Abilita regole di disponibilità</span>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Error" @onclick="() => _enableHoursRule=false" />
            <span>Disabilita regole di disponibilità</span>
        }
        @if (_enableHoursRule)
        {
            <div class="d-flex justify-content-center">
                <div class="w-75">
                    <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.Stepper.Index" Style="height:100%">
                        <MudTabPanel Text="Giorni disponibilità">
                            <div>Seleziona i giorni in cui la risorsa sarà disponibile</div>
                            <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                <Content>
                                    <DaysWeek Callback="@(((List<DTODayOfWeekWizard> days, bool next) Value) => CurrentViewModel.Stepper.UpdateDays(Value.days, Value.next))" DaysSelected="CurrentViewModel.Stepper.DaysSelected" />
                                </Content>
                            </BaseComponent>
                        </MudTabPanel>
                        <MudTabPanel Text="Orari ricorrenti" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.RECURRING_RULES)">
                            <div class="d-flex justify-content-center mt-5 pb-5">
                                @{
                                    MarkupString result = (MarkupString)string.Join(", ", CurrentViewModel.Stepper.RecurringRules.Select(dic => $"dalle <b><u>{dic.StartTime}</u></b> alle <b><u>{dic.EndTime}</u></b>"));
                                }
                                @if (CurrentViewModel.Stepper.RecurringRules.Count() > 0)
                                {
                                    <span>La risorsa sarà disponibile @result</span>
                                }
                            </div>
                            <DaysSliderComponent Callback="@(((List<DTOTimeSlot> slots, bool next)values) => CurrentViewModel.Stepper.UpdateRecurringRules(values.slots,values.next))" SelectedTimeSlot="CurrentViewModel.Stepper.RecurringRules" />

                        </MudTabPanel>
                        <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.Stepper.Disabled(ResourceStepperState.CONFIRM)">
                        </MudTabPanel>

                    </MudTabs>
                </div>
            </div>
        }
    </div>
</div>
@code {

    private bool _enablePrice = false;
    private bool _enableHoursRule = false;
    private int _numRecurringRules = 1;
    private List<DTODayOfWeekWizard> _listDays { get; set; }


    private Dictionary<int, DTOTimeSlot> _recurringRules = new();

    private void OnTimeChanged(DTOTimeSlot timePicker, int numRecurringRules, bool isEnd = false)
    {
        if (timePicker != null)
        {
            _recurringRules.TryGetValue(numRecurringRules, out DTOTimeSlot exist);
            TimeSpan startTime;
            TimeSpan endTime;

            if (exist != null)
                _recurringRules[numRecurringRules] = timePicker;
            else
            {
                var success = _recurringRules.TryAdd(numRecurringRules, timePicker);
                if (!success)
                {
                    _numRecurringRules = 1;
                    _recurringRules = new();
                }
            }

        }
    }

    private void RemoveLastRule()
    {
        _numRecurringRules--;
        _recurringRules = _recurringRules.Where(x => x.Key != _numRecurringRules).ToDictionary();
    }
}
