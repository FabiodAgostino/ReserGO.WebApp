@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@inherits BaseComponentChild<IInsertResourceViewModel, DTOResource>

<div class="insertResourceContainer">
    <div class="d-flex flex-row w-100">

        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Label="Nome" />
        <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Label="Descrizione" />
        <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="Richiesta di conferma"></MudCheckBox>

    </div>
    <div>
        @if (!_enableHoursRule)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ControlPoint" Color="Color.Primary" @onclick="() => _enableHoursRule=true" />
            <span>Abilita regole di disponibilità</span>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Error" @onclick="() => _enableHoursRule=false" />
            <span>Disabilita regole di disponibilità</span>
        }
        @if (_enableHoursRule)
        {
            <div class="d-flex justify-content-center">
                <div class="w-75">
                    <MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.SelectedIndex" Style="height:100%">
                        <MudTabPanel Text="Giorni disponibilità">
                            <div>Seleziona i giorni in cui la risorsa sarà disponibile</div>
                            <BaseComponent TViewModel="IDayOfWeekViewModel" TModel="DTODayOfWeekWizard">
                                <Content>
                                    <DaysWeek Callback="@((List<DTODayOfWeekWizard> days) => {_listDays=days; CurrentViewModel.SelectedIndex++;})" />
                                </Content>
                            </BaseComponent>
                        </MudTabPanel>
                        <MudTabPanel Text="Orari ricorrenti" Disabled="CurrentViewModel.SelectedIndex<1">
                            <div class="d-flex w-25 justify-content-around flex-column">
                                @for (int i = 0; i < _numRecurringRules; i++)
                                {
                                    var currentIndex = i;
                                    @*  _recurringRules.TryGetValue(currentIndex, out (TimeSpan? start, TimeSpan? end)? exist);
                            var startTime = exist!= null ? exist.Value.start : TimeSpan.Zero;
                            var endTime = exist != null ? exist.Value.end : TimeSpan.FromMinutes(30); *@
                                    <div class="d-flex">
                                        <TimePicker OnRangeChanged="@((DTOTimeSlot picker) => OnTimeChanged(picker, currentIndex))" DictionaryTimeSlot="_recurringRules" />
                                        @*    <TimePicker Label="Ora inizio"
                                MinValue="@(new TimeSpan(8, 0, 0))"
                                Error="@false"
                                Callback="@((TimeSpan? time) => OnTimeChanged(time, currentIndex))" />
                                <TimePicker Label="Ora fine"
                                MinValue="@(new TimeSpan(8, 0, 0))"
                                Error="@false"
                                Callback="@((TimeSpan? time) => OnTimeChanged(time, currentIndex, true))" /> *@
                                    </div>
                                }
                            </div>
                            <div>
                                <MudIconButton Icon="@Icons.Material.Filled.ControlPoint" Color="Color.Primary" @onclick="() => {_numRecurringRules++;StateHasChanged();}" />
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Error" @onclick="RemoveLastRule" Disabled="_numRecurringRules==1" />

                            </div>
                            <div><b>Aggiungi/rimuovi range orari</b></div>

                            <div>
                                @foreach (var dic in _recurringRules)
                                {
                                    <span>@($" Dalle {dic.Value.StartTime} alle {dic.Value.EndTime} -")</span>
                                }
                            </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Conferma" Disabled="CurrentViewModel.SelectedIndex<2">
                        </MudTabPanel>

                    </MudTabs>
                </div>
            </div>
        }
    </div>
</div>

@code {

    private bool _enablePrice = false;
    private bool _enableHoursRule = false;
    private int _numRecurringRules = 1;
    private List<DTODayOfWeekWizard> _listDays { get; set; }


    private Dictionary<int, DTOTimeSlot> _recurringRules = new();

    private void OnTimeChanged(DTOTimeSlot timePicker, int numRecurringRules, bool isEnd = false)
    {
        if (timePicker != null)
        {
            _recurringRules.TryGetValue(numRecurringRules, out DTOTimeSlot exist);
            TimeSpan startTime;
            TimeSpan endTime;

            if (exist != null)
                _recurringRules[numRecurringRules] = timePicker;
            else
            {
                var success = _recurringRules.TryAdd(numRecurringRules, timePicker);
                if (!success)
                {
                    _numRecurringRules = 1;
                    _recurringRules = new();
                }
            }

        }
    }

    private void RemoveLastRule()
    {
        _numRecurringRules--;
        _recurringRules = _recurringRules.Where(x => x.Key != _numRecurringRules).ToDictionary();
    }
}
