@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using ReserGO.DTO.Extensions
@using ReserGO.DTO.ListAvailability
@using ReserGO.Utils.DTO.ExtensionMethod
@using ReserGO.ViewModel.Interface.Resource.UpdateResource
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.Service.Interface.Service;
@using ReserGO.Utils.DTO.Utils;
@using ReserGO.Miscellaneous.Model
@inject ITranslateService t
@inject IDialogService DialogService
@inherits BaseComponentChild<IUpdateResourceViewModel, DTOResource>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "resourceDialogCssSmall" : "resourceDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler" Options="@Options">
    <TitleContent>

    </TitleContent>

    <DialogContent>
        <div>
            <div class="d-flex flex-row align-items-center w-100 p-3" style="height:10%;background-color:#0066FF;">
                <span style="@(CurrentViewModel.IsSmallView ? "font-size:x-large;":"font-size:xx-large;") color:white; border-radius: 30px 30px 0px 0px;">@(t.Words["Modifica risorsa"])</span>
            </div>
            @if (CurrentViewModel.SelectedItem != null)
            {
                <div class="d-flex p-3 @(CurrentViewModel.IsSmallView ? "flex-column" : "flex-row h-75")" style="@(CurrentViewModel.IsSmallView ? "height:80%;" : "")">

                    <div class="d-flex flex-column @(CurrentViewModel.IsSmallView ? "w-100" : "w-50")" style="@(CurrentViewModel.IsSmallView ? "overflow:auto;" : "")">
                        <div class="d-flex flex-column w-100">

                            <div class="d-flex flex-column w-100 justify-content-around p-2">
                                <BaseTextField MinLenght="0" Bind="@((string value) => CurrentViewModel.SelectedItem.ResourceName = value)" Value="@CurrentViewModel.SelectedItem.ResourceName" Label="Nome" />

                                <div class="d-flex w-100">
                                    <BaseTextField MinLenght="0" Lines="10" Bind="@((string value) => CurrentViewModel.SelectedItem.Description = value)" Value="@CurrentViewModel.SelectedItem.Description" Label="Descrizione" Required="false" />
                                </div>
                            </div>

                            <div class="d-flex p-2 @(CurrentViewModel.IsSmallView ? "flex-column" : "flex-row")" style="@(CurrentViewModel.IsSmallView ? "height:22vh;" : "height:10vh;")">
                                <div class="d-flex align-items-center" style="@(CurrentViewModel.IsSmallView ? "width:100%;" : "width:50%;")">
                                    <BaseComponent TViewModel="IServicesComboViewModel" TModel="DTOService">
                                        <Content>
                                            <ServicesCombo Callback="@((List<DTOService> list) => CurrentViewModel.SelectedItem.Services = list)" SelectedServices="@CurrentViewModel.SelectedItem.Services" />
                                        </Content>
                                    </BaseComponent>
                                </div>
                                <div class="d-flex flex-column align-items-center" style="@(CurrentViewModel.IsSmallView ? "width:100%; padding-top:5vh;" : "width:50%; padding-top:1.2vh;")">
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg" MaximumFileCount="1">
                                        <ActivatorContent>
                                            <MudButton Variant="Variant.Filled"
                                                       Color="@(CurrentViewModel.SelectedItem.ImageData!=null ? Color.Warning : Color.Primary)"
                                                       StartIcon="@Icons.Material.Filled.Image">
                                                @(CurrentViewModel.SelectedItem.ImageData != null ? "Modifica immagine" : "Carica immagine")
                                            </MudButton>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                    @if (selectedFile != null || CurrentViewModel.SelectedItem.ImageData != null && CurrentViewModel.SelectedItem.ImageData.Count()>0)
                                    {
                                        <div class="d-flex w-100 align-items-center justify-content-center pt-1">

                                            <MudChip T="string" Color="Color.Default">
                                                <div title="Rimuovi">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Size="Size.Small" @onclick="@(() => DeleteFile())" />
                                                </div>
                                                @(selectedFile != null ? selectedFile.Name : CurrentViewModel.SelectedItem.ImageName)
                                            </MudChip>
                                        </div>
                                    }
                                </div>

                            </div>

                            <div class="d-flex justify-content-between w-100 pt-4 @(CurrentViewModel.IsSmallView ? "flex-column" : "align-items-center flex-row")">
                                <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.RequestToConfirm" Label="Richiesta di conferma" Color="Color.Primary"></MudCheckBox>
                                @if (CurrentViewModel.SelectedItem.RequestToConfirm)
                                {
                                    <span style="padding-left:1vw;">(La prenotazione dovrà essere confermata da Admin)</span>
                                }
                                <div class="d-flex flex-row" style="@(CurrentViewModel.IsSmallView ? "padding-inline:4vw;" : "")">
                                    <MudSwitch @bind-Value="@CurrentViewModel.EnableResource" Label="Abilita risorsa" Color="Color.Success" />
                                </div>
                            </div>


                        </div>


                    </div>
                    <div class="d-flex flex-column justify-content-around align-items-center w-50 p-3">
                        <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2 pt-4">
                            <div class="d-flex w-100 flex-column align-items-center justify-content-center shadow ruleMask" @onclick="(() => OpenModal(AvailabilityType.UnavailableSpecificDay))">
                                <div class="d-flex p-2">
                                    <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                </div>
                                <span class="p-3">Disabilita giorno specifico</span>
                            </div>
                        </div>
                        <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2 pt-4">
                            <div class="d-flex w-100 flex-column align-items-center justify-content-center shadow ruleMask" @onclick="(() => OpenModal(AvailabilityType.UnavailableByDaysOfTheWeek))">
                                <div class="d-flex p-2">
                                    <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                </div>
                                <span class="p-3">Modifica regole giornaliere</span>
                            </div>
                        </div>
                        <div class="d-flex w-100 justify-content-center align-items-center h-100 p-2 pt-4">
                            <div class="d-flex w-100 flex-column align-items-center justify-content-center shadow ruleMask" @onclick="(() => OpenModal(AvailabilityType.UnavailableTimeDateSlot))">
                                <div class="d-flex p-2">
                                    <MudIcon Icon="@Icons.Material.Filled.ControlPoint"></MudIcon>
                                </div>
                                <span class="p-3">Modifica orari giorno specifico</span>
                            </div>
                        </div>


                    </div>


                </div>

                <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
                    <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Default" Style="@(CurrentViewModel.IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="(() => CurrentViewModel.IsOpen = false)">Chiudi</MudButton>
                    </div>

                    <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Style="@(CurrentViewModel.IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="(async ()  => await CurrentViewModel.UpdateResource())">Modifica risorsa</MudButton>
                    </div>
                </div>
            }
        </div>
    </DialogContent>
</MudDialog>

@code
{
    private IBrowserFile selectedFile;
    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
    }

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.IsOpen = false;
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        selectedFile = file;
        await CurrentViewModel.HandleFileSelected(file);
    }

    private async Task OpenModal(AvailabilityType type)
    {
        var callback = EventCallback.Factory.Create<(DTOResource, bool)>(this, (((DTOResource value, bool isChanged) value) => EditRule(value, type)));
        var modal = new EditRuleModal(callback, type, CurrentViewModel.SelectedItem, CurrentViewModel.IsSmallView);


        var dialogParameters = new DialogParameters
            {
                { "Modal", modal },
            };

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center
            };

        var result = await DialogService.Show<ModalEditResourceRule>("EditRule", dialogParameters, options).Result;
    }

    private void EditRule((DTOResource resource, bool isChanged) value, AvailabilityType type)
    {
        if (value.isChanged)
        {
            var resource = value.resource;
            switch (type)
            {
                case AvailabilityType.UnavailableSpecificDay:
                    CurrentViewModel.RulesChanged.Add(AvailabilityType.UnavailableSpecificDay.ToString());
                    break;
                case AvailabilityType.UnavailableByDaysOfTheWeek:
                    CurrentViewModel.RulesChanged.Add(AvailabilityType.UnavailableByDaysOfTheWeek.ToString());
                    var daySelected = resource.AvailabilityAdv.UnavailableByDaysOfTheWeek.Data;
                    var days = daySelected.GetMissingDays();
                    resource.AvailabilityAdv.UnavailableByDaysOfTheWeek = new() { Data = days };

                    var recurring = resource.AvailabilityAdv.UnavailableRecurringTimeDays.FirstOrDefault().TimeSlots;
                    if (recurring != null)
                    {

                        var recurringRules = DTOResourceExtension.ConvertAvailabilityToUnavailability(recurring);
                        var unavailableRecurringTimeDays = new List<DTOUnavailableRecurringTimeDay>();
                        daySelected.ForEach(day =>
                        {
                            unavailableRecurringTimeDays.Add(new DTOUnavailableRecurringTimeDay(day, recurringRules));
                        });
                        resource.AvailabilityAdv.UnavailableRecurringTimeDays = unavailableRecurringTimeDays;
                    }
                    break;
                case AvailabilityType.UnavailableTimeDateSlot:
                    CurrentViewModel.RulesChanged.Add(AvailabilityType.UnavailableTimeDateSlot.ToString());
                    resource.AvailabilityAdv.UnavailableTimeDatesSlot.ForEach(rule =>
                    {
                        rule.TimeSlots = DTOResourceExtension.ConvertAvailabilityToUnavailability(rule.TimeSlots);
                    });
                    break;

            }
            CurrentViewModel.SelectedItem.AvailabilityAdv = resource.AvailabilityAdv;
        }
    }

    private async Task DeleteFile()
    {
        selectedFile = null;
        CurrentViewModel.SelectedItem.ImageData = null;
        CurrentViewModel.SelectedItem.ImageContentType = String.Empty;
        CurrentViewModel.SelectedItem.ImageName = String.Empty;
    }

}

<style>
    .ruleMask {
        border-radius: 30px;
        background-color: #0066FF;
        font-size: x-large;
        text-align: center;
        color: white;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
</style>