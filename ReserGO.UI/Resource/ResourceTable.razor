@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Utils.DTO.Service
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.UI.Historical
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t
@inject IDialogService DialogService

@if (Resources is object)
{
	<MudTable Items="@Resources.CurrentPageData" Loading="IsLoading"
			  Hover="true" Class="w-100 shadow tableClass" Breakpoint="Breakpoint.Sm"
			  LoadingProgressColor="Color.Primary" RowsPerPage="10"
			  TotalItems="10">
		<ToolBarContent>
			<div class="d-flex w-100 h-100 align-items-center toolbarCss" style="background-color:#0066FF;" >
				<MudText Typo="Typo.h6"> <span style="@(IsSmallView ? "padding-inline:2vw;":"")"> @(t.Words["Risorse"]) </span></MudText>
				<MudSpacer />
				<div class="d-flex flex-row @(IsSmallView ? "w-100 justify-content-end":"w-50")">
					<div class="d-flex justify-content-end align-items-center w-50 toolItem">
						<MudButton StartIcon="@Icons.Material.Filled.NotificationAdd" Size="Size.Small" Color="Color.Success" Class="@(IsSmallView ? "btn-new-small":"btn-new")" Variant="Variant.Filled" @onclick="(async () => await OpenModal(TypeActionsGRID.INSERT))">@(IsSmallView ? "Nuova" : "Nuova risorsa")</MudButton>
					</div>
					<div class="toolItem @(IsSmallView ? "w-50":"w-100")">
						<BaseTextField MinLenght="0" Required="false" Label="@(t.Words["Ricerca risorsa"])" Bind="@((string value) => OnChangeSearchText(value))" Value="@PagingOptions.Filter.SearchText"></BaseTextField>
					</div>
				</div>
			</div>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>@(t.Words["Nome risorsa"])</MudTh>
			<MudTh>@(t.Words["Descrizione"])</MudTh>
			<MudTh>@(t.Words["Richiesta di conferma"])</MudTh>
			<MudTh>@(t.Words["Servizi"])</MudTh>
			<MudTh></MudTh>
		</HeaderContent>

		<RowTemplate Context="element">
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:2vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Nome"]): </b>
					}
					@(t.TruncateText(element.ResourceName, 30))
				</div>
			</MudTd>
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Descrizione"]): </b>
					}
					@(t.TruncateText(element.Description, 30))
				</div>
			</MudTd><MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"") width:35%;" class="d-flex justify-content-center">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Conferma"]): </b>
					}
					<MudCheckBox @bind-Value="element.RequestToConfirm" ReadOnly="true"/>
				</div>
			</MudTd><MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Servizi"]): </b>
					}
					@if (element.Services is object && element.Services.Count() > 0)
					{
						var servizi = string.Join(", ", @element.Services.Select(x => x.ServiceName));
						@if (servizi.Length > 50)
						{
							<MudButton StartIcon="@Icons.Material.Filled.ShoppingBasket" Size="Size.Small" Color="Color.Secondary" Variant="Variant.Filled" @onclick="(() => ShowServices(element.Services))">Mostra servizi</MudButton>
						}
						else
						{
							<span>
								@(t.TruncateText(servizi, 30))
							</span>
						}
					}
					else
					{
						<span>(@(t.Words["Nessun servizio"]))</span>
					}
				</div>
			</MudTd>
			<MudTd>
				<div class="d-flex flex-row @(IsSmallView ? "w-100":"")">
					<div title="@(t.Words["Elimina"])" class="m-3 @(IsSmallView ? "w-50":"")">
						<MudIconButton Class="@(IsSmallView ? "w-100":"")" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" @onclick="(() =>DeleteDialog(element))" ></MudIconButton>
					</div>
					<div title="@(t.Words["Modifica"])" class="m-3 @(IsSmallView ? "w-50":"")">
						<MudIconButton Class="@(IsSmallView ? "w-100":"")" Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small" @onclick="(async () => await OpenModal(TypeActionsGRID.UPDATE, element))"></MudIconButton>
					</div>
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<div class="d-flex flex-row align-items-center @(IsSmallView ? "":"justify-content-between")">
				<MudPagination SelectedChanged="OnPageChangedHandler" ShowPageButtons="!IsSmallView" Count="@((PagingOptions.TotalCount.Value + PagingOptions.PageSize.Value - 1) / PagingOptions.PageSize.Value)" Class="pa-4" />
				<div class="paginatorPageSize" style="@(IsSmallView ? "width:50%;":"")">
					<MudSelect T="int" Label="@(t.Words["Elementi per pagina"])" ValueChanged="@OnPageSizeHandler" Value="PagingOptions.PageSize.HasValue ? PagingOptions.PageSize.Value : 10" Variant="Variant.Outlined">
						@foreach (var size in pageSizes)
						{
							<MudSelectItem Value="size">@size</MudSelectItem>
						}
					</MudSelect>
				</div>
			</div>
		</PagerContent>
	</MudTable>
}


@code {

	[Parameter]
	public bool IsLoading { get; set; }

	[Parameter]
	public GenericPagedList<DTOResource> Resources { get; set; }

	[Parameter]
	public GenericPagedFilter<DTOResourceFilter> PagingOptions { get; set; }

	[Parameter]
	public EventCallback<GridAction<DTOResource, DTOResourceFilter>> Action { get; set; }

	[Parameter]
	public bool IsSmallView { get; set; }

	private DTOResourceFilter Filter = new();


	private List<int> pageSizes = new List<int> { 5, 10, 20, 50 }; // Opzioni di PageSize

	protected override async Task OnParametersSetAsync()
	{
		StateHasChanged();
	}


	private async Task OpenModal(TypeActionsGRID typeAction, DTOResource resource = null)
	{
		if (Action.HasDelegate)
		{
			var action = new GridAction<DTOResource, DTOResourceFilter>();

			if(typeAction==TypeActionsGRID.INSERT)
				action = new GridAction<DTOResource, DTOResourceFilter>(TypeActionsGRID.INSERT);
			else
			{
				var list = new List<DTOResource>();
				list.Add(resource);
				action = new GridAction<DTOResource, DTOResourceFilter>(list, TypeActionsGRID.UPDATE, "");
			}

			await Action.InvokeAsync(action);
		}
	}
	private async Task OnPageChangedHandler(int currPageIndex)
	{
		if (Action.HasDelegate)
		{
			PagingOptions.Page = currPageIndex;
			var action = new GridAction<DTOResource, DTOResourceFilter>(PagingOptions, TypeActionsGRID.PAGE_CHANGED, "");
			await Action.InvokeAsync(action);
		}
	}

	private async Task OnPageSizeHandler(int pageSize)
	{
		PagingOptions.PageSize = pageSize;
		if (Action.HasDelegate)
		{
			var action = new GridAction<DTOResource, DTOResourceFilter>(PagingOptions, TypeActionsGRID.PAGE_SIZE_CHANGED, "");
			await Action.InvokeAsync(action);
		}
	}

	private async Task DeleteDialog(DTOResource element)
	{
		var callback = EventCallback.Factory.Create<bool>(this, ((bool value) => DeleteCallback(value, element)));
		string text = $"<b>{t.Words["Irreversibile"]}</b><br/>*{t.Words["Conferma elimina risorsa"]}";
		var modal = new GenericModal<bool>(callback, text, t.Words["Elimina risorsa"], TypeActionsGRID.GENERIC_DELETE);

		var dialogParameters = new DialogParameters
			{
				{ "Modal", modal },
				{ "IsSmallView", IsSmallView }
            };

		var options = new DialogOptions
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center
			};

		var result = await DialogService.Show<ConfirmModal>(t.Words["Elimina risorsa"], dialogParameters, options).Result;
	}

	private async Task DeleteCallback(bool value, DTOResource element)
	{
		if (Action.HasDelegate && value)
		{
			var list = new List<DTOResource>();
			list.Add(element);

			var action = new GridAction<DTOResource, DTOResourceFilter>(list, TypeActionsGRID.SINGLE_DELETE, "");
			await Action.InvokeAsync(action);
		}
	}

	private async Task OnChangeSearchText(string value)
	{
		Filter.SearchText = value;
		var action = new GridAction<DTOResource, DTOResourceFilter>(Filter, TypeActionsGRID.FILTER, "");
		if (Action.HasDelegate)
		{
			await Action.InvokeAsync(action);
		}

	}

	private async Task ShowServices(List<DTOService> services)
	{
			var dialogParameters = new DialogParameters
			{
				{ "Services", services}
			};

			var options = new DialogOptions
				{
					CloseOnEscapeKey = true,
					Position = DialogPosition.Center
				};

			var result = await DialogService.Show<ModalServicesHistorical>("Servizi", dialogParameters, options).Result;
	}
}


<style>
	.tableClass {
		border: 1px solid lightgray !important;
		border-radius: 25px !important;
	}

	.toolbarCss {
		background: linear-gradient(45deg, #006, transparent);
		border-radius: 25px 25px 0px 0px;
		color: white;
		padding-inline: 2vw;
	}

	.toolItem {
		padding-inline: 2vw;
	}

	.mud-table-root .mud-table-head {
		display: table-header-group;
		background-color: #0066FF;
	}

		.mud-table-root .mud-table-head .mud-table-cell {
			color: white !important;
			font-weight: 500;
			line-height: 1.5rem;
		}

	.paginatorPageSize {
		width: 15%;
		padding-inline: 2vw;
	}

	.mud-table-container {
		max-height: 75vh;
		height: 75vh;
	}


	.mud-toolbar-gutters {
		padding-left: 0px !important;
		padding-right: 0px !important;
	}


	.mud-input-control-input-container {
		background-color: white !important;
		border-radius: 15px !important;
	}

	.btn-new-small {
		height: 75%;
		margin-top: 3px !important;
	}


	@@media (max-width: 960px) {
		.mud-sm-table .mud-table-cell {
			justify-content: unset !important;
			padding: 0px 16px !important;
		}
	}

</style>