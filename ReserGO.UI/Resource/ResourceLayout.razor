@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.DTO
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource.InsertResource
@using ReserGO.Miscellaneous.Extensions;
@using static ReserGO.Miscellaneous.Model.DTOResourceStepper
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Resource;
@using ReserGO.ViewModel.Interface.Resource.InsertResource;
@using ReserGO.UI.Resource.InsertResource
@inherits BaseComponentChild<IResourceViewModel, DTOResource>

@if (CurrentViewModel.UserIs(RoleConst.ADMIN))
{
    <div class="d-flex flex-column w-100 justify-content-center align-items-center historicalContainer">
        <ResourceTable Resources="CurrentViewModel.Resources" PagingOptions="@CurrentViewModel.Pagination" Action="@(async (GridAction<DTOResource, DTOResourceFilter> action) => await CurrentViewModel.ExecuteAction(action))" IsLoading="@CurrentViewModel.IsLoading" IsSmallView="CurrentViewModel.IsSmallView" />
    </div>

    <BaseComponent TViewModel="IInsertResourceViewModel" TModel="DTOResource">
	<Content>
		<InsertResourceModal IsSmallView="CurrentViewModel.IsSmallView"/>
	</Content>
</BaseComponent>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
        await CurrentViewModel.GetResourceByCompanyFiltered();
    }
}
