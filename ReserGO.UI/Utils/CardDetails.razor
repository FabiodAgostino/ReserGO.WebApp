@using MudBlazor
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t

@if (IsSmallView)
{
    <div class="d-flex flex-column w-100 shadow cardDetails" style="@Style" @onclick="@(()=> Click())">
        <div class="d-flex p-1 justify-content-center align-items-center cardDetailsHeaderSmall">
            <span class="textDetails" title="@Title"><b>@(t.TruncateText(Title, 20))</b></span>
        </div>
        @{
            var s = (MarkupString)Description;
        }
        <div class="d-flex p-4 cardBodyDetails">
            @s
        </div>
    </div>
}
else
{
    <div class="d-flex flex-column w-100 shadow cardDetails" style="@Style" @onclick="@(()=> Click())">
        <div class="d-flex align-items-center cardDetailsHeader">
            <span class="textDetails" title="@Title"><b>@(t.TruncateText(Title, 30))</b></span>
        </div>
        <div class="d-flex p-4 cardBodyDetails">
                @{
                var s = (MarkupString)Description;
                }
            <div class="d-flex cardBodyDetails">
                @s
            </div>
        </div>
    </div>
}

<ModalSmallDetails ShowModal="@ShowModal" Title="@Title" Description="@CompleteDescription" />

@code {

    [Parameter]
    public EventCallback Callback { get; set; }

    [Parameter]
    public string Title { get; set; } = "Titolo";

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string CompleteDescription { get; set; }

    [Parameter]
    public string Icon { get; set; } = "";

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Height { get; set; } = "100%";

    [Parameter]
    public bool IsSmallView { get; set; }

    private string Style = "";

    private bool ShowModal;

    protected override void OnInitialized()
    {
        CompleteDescription = t.TruncateText(CompleteDescription, 300);
        CompleteDescription = CompleteDescription.Replace("°", "<br/>");
    }

    private async Task Click()
    {

        if (IsSmallView)
        {
            ShowModal = true;
        }

        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync();
        }
    }

    public static string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength - 3) + "...";
    }
}
