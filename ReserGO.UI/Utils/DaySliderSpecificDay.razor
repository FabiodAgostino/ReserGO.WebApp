@using Microsoft.JSInterop
@using MudBlazor
@using ReserGO.DTO
@using ReserGO.DTO.Extensions
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Service.ComponentService
@using ReserGO.Utils.DTO.ExtensionMethod
@using ReserGO.Utils.UI
@using ReserGO.UI.Utils;
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.ViewModel.FiltersComponent
@using ReserGO.Service.Interface.Service
@inject ITranslateService t
@inject IJSRuntime JSRuntime
@inherits DaySliderService


<div class="d-flex flex-column containerDayOfWeek h-100 @(IsSmallView ? "w-100":"")">
    @if (IsSmallView)
    {
        <div class="d-flex w-100">
            <span class="p-2" >UnavailableTimeDateSlot</span>
        </div>

            <div class="d-flex flex-column align-items-center justify-content-around w-100" style="height:57vh; overflow:auto;">

            <div class="d-flex flex-column w-100 h-100">
                <div class="d-flex flex-row align-items-center justify-content-center w-100 pb-3" >
                    <span class="p-2" >Aggiungi regola oraria</span>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => AddRule()" />
                </div>
                <div class="d-flex w-100" >
                    <MudDatePicker PickerVariant="PickerVariant.Static" Class="w-100 shadow"
                                   MinDate="DateTime.Now">
                        <PickerActions>
                            @if (_switchDate)
                            {
                                <div>
                                    <span>Scorri regole orarie</span>
                                    <div>
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(false)" />
                                        <span>@timeSlot.SpecificDate</span>
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(true)" />
                                    </div>
                                </div>
                            }
                        </PickerActions>
                    </MudDatePicker>
                </div>

                        <div class="d-flex flex-column align-items-center w-100" style="height:80%;padding-top: 8vh;">
                        <div class="d-flex flex-row align-items-center  justify-content-center h-50" style="width:90%;" >
                            <div id="slider" class="w-100"></div>
                        </div>
                    <div class="d-flex flex-column w-100 justify-content-around pt-5">
                        <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
                            <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                                <MudButton Variant="Variant.Filled" Color="Color.Info" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="RemoveStep" Disabled="HandleValues.Count <= 2" StartIcon="@Icons.Material.Filled.TimerOff">@(t.Words["Rimuovi range"])</MudButton>
                            </div>
                            <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="AddStep" Disabled="DisableAdd()" StartIcon="@Icons.Material.Filled.MoreTime">@(t.Words["Aggiungi range"])</MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
    }
    else
    {
        <div class="d-flex flex-column justify-content-center w-100 h-100">
                <span>UnavailableTimeDateSlot</span>
            <div class="d-flex justify-content-end">
                @if (!_addRuleMode)
                {

                        <p>Aggiungi regola oraria</p>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => AddRule()" />

                }
            </div>
            <div class="d-flex justify-content-center">
                <MudDatePicker PickerVariant="PickerVariant.Static" Class="w-100 shadow justify-content-center"
                               MinDate="DateTime.Now" @bind-Date="newDate" IsDateDisabledFunc="@DisabledWhen()" >
                    <PickerActions>
                        @if (_switchDate && !_addRuleMode)
                        {
                            <div class="d-flex justify-content-center w-100 mt-3 mb-10">
                                <div class="d-flex justify-content-center flex-column">
                                    <p>Scorri regole orarie</p>
                                    <div class="">
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(false)" />
                                        <span>@timeSlot.SpecificDate.ToString("dd/MM/yyyy")</span>
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(true)" />
                                        <MudButton Icon="@Icons.Material.Filled.AutoDelete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Medium" @onclick="() => DeleteRule()" >Elimina regola </MudButton>
                                    </div>
                                </div>
                            </div>
                        }
                    </PickerActions>
                </MudDatePicker>
            </div>
        </div>
        <div class="d-flex flex-column w-100 justify-content-around p-2" style="visibility: @(_addRuleMode || NewAvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0 ? "visible" : "hidden")">
            <div class="d-flex flex-column w-100" style="height:80%">
                <div class="d-flex flex-row align-items-center justify-content-center w-100 h-50">
                    <div id="slider" class="w-100"></div>
                </div>
                <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
                    <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Info" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="RemoveStep" Disabled="HandleValues.Count <= 2" StartIcon="@Icons.Material.Filled.TimerOff">@(t.Words["Rimuovi range"])</MudButton>
                    </div>
                    <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="AddStep" Disabled="DisableAdd()" StartIcon="@Icons.Material.Filled.MoreTime">@(t.Words["Aggiungi range"])</MudButton>
                    </div>
                </div>
            </div>
        </div>
    }
   
</div>
@if (_addRuleMode)
    {
        <div class="d-flex justify-content-around p-4 w-100">
            <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="() => AdvHasChanged(false)">@(t.Words["Cancella"])</MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="() => AddNewRule()">@(t.Words["Aggiungi"])</MudButton>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-around p-4 w-100">
            <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="() => AdvHasChanged(false)">@(t.Words["Chiudi"])</MudButton>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="() => AdvHasChanged(true)" Disabled="!EnableButtonUpdate()">@(t.Words["Modifica"])</MudButton>
        </div>
    }


@code {

    [Parameter]
    public DTOAvailabilityAdv AvailabilityAdv { get; set; }
    [Parameter]
    public EventCallback<(DTOAvailabilityAdv, bool)> OnChange { get; set; }


    private bool _addRuleMode = false;
    private bool _switchDate
    {
        get
        {
            if (NewAvailabilityAdv.UnavailableTimeDatesSlot != null && NewAvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
                return true;
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SetJsRuntime(JSRuntime);
        NewAvailabilityAdv = new() { UnavailableTimeDatesSlot = new() };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AvailabilityAdv.UnavailableTimeDatesSlot != null && AvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
        {
            //per la scelta dei giorni
            NewAvailabilityAdv.UnavailableTimeDatesSlot = AvailabilityAdv.UnavailableTimeDatesSlot.OrderBy(x => x.SpecificDate).Select(x => (DTOUnavailableTimeDateSlot)x.Clone()).ToList();

            NewAvailabilityAdv.UnavailableTimeDatesSlot.ForEach(specific =>
            {
                specific.TimeSlots = DTOResourceExtension.ConvertUnavailabilityToAvailability(specific.TimeSlots);
            });

            timeSlot = NewAvailabilityAdv.UnavailableTimeDatesSlot.FirstOrDefault();
            newDate = timeSlot.SpecificDate;
            SelectedTimeSlot = timeSlot.TimeSlots;
        }
    }

    private async Task AdvHasChanged(bool value)
    {

        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync((NewAvailabilityAdv, value));
        }
    }
    private bool DisableAddButton() => NewAvailabilityAdv.UnavailableTimeDatesSlot.Any(x => x.SpecificDate == newDate.Value);

    private void SelectRule(bool forward)
    {
        var ts = NewAvailabilityAdv.UnavailableTimeDatesSlot.OrderBy(x=> x.SpecificDate).SingleOrDefault(x => x.SpecificDate == timeSlot.SpecificDate);
        int idx = NewAvailabilityAdv.UnavailableTimeDatesSlot.IndexOf(ts);
        if (idx != -1)
        {
            try
            {
                idx = forward ? idx + 1 : idx - 1;
                timeSlot = NewAvailabilityAdv.UnavailableTimeDatesSlot.ToList()[idx];
                newDate = timeSlot.SpecificDate;
                SelectedTimeSlot = timeSlot.TimeSlots;
                UpdateSlider();
            }
            catch (Exception)
            {

            }
        }
    }

    private void AddRule()
    {
        _addRuleMode = true;
        if (DisableAddButton())
            SetNextAvailableDate();

        if (!newDate.HasValue)
            newDate = DateTime.Now.AddDays(1).Date;
    }

    private void AddNewRule()
    {
        timeSlot = new(newDate.Value, ConvertDoublesToTimeSlot(), "");
        NewAvailabilityAdv.UnavailableTimeDatesSlot.Add((DTOUnavailableTimeDateSlot)timeSlot.Clone());
        _addRuleMode = false;
    }

    private void DeleteRule()
    {
        var ts = NewAvailabilityAdv.UnavailableTimeDatesSlot
            .OrderBy(x => x.SpecificDate)
            .SingleOrDefault(x => x.SpecificDate == timeSlot.SpecificDate);

        if (ts != null)
        {
            int idx = NewAvailabilityAdv.UnavailableTimeDatesSlot.IndexOf(ts);

            NewAvailabilityAdv.UnavailableTimeDatesSlot = NewAvailabilityAdv
                .UnavailableTimeDatesSlot
                .Where(x => x.SpecificDate != timeSlot.SpecificDate)
                .ToList();

            // Cerca il nuovo timeSlot in base all'indice
            timeSlot = GetTimeSlotByIndex(idx - 1) ?? GetTimeSlotByIndex(0) ?? new();

            if (timeSlot.SpecificDate != new DateTime())
                newDate = timeSlot.SpecificDate;
            else
                newDate = DateTime.Now.Date;
        }
    }

    private DTOUnavailableTimeDateSlot? GetTimeSlotByIndex(int index)
    {
        return (index >= 0 && index < NewAvailabilityAdv.UnavailableTimeDatesSlot.Count)
            ? NewAvailabilityAdv.UnavailableTimeDatesSlot[index]
            : null;
    }

    private void SetNextAvailableDate()
    {
        // Ottieni le date non disponibili in un HashSet per ricerche rapide
        var unavailableDates = NewAvailabilityAdv.UnavailableTimeDatesSlot
            .Select(sd => sd.SpecificDate.Date)
            .ToHashSet();

        // Inizia dal giorno successivo al giorno selezionato
        DateTime nextDate = newDate.Value.AddDays(1);

        // Trova il primo giorno disponibile
        while (unavailableDates.Contains(nextDate))
        {
            nextDate = nextDate.AddDays(1); // Incrementa il giorno
        }

        newDate = nextDate;
    }

    private Func<DateTime, bool> DisabledWhen()
    {
        // Prepara l'elenco delle date disabilitate
        var unavailableDates = NewAvailabilityAdv.UnavailableTimeDatesSlot
            .Select(sd => sd.SpecificDate.Date) // Accedi alla proprietà SpecificDate
            .ToHashSet(); // Migliora la ricerca

        // Ritorna la funzione
        return date => _addRuleMode
            ? unavailableDates.Contains(date.Date) // Modalità aggiunta: disabilita se la data è già nell'elenco
            : !unavailableDates.Contains(date.Date); // Modalità normale: abilita solo se non è nell'elenco
    }



    private bool EnableButtonUpdate()
    {
        if (AvailabilityAdv.UnavailableTimeDatesSlot == null && NewAvailabilityAdv.UnavailableTimeDatesSlot.Count() == 0)
            return false;

        if (AvailabilityAdv.UnavailableTimeDatesSlot == null && NewAvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
            return true;

        int NAA = NewAvailabilityAdv.UnavailableTimeDatesSlot.Count();
        int AA = AvailabilityAdv.UnavailableTimeDatesSlot.Count();
        //Se il count della lista nuova è maggiore o minore di quella passata come parametro vuol dire che sono state aggiunte o sottratte regole
        if (NAA != AA)
            return true;

        //se il count è uguale andiamo a vedere se ci sono state modifiche all'interno delle regole
        if (NAA == AA && AA != 0)
        {
            foreach (var x in NewAvailabilityAdv.UnavailableTimeDatesSlot)
            {
                // Cerca la corrispondenza nella lista originale
                var ts = AvailabilityAdv.UnavailableTimeDatesSlot
                    .FirstOrDefault(tsx => x.SpecificDate == tsx.SpecificDate);

                // Se non esiste una regola corrispondente
                if (ts == null)
                {
                    return true; // Modifica rilevata
                }

                // Confronta il numero di TimeSlots
                if (x.TimeSlots.Count != ts.TimeSlots.Count)
                {
                    return true; // Modifica rilevata
                }

                // Confronta ogni TimeSlot
                for (int i = 0; i < x.TimeSlots.Count; i++)
                {
                    if (x.TimeSlots[i].StartTime != ts.TimeSlots[i].StartTime ||
                        x.TimeSlots[i].EndTime != ts.TimeSlots[i].EndTime)
                    {
                        return true; // Modifica rilevata
                    }
                }
            }
        }
        return false;

    }


}
<style>
    .days-container {
        display: flex;
        gap: 10px;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .day-circle {
        width: 4vw;
        height: 7vh;
        background-color: whitesmoke !important;
        border: 1px solid lightgrey !important;
    }

    .day-circle-small {
        width: 30vw;
        height: 7vh;
        background-color: whitesmoke !important;
        border: 1px solid lightgrey !important;
    }

        .day-circle-small:hover {
            background-color: #bdbdbd;
        }

    .day-circle:hover {
        background-color: #bdbdbd;
    }

    .selected {
        background-color: #0066FF !important;
        color: white !important;
    }

    .mud-picker-container.mud-paper-square.mud-picker-container-landscape {
        display: flex;
        justify-content: center;
    }

     .mud-picker-static {
        display: flex;
        overflow: hidden;
        flex-direction: column;
        border: 1px solid lightgrey;
        border-radius: 30px;
    }

    .mud-picker-static {
        display: flex;
        overflow: hidden;
        min-width: 291px !important;
        flex-direction: column;
        background-color: white;
    }

    .mud-picker-toolbar.mud-picker-toolbar-landscape {
        background: linear-gradient(45deg, #006, transparent);
    }

    button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon.mud-picker-calendar-day.mud-day.mud-selected.mud-theme-primary {
        background: linear-gradient(45deg, #006, transparent);
    }

    button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon.mud-picker-calendar-day.mud-day.mud-current.mud-button-outlined.mud-button-outlined-primary.mud-primary-text {
        border-color: #0066FF !important;
    }

    h5.mud-typography.mud-typography-h5.mud-picker-month-selected.mud-primary-text {
        color: #0066FF !important;
    }

    h5.mud-typography.mud-typography-h5.mud-picker-year-selected.mud-primary-text {
        color: #0066FF !important;
    }


</style>