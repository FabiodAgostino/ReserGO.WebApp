@using Microsoft.JSInterop
@using MudBlazor
@using ReserGO.DTO
@using ReserGO.DTO.Extensions
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Model
@using ReserGO.Service.ComponentService
@using ReserGO.Utils.DTO.ExtensionMethod
@using ReserGO.Utils.UI
@using ReserGO.UI.Utils;
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.ViewModel.FiltersComponent
@using ReserGO.Service.Interface.Service
@inject ITranslateService t
@inject IJSRuntime JSRuntime
@inherits DaySliderService


<div class="containerDayOfWeek h-100 @(IsSmallView ? "w-100":"")">
    @if (IsSmallView)
    {
        <div class="d-flex flex-column align-items-center justify-content-around w-100 p-2" style="height:34vh; overflow:auto;">

            <div class="d-flex flex-wrap justify-content-center w-100 h-100">
                <div>
                    <p>Aggiungi regola oraria</p>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
                </div>
                <MudDatePicker Orientation="Orientation.Landscape" PickerVariant="PickerVariant.Static" Class="w-100 shadow"
                               MinDate="DateTime.Now">
                    <PickerActions>
                        @if (_switchDate)
                        {
                            <div>
                                <p>Scorri regole orarie</p>
                                <div>
                                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(false)" />
                                    <span>@timeSlot.SpecificDate</span>
                                    <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(true)" />
                                </div>
                            </div>
                        }
                    </PickerActions>
                </MudDatePicker>
            </div>
            <div class="d-flex flex-column w-100" style="height:80%">
                <div class="d-flex flex-row align-items-center justify-content-center w-100 h-50">
                    <div id="slider" class="w-100"></div>
                </div>
                <div class="d-flex flex-column w-100 justify-content-around p-2">
                    <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
                        <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="RemoveStep" Disabled="HandleValues.Count <= 2" StartIcon="@Icons.Material.Filled.TimerOff">@(t.Words["Rimuovi range"])</MudButton>
                        </div>
                        <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="AddStep" Disabled="DisableAdd()" StartIcon="@Icons.Material.Filled.MoreTime">@(t.Words["Aggiungi range"])</MudButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex flex-column justify-content-center w-100 h-100">
            <div class="d-flex justify-content-end">
                <p>Aggiungi regola oraria</p>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
            </div>
            <div class="d-flex justify-content-center">
                <MudDatePicker Orientation="Orientation.Landscape" PickerVariant="PickerVariant.Static" Class="w-100 shadow justify-content-center"
                               MinDate="DateTime.Now">
                    <PickerActions>
                        @if(_switchDate)
                        {
                            <div class="d-flex justify-content-center w-100 mt-3 mb-10">
                                <div class="d-flex justify-content-center flex-column">
                                    <p>Scorri regole orarie</p>
                                    <div class="">
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(false)" />
                                        <span>@timeSlot.SpecificDate</span>
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" @onclick="() => SelectRule(true)" />
                                    </div>
                                </div>
                            </div>
                        }
                    </PickerActions>
                </MudDatePicker>
            </div>
        </div>
        <div class="d-flex flex-column w-100 justify-content-around p-2">
            <div class="d-flex flex-column w-100" style="height:80%">
                <div class="d-flex flex-row align-items-center justify-content-center w-100 h-50">
                    <div id="slider" class="w-100"></div>
                </div>
                <div class="d-flex flex-row w-100 h-50 justify-content-around align-items-center">
                    <div class="d-flex w-100 p-2 align-items-center justify-content-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Info" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="RemoveStep" Disabled="HandleValues.Count <= 2" StartIcon="@Icons.Material.Filled.TimerOff">@(t.Words["Rimuovi range"])</MudButton>
                    </div>
                    <div class="d-flex w-100 p-2 align-items-center justify-content-center ">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="@(IsSmallView ? "width:35vw;height:7vh":"width:10vw;height:5vh")" @onclick="AddStep" Disabled="DisableAdd()" StartIcon="@Icons.Material.Filled.MoreTime">@(t.Words["Aggiungi range"])</MudButton>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="d-flex justify-content-around p-4 w-100">
        <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="() => AdvHasChanged(false)">@(t.Words["Chiudi"])</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="() => AdvHasChanged(true)" Disabled="_error">@(t.Words["Modifica"])</MudButton>
    </div>
</div>



@code {

    [Parameter]
    public DTOAvailabilityAdv AvailabilityAdv { get; set; }
    [Parameter]
    public EventCallback<(DTOAvailabilityAdv, bool)> OnChange { get; set; }

    private DTOAvailabilityAdv NewAvailabilityAdv { get; set; }

    private DTOUnavailableTimeDateSlot? _timeSlot { get; set; }
    private DTOUnavailableTimeDateSlot? timeSlot
    {
        get
        {
            if (_timeSlot == null)
                _timeSlot = new() { SpecificDate = DateTime.Now, TimeSlots = new() };

            return _timeSlot;
        }
        set
        {
            _timeSlot = value;
        }
    }
    private bool _error = true;

    private bool _switchDate
    {
        get
        {
            if (NewAvailabilityAdv.UnavailableTimeDatesSlot != null && NewAvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
                return true;
            return false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SetJsRuntime(JSRuntime);
        NewAvailabilityAdv = new() { UnavailableTimeDatesSlot = new() };

    }

    protected override async Task OnParametersSetAsync()
    {
        if (AvailabilityAdv.UnavailableTimeDatesSlot != null && AvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
        {
            //per la scelta dei giorni
            NewAvailabilityAdv.UnavailableTimeDatesSlot = AvailabilityAdv.UnavailableTimeDatesSlot.OrderByDescending(x => x.SpecificDate).Select(x => (DTOUnavailableTimeDateSlot)x.Clone()).ToList();

            NewAvailabilityAdv.UnavailableTimeDatesSlot.ForEach(specific =>
            {
                specific.TimeSlots = DTOResourceExtension.ConvertUnavailabilityToAvailability(specific.TimeSlots);
            });

            timeSlot = NewAvailabilityAdv.UnavailableTimeDatesSlot.FirstOrDefault();
        }
    }

    private async Task AdvHasChanged(bool value)
    {

        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync((NewAvailabilityAdv, value));
        }
    }

    private void SelectRule(bool forward)
    {
        int idx = NewAvailabilityAdv.UnavailableTimeDatesSlot.IndexOf(timeSlot);
        if (idx != -1)
        {
            try
            {
                idx = forward ? idx++ : idx--;
                timeSlot = NewAvailabilityAdv.UnavailableTimeDatesSlot.ToList()[idx];
            }
            catch (Exception)
            {

            }
        }
    }

}
<style>
    .days-container {
        display: flex;
        gap: 10px;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .day-circle {
        width: 4vw;
        height: 7vh;
        background-color: whitesmoke !important;
        border: 1px solid lightgrey !important;
    }

    .day-circle-small {
        width: 30vw;
        height: 7vh;
        background-color: whitesmoke !important;
        border: 1px solid lightgrey !important;
    }

        .day-circle-small:hover {
            background-color: #bdbdbd;
        }

    .day-circle:hover {
        background-color: #bdbdbd;
    }

    .selected {
        background-color: #0066FF !important;
        color: white !important;
    }

    .mud-picker-container.mud-paper-square.mud-picker-container-landscape {
        display: flex;
        justify-content: center;
    }

</style>