@using MudBlazor
@using ReserGO.DTO
@using System.Globalization;
@using ReserGO.Utils.DTO.ExtensionMethod;
@using ReserGO.Utils.DTO.Utils
@using ReserGO.DTO.Extensions;
@using ReserGO.Service.Interface.Utils;
@inject IImageService image
<div class="d-flex flex-column shadow cardScheduleDetails" @onclick="@(()=> Click())" style="@CardStyle">
    
    <div class="d-flex justify-content-center align-items-center cardScheduleDetailsHeader" style="background-color:#0066FF;" >
        @if (Icon.Length > 1)
        {
            <MudIcon Icon="@Icon" Class="iconCardscheduleDetailsCss" />
        }

        @if (!String.IsNullOrEmpty(Title) || Resource != null)
        {
            <span class="text" style="padding-inline:1vw;">@(Resource != null ? Resource.ResourceName : Title)</span>
        }
    </div>
    
    <div class="d-flex flex-column p-3 cardScheduleDetailsBody h-100" style="@BodyStyle">


        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressScheduleDetail" />
                </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-row w-100 p-3" style="height:52%;">
                <div class="d-flex flex-column w-50 p-3">
                    <span class="descriptionDetails">Descrizione</span>
                    <div class="dividerDetailsSchedule" style="width:82%"></div>
                    @if (String.IsNullOrEmpty(Description) && Resource != null && !IsLoading)
                    {
                        <p class="bodyDescription">@Resource.Description</p>
                    }
                    else
                    {
                        <div><span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( Nessun dato )</i></span></div>
                    }
                </div>
                <div class="d-flex flex-column w-50 h-100 p-3">
                    <span class="descriptionDetails">Servizi</span>
                    <div class="dividerDetailsSchedule" style="width:82%"></div>
                    <div class="d-flex flex-column" style="overflow:auto; max-height:19vh; padding-top:2vh;" >
                        @if (Resource.Services != null && Resource != null && !IsLoading)
                        {
                            @foreach (var service in Resource.Services)
                            {  
                                <span class="serviceDescription">@service.ServiceName</span>
                            }
                        }
                        else
                        {
                            <div><span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( Nessun dato )</i></span></div>
                        }
                    </div>
                </div>
            </div>


            <div class="d-flex flex-row w-100 p-3" style="height:52%;">
                

                <div class="d-flex flex-column w-50 h-100" >
                    <div><span class="descriptionDetails">Orari di disponibilità</span></div>
                    <div class="dividerDetailsSchedule" style="width:82%"></div>
                    <div class="d-felx flex-row w-100 h-100 bodyDescription" style="overflow:auto;">
                        @if (Resource.AvailabilityAdv.UnavailableRecurringTimeDays.Count() > 0)
                        {
                            @foreach (var giorniConRegole in Resource.AvailabilityAdv.UnavailableRecurringTimeDays)
                            {   
                                <div>
                                    <span><b>@giorniConRegole.DayOfTheWeek: </b>@giorniConRegole.RangeAvailability</span><br/>
                                </div>
                            }
                        }
                        else
                        {
                            <div><span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( Nessun dato )</i></span></div>
                        }

                    </div>  
                </div>

                <div class="d-flex flex-column w-50 h-100">
                    <div><span class="descriptionDetails">Giorni chiusura</span></div>
                    <div class="dividerDetailsSchedule" style="width:80%"></div>
                    <div class="d-felx flex-row w-100 h-100 bodyDescription">
                        @if (Resource.AvailabilityAdv.UnavailableSpecificDays.Data.Count() > 0)
                        {
                            @foreach (var giorniChiusura in Resource.AvailabilityAdv.UnavailableSpecificDays.Data)
                            {
                                <div>
                                    <span><b>@giorniChiusura.ToString("dd/MM/yyyy")</b></span><br />
                                </div>
                            }
                        }

                        @if (Resource.AvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
                        {
                            <div class="pt-1">
                                <span style="font-size:medium;"> <i>( chiusura straordinara )</i></span>
                            </div>
                            @foreach (var giorniSpecificiConRegole in Resource.AvailabilityAdv.UnavailableTimeDatesSlot)
                            {
                                <div>
                                    <span><b>@giorniSpecificiConRegole.SpecificDate.ToString("dd/MM/yyyy"): </b>@giorniSpecificiConRegole.RangeAvailability</span><br />
                                </div>
                            }
                        }

                        else if (Resource.AvailabilityAdv.UnavailableSpecificDays.Data.Count() == 0 || Resource.AvailabilityAdv.UnavailableSpecificDays.Data == null)
                        {
                            <div><span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( Nessun dato )</i></span></div>
                        }
                    </div>
                </div>

            </div>

            
        }
       
        @if ((!String.IsNullOrEmpty(Description) || Resource != null) && !IsLoading)
        {
            <div class="mb-3 d-flex justify-content-center align-items-end" style="height:13%;">
                <MudButton OnClick="@(async () => await ClickOpenModal(Resource.Id.Value))" class="confirmScheduleDetailsButton btn-primary" style="width:15vw;" type="submit">Seleziona</MudButton>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback Callback { get; set; }

    [Parameter]
    public EventCallback<int> CallbackOpenModal { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string Icon { get; set; } = "";

    [Parameter]
    public string? CardStyle { get; set; } = "";

    [Parameter]
    public string? BodyStyle { get; set; } = "";

    [Parameter]
    public DTOResource? Resource { get; set; }

    [Parameter]
    public bool IsLoading { get; set; } = false;


    protected override async Task OnParametersSetAsync()
    {
    }

    private async Task Click()
    {
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync();
        }
    }

    private async Task ClickOpenModal(int idResource)
    {
        if (CallbackOpenModal.HasDelegate)
        {
            await CallbackOpenModal.InvokeAsync(idResource);
        }
    }

}

<style>
    .iconCardscheduleDetailsCss {
        color: white;
        font-size: 2.5vw !important;
    }

    .mudProgressScheduleDetail {
        height: 150px !important;
        width: 150px !important;
    }

    .mud-progress-circular.mud-progress-medium {
        height: 150px !important;
        width: 150px !important;
    }
</style>
