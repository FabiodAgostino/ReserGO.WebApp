@using MudBlazor
@using ReserGO.DTO
@using System.Globalization;
@using ReserGO.Utils.DTO.ExtensionMethod;
@using ReserGO.Utils.DTO.Utils



<div class="d-flex flex-column shadow cardScheduleDetails" @onclick="@(()=> Click())" style="@CardStyle">
    <div class="d-flex justify-content-center align-items-center cardScheduleDetailsHeader">
        @if (Icon.Length > 1)
        {
            <MudIcon Icon="@Icon" Class="iconCardscheduleDetailsCss" />
        }

        @if (!String.IsNullOrEmpty(Title) || Resource != null)
        {
            <span class="text" style="padding-inline:1vw;">@(Resource != null ? Resource.ResourceName : Title)</span>
        }
    </div>
    <div class="d-flex flex-column align-items-center cardScheduleDetailsBody h-100" style="@BodyStyle">

            @if (!String.IsNullOrEmpty(Description) && Resource == null && !IsLoading)
            {
                @Description
            }
            @if (String.IsNullOrEmpty(Description) && Resource != null && !IsLoading)
            {

                <div>
                    @Resource.Description
                </div>
                @if (Resource.RequestToConfirm)
                {
                    <div>
                        Riceverai una mail per la conferma della prenotazione
                    </div>
                }
                @if (Resource.Price.HasValue)
                {
                    <div>
                        Costo del servizio: @($"{Resource.Price.Value.ToString()}€")
                    </div>
                }
            @if (Resource.AvailabilityAdv.UnavailableByDaysOfTheWeek.Data.Count() > 0)
            {
                <div>Servizio non disponibile nei giorni:</div>
                @foreach (var giorniNonDisponibili in Resource.AvailabilityAdv.UnavailableByDaysOfTheWeek.Data)
                {
                    <div>@giorniNonDisponibili</div>
                }
            }

            @if (Resource.AvailabilityAdv.UnavailableRecurringTimeDays.Count() > 0)
            {
                <div>Orari di disponibilità:</div>
                @foreach (var giorniConRegole in Resource.AvailabilityAdv.UnavailableRecurringTimeDays)
                {
                    <div>@giorniConRegole.DayOfTheWeek @giorniConRegole.RangeAvailability</div>
                }
            }

            @if (Resource.AvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
            {
                <div>Orari straordinari:</div>
                @foreach (var giorniSpecificiConRegole in Resource.AvailabilityAdv.UnavailableTimeDatesSlot)
                {
                    <div>@giorniSpecificiConRegole.SpecificDate @giorniSpecificiConRegole.RangeAvailability</div>
                }
            }

            @if (Resource.AvailabilityAdv.UnavailableSpecificDays.Data.Count() > 0)
            {
                <div>Giorni di chiusura:</div>
                @foreach (var giorniChiusura in Resource.AvailabilityAdv.UnavailableSpecificDays.Data)
                {
                    <div>@giorniChiusura</div>
                }
            }
        }
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressScheduleDetail" />
                </div>
            </div>
        }
        @if ((!String.IsNullOrEmpty(Description) || Resource != null) && !IsLoading)
        {
            <div class="mb-3 d-flex justify-content-center align-items-end h-100">
                <MudButton OnClick="@(async () => await ClickOpenModal(Resource.Id.Value))" class="confirmScheduleDetailsButton btn-primary" style="width:15vw;" type="submit">Seleziona</MudButton>
            </div>
        }
    </div>
</div>

@code {

    [Parameter]
    public EventCallback Callback { get; set; }

    [Parameter]
    public EventCallback<int> CallbackOpenModal { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Description { get; set; }

    [Parameter]
    public string Icon { get; set; } = "";

    [Parameter]
    public string? CardStyle { get; set; } = "";

    [Parameter]
    public string? BodyStyle { get; set; } = "";

    [Parameter]
    public DTOResource? Resource { get; set; }

    [Parameter]
    public bool IsLoading { get; set; } = false;


    protected override async Task OnParametersSetAsync()
    {
    }

    private async Task Click()
    {
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync();
        }
    }

    private async Task ClickOpenModal(int idResource)
    {
        if (CallbackOpenModal.HasDelegate)
        {
            await CallbackOpenModal.InvokeAsync(idResource);
        }
    }

}

<style>
    .iconCardscheduleDetailsCss {
        color: white;
        font-size: 2.5vw !important;
    }

    .mudProgressScheduleDetail {
        height: 150px !important;
        width: 150px !important;
    }

    .mud-progress-circular.mud-progress-medium {
        height: 150px !important;
        width: 150px !important;
    }
</style>
