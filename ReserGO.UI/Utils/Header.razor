@using MudBlazor
@using ReserGO.UI.Login
@using ReserGO.DTO
@using ReserGO.ViewModel.Interface.Authentication;
@using ReserGO.Utils.UI
@using ReserGO.Miscellaneous.Model;
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.Miscellaneous.Enum
@using ReserGO.Utils.DTO.Utils
@inject IDialogService DialogService
@inherits BaseComponentChild<IHeaderViewModel, object>
@inject NavigationManager NaviMngr;
<div class="d-flex flex-row align-items-center justify-content-between px-2 loginHeader" style="background-color:@(!_userIsGuest ? "#EEEEEE" : BackgroundColor)">

    @if (CurrentViewModel.IsSmallView)
    {
        <MudIcon 
            Icon="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? Icon : IconSmall)"
            Class="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? "smallIconCssGuest":"smallIconCss")"
            Style="@IconColor()" @onclick="ShowMenu" >
        </MudIcon>
        <div class="d-flex justify-content-center" style="width:100%;">
            <span class="titleLogin" style="@TitleColor()">@Title</span>
        </div>
        if (!_userIsGuest)
        {
            <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Filled.AccountCircle"
                     AriaLabel="Open user menu" Class="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? "iconUserButton" : "iconUserButtonLogin")">
                <MudMenuItem>Profilo</MudMenuItem>
                <MudMenuItem>Privacy</MudMenuItem>
                <MudMenuItem @onclick="@(async () => await CurrentViewModel.Logout())">Logout</MudMenuItem>
            </MudMenu>
        }
        else
        {
            <div @onclick="OpenDialogAsync">
                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="smallIconCssGuest"></MudIcon>
            </div>
        }
        
    }
    else
    {


        if (!_userIsGuest)
        {
            <div class="d-flex flex-row align-items-center;" style="cursor:pointer;" @onclick="GoBack">
                <MudIcon Icon="@Icon" Class="iconCss" Style="color:#0066FF;"></MudIcon>
                <span class="titleLogin" style="color:#0066FF;">@Title</span>
            </div>

            <div class="px-2">
                    <div class="d-flex flex-row align-items-center" >
                        <span class="rightTextHeader" style="color:#0066FF;">@CurrentViewModel.User.FirstName @CurrentViewModel.User.LastName</span>
                        <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Filled.AccountCircle"
                                 AriaLabel="Open user menu" Class="iconUserButtonLogin">
                            <MudMenuItem>Profilo</MudMenuItem>
                            <MudMenuItem>Privacy</MudMenuItem>
                            <MudMenuItem @onclick="@(async () => await CurrentViewModel.Logout())">Logout</MudMenuItem>
                        </MudMenu>
                    </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-row align-items-center;" style=" cursor:pointer;" @onclick="GoBack">
                <MudIcon Icon="@Icon" Class="iconCss" Style="@IconColor()"></MudIcon>
                <span class="titleLogin" style="@TitleColor()">@Title</span>
            </div>

            <div class="px-2">
                <span class="rightTextHeader" @onclick="OpenDialogAsync">@RightTitle</span>
            </div>
        }
        
    }

</div>

@code {

    private string Icon = Icons.Material.Filled.HealthAndSafety;
    private string IconSmall = Icons.Material.Filled.Menu;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string RightTitle { get; set; }

    [Parameter]
    public bool RightTitleEnabled { get; set; }

    [Parameter]
    public bool DraweEnabled { get; set; }

    [Parameter]
    public string BackgroundColor { get; set; }

    [Parameter]
    public string ColorFont { get; set; }

    private bool _userIsGuest { get; set; }

    [Parameter]
    public EventCallback GoToHome { get; set; }

    [Parameter]
    public EventCallback OpenMenu { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        _userIsGuest = CurrentViewModel.User.Roles is null || CurrentViewModel.UserIs(RoleConst.GUEST);
    }

    private string IconColor()
    {
        return "color:" + ColorFont+"; cursor:pointer;";
    }

    private string TitleColor(){
        return "color:" + ColorFont;
    }

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
        await CurrentViewModel.CheckUser();
        StateHasChanged();
    }

    private async Task OpenDialogAsync()
    {
        await CurrentViewModel.OpenModal();
    }

    private async Task GoBack()
    {
        if (GoToHome.HasDelegate)
            await GoToHome.InvokeAsync();
    }

    private async Task ShowMenu(){
        if (OpenMenu.HasDelegate)
            await OpenMenu.InvokeAsync();
    }

}

<style>

    .iconUserButton > button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon 
    {
        color:white!important;
    }

    .iconUserButtonLogin > button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon {
        color: #0066FF !important;
    }

    svg.mud-icon-root.mud-svg-icon.mud-icon-size-medium{
        font-size:2rem;
    }


    .iconCss {
        color: #FFFFFF;
        font-size: 4rem;
    }
    .smallIconCssGuest {
            color: #FFFFFF;
            font-size: 2rem;
        }

    .smallIconCss {
        color: #0066FF;
        font-size: 2rem;
    }

</style>

