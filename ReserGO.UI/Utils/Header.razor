@using MudBlazor
@using ReserGO.UI.Login
@using ReserGO.DTO
@using ReserGO.ViewModel.Interface.Authentication;
@using ReserGO.Utils.UI
@using ReserGO.Miscellaneous.Model;
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.Miscellaneous.Enum
@using ReserGO.Utils.DTO.Utils
@inject IDialogService DialogService
@inherits BaseComponentChild<IHeaderViewModel, object>
@inject NavigationManager NaviMngr;
<div class="d-flex flex-row align-items-center justify-content-between px-2 loginHeader" style="background-color:@(!UserIsGuest && !IsSmall ? "transparent" : BackgroundColor)">

    @if(IsSmall)
    {
        <MudIcon Icon="@Icon" Class="smallIconCss" Style="@IconColor()"></MudIcon>
        <div class="d-flex justify-content-center" style="width:100%;">
            <span class="titleLogin" style="@TitleColor()">@Title</span>
        </div>
        if (!UserIsGuest)
        {
            <MudMenu AnchorOrigin="Origin.BottomRight" Icon="@Icons.Material.Filled.AccountCircle"
                     AriaLabel="Open user menu"
                     Style="@IconColor()" >
                <MudMenuItem>Profilo</MudMenuItem>
                <MudMenuItem>Privacy</MudMenuItem>
                <MudMenuItem>Logout</MudMenuItem>
            </MudMenu>
        }
        else
        {
            <div @onclick="OpenDialogAsync">
                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="smallIconCss" Style="@IconColor()"></MudIcon>
            </div>
        }
        
    }
    else
    {


        if (!UserIsGuest)
        {
            <div class="d-flex flex-row align-items-center">
                <MudIcon Icon="@Icon" Class="iconCss" Style="color:#0066FF;"></MudIcon>
                <span class="titleLogin" style="color:#0066FF;">@Title</span>
            </div>

            <div class="px-2">
                    <div class="d-flex flex-row" @onclick="@(async () => await CurrentViewModel.Logout())">
                        <span class="rightTextHeader" style="color:#0066FF; padding-inline: 0.5vw">Logout</span>
                        <MudIcon Icon="@Icons.Material.Filled.Logout" style="color:#0066FF;" Class="iconCss"></MudIcon>
                    </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-row align-items-center">
                <MudIcon Icon="@Icon" Class="iconCss" Style="@IconColor()"></MudIcon>
                <span class="titleLogin" style="@TitleColor()">@Title</span>
            </div>

            <div class="px-2">
                <span class="rightTextHeader" @onclick="OpenDialogAsync">@RightTitle</span>
            </div>
        }
        
    }

</div>

@code {
    private string Icon = Icons.Material.Filled.HealthAndSafety;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string RightTitle { get; set; }

    [Parameter]
    public bool RightTitleEnabled { get; set; }

    [Parameter]
    public bool DraweEnabled { get; set; }

    [Parameter]
    public string BackgroundColor { get; set; }

    [Parameter]
    public string ColorFont { get; set; }

    [Parameter]
    public bool UserIsGuest { get; set; }

    private bool IsSmall = false;

    private string IconColor()
    {
        return "color:" + ColorFont;
    }

    private string TitleColor(){
        return "color:" + ColorFont;
    }

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.CheckUser();
        StateHasChanged();
    }

    private async Task OpenDialogAsync()
    {
        await CurrentViewModel.OpenModal();
    }

}

<style>
    button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon{
        color:white !important;
    }

    svg.mud-icon-root.mud-svg-icon.mud-icon-size-medium{
        font-size:2rem;
    }
</style>

