@using MudBlazor
@using ReserGO.Service.Interface.Service
@using ReserGO.UI.Login
@using ReserGO.DTO
@using ReserGO.ViewModel.Interface.Authentication;
@using ReserGO.Utils.UI
@using ReserGO.Miscellaneous.Model;
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.Miscellaneous.Enum
@using ReserGO.Utils.DTO.Utils
@inject IDialogService DialogService
@inject ITranslateService TranslateService
@inherits BaseComponentChild<IHeaderViewModel, object>
@inject NavigationManager NaviMngr;
<div class="d-flex flex-row align-items-center justify-content-between px-2 loginHeader" style="background-color:#0066FF;">

    @if (CurrentViewModel.IsSmallView)
    {
        <div @onclick="GoBack" style="cursor:pointer;">
            <MudIcon Icon="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? Icon : IconSmall)"
                     Class="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? "smallIconCssGuest":"smallIconCss")"
                     Style="color:white;" @onclick="ShowMenu">
            </MudIcon>
        </div>

        <div class="d-flex" style="width:100%;">
            <span class="@(CurrentViewModel.IsSmallView ? "titleLoginSmall":"titleLogin")" style="color:white;">@Title</span>
        </div>
        if (!_userIsGuest)
        {
            <MudMenu AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopCenter" ActivationEvent="@MouseEvent.MouseOver" Icon="@Icons.Material.Filled.AccountCircle"
                     AriaLabel="Open user menu" Class="iconUserButton">
                <MudMenuItem>Profilo</MudMenuItem>
                <MudMenuItem>Privacy</MudMenuItem>
                <MudMenuItem @onclick="@(async () => await CurrentViewModel.Logout())">Logout</MudMenuItem>
            </MudMenu>

            <MudMenu AriaLabel="Language" Class="iconUserButton" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopRight">
                <ActivatorContent>
                    <MudChip T="string" Class="chipLanguageSmall"><MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small"></MudIcon></MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("it"))">Italiano</MudMenuItem>
                    <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("en"))">English</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <div @onclick="OpenDialogAsync">
                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="smallIconCssGuest"></MudIcon>
            </div>
            <MudMenu AriaLabel="Language" Class="iconUserButton" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopRight">
                <ActivatorContent>
                    <MudChip T="string" Class="chipLanguageSmall"><MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small"></MudIcon></MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("it"))">Italiano</MudMenuItem>
                    <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("en"))">English</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }

    }
    else
    {


        if (!_userIsGuest)
        {
            <div class="d-flex flex-row align-items-center;" style="cursor:pointer;" @onclick="GoBack">
                <MudIcon Icon="@Icon" Class="iconCss" Style="color:white;margin-top: 0.5vh;"></MudIcon>
                <span class="@(CurrentViewModel.IsSmallView ? "titleLoginSmall":"titleLogin")" style="color:white">@Title</span>
            </div>

            <div class="px-2">
                <div class="d-flex flex-row align-items-center">
                    <span class="rightTextHeader" style="color:white;">@CurrentViewModel.User.FirstName @CurrentViewModel.User.LastName</span>
                    <MudMenu AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopCenter" ActivationEvent="@MouseEvent.MouseOver" Icon="@Icons.Material.Filled.AccountCircle"
                             AriaLabel="Open user menu" Class="iconUserButton">
                        <MudMenuItem>Profilo</MudMenuItem>
                        <MudMenuItem>Privacy</MudMenuItem>
                        <MudMenuItem @onclick="@(async () => await CurrentViewModel.Logout())">Logout</MudMenuItem>
                    </MudMenu>

                    <MudMenu AriaLabel="Language" Class="iconUserButton" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopCenter">
                        <ActivatorContent>
                            <MudChip T="string" Icon="@Icons.Material.Filled.Language" Class="chipLanguage">@CurrentViewModel.Lang</MudChip>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("it"))">Italiano</MudMenuItem>
                            <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("en"))">English</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-row align-items-center;" style=" cursor:pointer;" @onclick="GoBack">
                <MudIcon Icon="@Icon" Class="iconCss" Style="color:white;margin-top: 0.5vh;"></MudIcon>
                <span class="@(CurrentViewModel.IsSmallView ? "titleLoginSmall":"titleLogin")" style="color:white;">@Title</span>
            </div>

            <div class="px-2">
                <span class="rightTextHeader" @onclick="OpenDialogAsync">@RightTitle</span>
                <MudMenu AriaLabel="Language" Class="iconUserButton" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="@Origin.BottomCenter" TransformOrigin="@Origin.TopCenter">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Language" Class="chipLanguage">@CurrentViewModel.Lang</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("it"))">Italiano</MudMenuItem>
                        <MudMenuItem @onclick="@(async () => await CurrentViewModel.SetLanguage("en"))">English</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>

        }

    }

</div>

@code {

    private string Icon = Icons.Material.Filled.HealthAndSafety;
    private string IconSmall = Icons.Material.Filled.Menu;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string RightTitle { get; set; }

    [Parameter]
    public bool RightTitleEnabled { get; set; }

    [Parameter]
    public bool DraweEnabled { get; set; }

    [Parameter]
    public string BackgroundColor { get; set; }

    [Parameter]
    public string ColorFont { get; set; }

    private bool _userIsGuest { get; set; }

    [Parameter]
    public EventCallback GoToHome { get; set; }

    [Parameter]
    public EventCallback OpenMenu { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _userIsGuest = CurrentViewModel.User.Roles is null || CurrentViewModel.UserIs(RoleConst.GUEST);
    }

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
        await CurrentViewModel.CheckUser();
        CurrentViewModel.Lang = await TranslateService.GetCurrentLanguage();
        StateHasChanged();
    }

  

    private async Task OpenDialogAsync()
    {
        await CurrentViewModel.OpenModal();
    }

    private async Task GoBack()
    {
        if (GoToHome.HasDelegate)
            await GoToHome.InvokeAsync();
    }

    private async Task ShowMenu()
    {
        if (OpenMenu.HasDelegate)
            await OpenMenu.InvokeAsync();
    }

}

<style>

    .iconUserButton > button.mud-button-root.mud-icon-button.mud-ripple.mud-ripple-icon {
        color: white !important;
    }



    svg.mud-icon-root.mud-svg-icon.mud-icon-size-medium {
        font-size: 2rem;
    }


    .iconCss {
        color: #FFFFFF;
        font-size: 4rem;
    }

    .smallIconCssGuest {
        color: #FFFFFF;
        font-size: 2rem;
    }

    .smallIconCss {
        color: white;
        font-size: 2rem;
    }

    .mud-chip.mud-chip-filled.mud-chip-size-medium.mud-chip-color-default.chipLanguage {
        color: white;
        width: 100px;
    }

    .mud-chip.mud-chip-filled.mud-chip-size-medium.mud-chip-color-default.chipLanguageSmall {
        color: white;
        width: 50px;
    }
</style>

