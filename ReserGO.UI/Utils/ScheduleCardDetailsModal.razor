@using MudBlazor
@using ReserGO.DTO
@using System.Globalization;
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.DTO.ExtensionMethod;
@using ReserGO.Utils.DTO.Utils
@using ReserGO.DTO.Extensions;
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t
<MudDialog Options="@Options" Class="dialogClassSmall">
    <TitleContent>
        <div class="d-flex flex-row align-items-center w-100 h-100">
            <div class="d-flex justify-content-center align-items-center cardScheduleDetailsHeaderSmall" style="background-color:#0066FF;">
                <MudIcon Icon="@Icons.Material.Filled.Today" Class="smallIconCardscheduleDetailsCss" />
            </div>
            <div class="textSmall">@(t.TruncateText(ResourceDetails.Resource.ResourceName, 25))</div>
            <span class="d-flex align-items-center" style="width:10%;height:100%;" onclick="@(() => Close())">
                <MudIcon Icon="@Icons.Material.Filled.Close" Style="font-size: x-large; color:white;" />
            </span>
        </div>
    </TitleContent>
    <DialogContent>
        <div class="d-flex flex-column cardScheduleDetailsBodySmall h-100">
            <div class="d-flex flex-column w-100" style="overflow:auto; height:90%;" >
                <div class="d-flex pt-2 flex-column w-100 h-100">
                    <span class="descriptionDetailsSmall">@(t.Words["Descrizione"])</span>
                    <div class="dividerDetailsScheduleSmall"></div>
                    @if (ResourceDetails.Resource != null)
                    {
                        <p class="bodyDescriptionSmall">@(t.TruncateText(ResourceDetails.Resource.Description, 100))</p>
                    }
                    else
                    {
                        <div><span class="descriptionDetailsSmall" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( @(t.Words["Nessun dato"]) )</i></span></div>
                    }
                </div>

                <div class="d-flex flex-column w-100 h-100">
                    <span class="descriptionDetailsSmall">@(t.Words["Servizi"])</span>
                    <div class="dividerDetailsScheduleSmall"></div>
                    <div class="d-flex flex-column h-100" style="padding-top:1vh;">
                        @if (ResourceDetails.Resource.Services != null && ResourceDetails.Resource != null)
                        {
                            @foreach (var service in ResourceDetails.Resource.Services)
                            {
                                <span class="serviceDescriptionSmall" title="@service.ServiceName"> @(t.TruncateText(service.ServiceName, 25))</span>
                            }
                        }
                        else
                        {
                            <div><span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( @(t.Words["Nessun dato"]) )</i></span></div>
                        }
                    </div>
                </div>


               


                    <div class="d-flex flex-column w-100 h-100">
                    <div><span class="descriptionDetailsSmall">@(t.Words["Orari di disponibilità"])</span></div>
                        <div class="dividerDetailsScheduleSmall" style="width:82%"></div>
                    <div class="d-felx flex-row w-100 h-100 bodyDescriptionSmall" style="overflow:auto;">
                            @if (ResourceDetails.Resource.AvailabilityAdv.UnavailableRecurringTimeDays != null && ResourceDetails.Resource.AvailabilityAdv.UnavailableRecurringTimeDays.Count() > 0)
                            {
                                @foreach (var giorniConRegole in ResourceDetails.Resource.AvailabilityAdv.UnavailableRecurringTimeDays)
                                {
                                    <div>
                                        <span title="@giorniConRegole.RangeAvailability"><b>@giorniConRegole.DayOfTheWeek: </b>@(t.TruncateText(giorniConRegole.RangeAvailability, 25))</span><br />
                                    </div>
                                }
                            }
                            else
                            {
                            <div><span class="descriptionDetailsSmall" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( @(t.Words["Nessun dato"]) )</i></span></div>
                            }

                        </div>
                    </div>

                    <div class="d-flex flex-column w-100 h-100">
                    <div><span class="descriptionDetailsSmall">@(t.Words["Giorni di chiusura"])</span></div>
                        <div class="dividerDetailsScheduleSmall" style="width:80%"></div>
                    <div class="d-felx flex-row w-100 h-100 bodyDescriptionSmall">
                            @if (ResourceDetails.Resource.AvailabilityAdv.UnavailableSpecificDays.Data.Count() > 0)
                            {
                                @foreach (var giorniChiusura in ResourceDetails.Resource.AvailabilityAdv.UnavailableSpecificDays.Data)
                                {
                                    <div>
                                        <span><b>@giorniChiusura.ToString("dd/MM/yyyy")</b></span><br />
                                    </div>
                                }
                            }

                            @if (ResourceDetails.Resource.AvailabilityAdv.UnavailableTimeDatesSlot != null && ResourceDetails.Resource.AvailabilityAdv.UnavailableTimeDatesSlot.Count() > 0)
                            {
                                <div class="pt-1">
                                <span style="font-size:medium;"> <i>( @(t.Words["Chiusura straordinaria"]) )</i></span>
                                </div>
                                @foreach (var giorniSpecificiConRegole in ResourceDetails.Resource.AvailabilityAdv.UnavailableTimeDatesSlot)
                                {
                                    <div>
                                        <span><b>@giorniSpecificiConRegole.SpecificDate.ToString("dd/MM/yyyy"): </b>@giorniSpecificiConRegole.RangeAvailability</span><br />
                                    </div>
                                }
                            }

                            else if (ResourceDetails.Resource.AvailabilityAdv.UnavailableSpecificDays.Data.Count() == 0 || ResourceDetails.Resource.AvailabilityAdv.UnavailableSpecificDays.Data == null)
                            {
                            <div><span class="descriptionDetailsSmall" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>( @(t.Words["Nessun dato"]) )</i></span></div>
                            }
                        </div>
                    </div>

            </div>
            @if (ResourceDetails.Resource != null)
            {
                <div class="d-flex justify-content-center align-items-end" style="height:13%;">
                    <MudButton OnClick="@(async () => await ClickOpenModal(ResourceDetails.Resource.Id.Value))" class="confirmScheduleDetailsButton btn-primary" style="width:100%;" type="submit">@(t.Words["Seleziona"])</MudButton>
                </div>
            }
        </div>
    </DialogContent>
</MudDialog>



@code {


    [Parameter]
    public DTOScheduleCardDetailsModal ResourceDetails { get; set; }
    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private async Task ClickOpenModal(int idResource)
    {
        if (ResourceDetails.CallbackOpenModal.HasDelegate)
        {
            await ResourceDetails.CallbackOpenModal.InvokeAsync(idResource);
            MudDialog.Close();
        }
    }


    private void Close(){
        MudDialog.Close();
    }

}

<style>
    .smallIconCardscheduleDetailsCss {
        color: white;
        font-size: xx-large !important;
    }

    .mudProgressScheduleDetail {
        height: 150px !important;
        width: 150px !important;
    }

    .mud-progress-circular.mud-progress-medium {
        height: 150px !important;
        width: 150px !important;
    }
</style>
