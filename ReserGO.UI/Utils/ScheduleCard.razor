@using MudBlazor
<div class="d-flex cardScheduleContainer w-100">

    <div class="d-flex flex-row @(IsActive ? "active" : "") @(IsSmallView ? "w-100 cardScheduleSmall" :"cardSchedule")" @onclick="@Click">
        <div class="d-flex flex-column h-100 align-items-center justify-content-center imageCardCss">
            @if (!String.IsNullOrEmpty(Image))
            {
                <img src="@Image" Class="@(IsSmallView ? "imageCssSmall" :"imageCss")" />
            }
            else
            {
                <MudIcon Icon="@Icon" Class="@(IsSmallView ? "iconCardScheduleSmall" :"iconCardSchedule")" />
            }
        </div>
        <div class="d-flex flex-column h-100" style="width:65%;" >
            <div class="d-flex w-100 align-items-center headerScheduleCard" style="@(IsSmallView ? "padding-inline:5px" :"")">
                @if (Title.Length > 1)
                {
                    <span class="textScheduleTitle" style="@(IsSmallView ? "font-size: x-large; padding-inline:2vw;" :"padding-inline:1vw;")" title="@Title">
                        @(IsSmallView ? TruncateText(Title,13):TruncateText(Title,18))
                    </span>
                }

            </div>
            <div class="d-flex w-100 bodyScheduleCard p-3">
                <span style="max-width: 16vw;">@Description</span>
            </div>
        </div>
    </div>

</div>
@code {

    [Parameter]
    public bool IsActive { get; set; } = false;

    [Parameter]
    public EventCallback Callback { get; set; }

    [Parameter]
    public string Title { get; set; } = "Titolo";

    [Parameter]
    public string Image { get; set; }

    [Parameter]
    public string Description { get; set; } = "Descrizione assente";

    [Parameter]
    public string Icon { get; set; } = "";

    [Parameter]
    public bool IsSmallView { get; set; }


    protected override void OnInitialized()
    {
    }

    private async Task Click()
    {
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync();
        }
    }

    public static string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }
        return text.Substring(0, maxLength - 3) + "...";
    }

}

<style>
    .iconCardSchedule {
        color: #0066FF;
        font-size: 5vw !important;
        opacity:0.5;
    }

    .iconCardScheduleSmall {
        color: #0066FF;
        font-size: 10vw !important;
        opacity: 0.5;
    }

    .imageCardCss{
        width: 35%;
        max-width: 35%;
        border-radius: 15px 0px 0px 15px;
        background-color: whitesmoke;
        overflow: hidden;
        object-fit:cover;
    }
    .imageCardCssSmall{
        width: 35%;
        max-width: 35%;
        border-radius: 15px 0px 0px 15px;
        background-color: whitesmoke;
        overflow: hidden;
        object-fit:cover;
    }

    .imageCss{
        border-radius: 100%;
        width:9vw;
        height:17vh;
    }
    .imageCssSmall{
        border-radius: 100%;
        width:28vw;
        height:14vh;
    }
</style>

