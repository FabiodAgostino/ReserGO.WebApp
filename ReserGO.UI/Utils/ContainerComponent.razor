@typeparam TViewModel
@typeparam TModel
@typeparam TComponent

<div class="parent-component">
    <h3>Componente Genitore</h3>
    <div>
            <BaseComponent TViewModel="TViewModel" TModel="TModel">
                <Content>
                    @if (ChildComponentRenderFragment != null)
                    {
                        @ChildComponentRenderFragment
                    }
                </Content>
            </BaseComponent>
    </div>
</div>

@code {
    [Parameter] public TViewModel ViewModel { get; set; }
    [Parameter] public TModel Model { get; set; }
    [Parameter] public Dictionary<string, object> ComponentParameters { get; set; } = new();
    [Parameter] public Dictionary<string, EventCallback> Callbacks { get; set; } = new();
    [Parameter] public Dictionary<string, EventCallback<object>> TypedCallbacks { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {

    }
    private RenderFragment ChildComponentRenderFragment => builder =>
    {
        var seq = 0;
        builder.OpenComponent(seq++, typeof(TComponent));  // Creazione dinamica del componente

        foreach (var param in ComponentParameters)
        {
            builder.AddAttribute(seq++, param.Key, param.Value);
        }

        foreach (var callback in Callbacks)
        {
            builder.AddAttribute(seq++, callback.Key, callback.Value);
        }

        foreach (var typedCallback in TypedCallbacks)
        {
            builder.AddAttribute(seq++, typedCallback.Key, typedCallback.Value);
        }

        builder.CloseComponent();
    };
}
