@using MudBlazor
@using ReserGO.DTO
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Schedule

@inherits BaseComponentChild<IScheduleServicesViewModel, DTOService>
<div class="d-flex p-3 @(IsSmallView ? "p-3":"")">
    <span class="titleServiceSelection" style="@(IsSmallView ? "font-size:x-large":"")">Seleziona i servizi che intendi prenotare</span>
</div>

<div class="d-flex w-100 h-100" style="padding-block:2vh">
    <div class="d-flex flex-wrap w-100 descriptionServiceSelection" style="overflow:auto; height:60%; ">
        @foreach (var service in CurrentViewModel.ServicesListCheckable)
        {
            <div class="d-flex p-3" style="height:9vh">
                <div class="d-flex p-2 shadow align-items-center justify-content-center checkboxCard w-100 h-100">
                    <span>@($"{service.Service.ServiceName} | {service.Service.Price?.ToString() ?? "N/A"} €")</span>
                    <!-- Usa un checkbox con binding per ogni servizio -->
                    <MudCheckBox Value="service.IsSelected" Color="Color.Primary" ValueChanged="@((bool value) => UpdateTotal(value, service))"></MudCheckBox>
                </div>
            </div>
        }
    </div>
</div>

<div class="d-flex flex-row align-self-end justify-content-end">
    <span>Tempo stimato: @GetMinutes()</span>
</div>
<div class="d-flex flex-row align-self-end justify-content-end priceServiceSelection">
    <span>Totale: @GetTotalPrice() €</span>
</div>


@if (!IsSmallView)
{
    <div class="d-flex flex-row align-self-end justify-content-center">
        <div class="d-flex" style="height:30%">
            <MudButton class="registerButton btn-primary" style="width:15vw; height:8vh;" @onclick="(() => Next())" Disabled="CurrentViewModel.List.Count()==0">Procedi</MudButton>
        </div>
    </div>
}


@code {

    [Parameter]
    public EventCallback<List<DTOService>?> CallBack { get; set; }

    [Parameter]
    public bool IsSmallView { get; set; }

    [Parameter]
    public List<DTOService>? ServicesList { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (ServicesList is object && ServicesList.Count() > 0 && CurrentViewModel.IsFirstLoad)
        {
            CurrentViewModel.ServicesListCheckable = ServicesList.Select(x => new DTOServiceSelectable(x)).ToList();
            CurrentViewModel.IsFirstLoad = false;
        }
    }

    // Metodo per aggiornare il totale quando cambia la selezione
    private async Task UpdateTotal(bool value, DTOServiceSelectable service)
    {
        if (ServicesList == null)
            return;

        service.IsSelected = value;

        if (value)
            CurrentViewModel.List.Add(service.Service);
        else
            CurrentViewModel.List.Remove(service.Service);

        if (CallBack.HasDelegate && IsSmallView)
            await CallBack.InvokeAsync(CurrentViewModel.List);

    }

    private decimal GetTotalPrice()
        => CurrentViewModel.ServicesListCheckable
            .Where(s => s.IsSelected && s.Service.Price.HasValue)
            .Sum(s => s.Service.Price.Value);

    private string GetMinutes()
    {
        int minuti = CurrentViewModel.ServicesListCheckable
        .Where(s => s.IsSelected && s.Service.Price.HasValue)
        .Sum(s => s.Service.Duration);
        int ore = minuti / 60;
        int minutiRimanenti = minuti % 60;
        return $"{ore:D2}:{minutiRimanenti:D2}";
    }

    public async Task Next()
    {
        if (CallBack.HasDelegate && !IsSmallView)
            await CallBack.InvokeAsync(CurrentViewModel.List);
    }
}