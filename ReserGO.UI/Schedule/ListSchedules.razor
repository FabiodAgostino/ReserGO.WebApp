@using MudBlazor
@using ReserGO.UI.Utils
@using ReserGO.DTO;

<div class="d-flex flex-column w-100 listScheduleContainer  @(IsSmallView ? "flex-column w-100 h-100":"align-items-center justify-content-center")">
    <div class="d-flex p-3 gridContainer @(IsSmallView ? "flex-column w-100":"justify-content-center")" style="@(IsSmallView ? "height:81vh;":"")">

        @if (IsSmallView)
        {
            @if (Resources != null && Resources.Any())
            {
                @foreach (var resource in Resources)
                {
                    <div class="d-flex flex-row" style="padding-block:0.5vh;">
                        <ScheduleCard Icon="@InformationIcon" Callback="@(async () => await Click(resource.Id.Value))" IsSmallView="IsSmallView" Title="@resource.ResourceName" Description="@resource.Description"  IsActive="@(activeCardId == resource.Id.Value)"/>
                    </div>
                }
            }
            @if (!IsLoading && Resources == null)
            {
                <div>No data...</div>
            }
            @if (IsLoading)
            {
                <div class="d-flex align-items-center justify-content-center h-100 w-100">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressSchedules" />
                </div>
            }
        }
        else
        {
             @if (true && Resources != null && Resources.Any())
            {

                <div class="d-flex flex-column" >

                    @foreach (var resource in Resources)
                    {
                        <div class="d-flex flex-row">
                            <ScheduleCard Icon="@InformationIcon" Callback="@(async () => await Click(resource.Id.Value))" Title="@resource.ResourceName" Description="@resource.Description" IsActive="@(activeCardId == resource.Id.Value)"/>
                        </div>
                    }
                    @if (!IsLoading && Resources == null)
                    {
                        <div>No data...</div>
                    }
                    @if (IsLoading)
                    {
                        <div style="position:fixed;">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressSchedules" />
                        </div>
                    }
                </div>
            }

            
            else{


            <MudGrid Spacing="@Spacing" Justify="Justify.Center" Style="align-items:center;">
                @if (Resources != null && Resources.Any())
                {
                    @foreach (var resource in Resources)
                    {
                        <MudItem>
                            <div class="d-flex flex-row">
                                <ScheduleCard Icon="@InformationIcon" Callback="@(async () => await Click(resource.Id.Value))" Title="@resource.ResourceName" Description="@resource.Description" IsActive="@(activeCardId == resource.Id.Value)" />
                            </div>
                        </MudItem>
                    }
                }
                @if (!IsLoading && Resources == null)
                {
                    <div>No data...</div>
                }
                @if (IsLoading)
                {
                    <div style="position:fixed;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressSchedules" />
                    </div>
                }
            </MudGrid>
            }
        }

    </div>
</div>


@code {

    [Parameter]
    public EventCallback<int> Callback { get; set; }

    [Parameter]
    public IEnumerable<DTOResource> Resources { get; set; }

    [Parameter]
    public bool IsLoading { get; set; } = true;

    [Parameter]
    public bool IsSmallView { get; set; } = true;

    public int Spacing { get; set; } = 1;

    private string InformationIcon = "";

    private int? activeCardId = 0;

    protected override void OnInitialized()
    {
        InformationIcon = Icons.Material.Filled.Today;
    }


    private async Task Click(int idResource)
    {
        activeCardId = idResource;
        StateHasChanged();
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync(idResource);
        }
    }

}

<style>
    .mudProgressSchedules {
        height: 150px !important;
        width: 150px !important;
    }

     .mud-progress-circular.mud-progress-medium {
        height: 150px !important;
        width: 150px !important;
    }

</style>