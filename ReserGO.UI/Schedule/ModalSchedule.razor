@using ReserGO.Miscellaneous.Model
@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ReserGO.UI.Utils
@using ReserGO.UI.Login
@using ReserGO.ViewModel.Interface.Schedule;
@using ReserGO.Miscellaneous.Model
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.DTO.ListAvailability
@using ReserGO.Miscellaneous.Extensions;

@inherits BaseComponentChild<IModalScheduleViewModel, DTOResource>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "scheduleDialogCssSmall" : "scheduleDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler" Options="@Options">
	<TitleContent>

	</TitleContent>

	<DialogContent>

		@if (CurrentViewModel.IsSmallView)
		{
			<div class="d-flex flex-column smallDialogContainer">

				<div class="d-flex flex-row p-3 headerDialogSmall">
					<span class="d-flex align-items-center h-100 headerTextSmall">Prenotazione</span>
					<span class="d-flex align-items-end" style="width:10%;height:100%;" onclick="@(() => CurrentViewModel.Close())">
						<MudIcon Icon="@Icons.Material.Filled.Close" Style="font-size: x-large; color:white;" />
					</span>
				</div>
				<div class="d-flex flex-column justify-content-center tabHeader">
					<MudTabs Elevation="4" Rounded="true" Color="@Color.Primary" NextIcon="@String.Empty" PrevIcon="@String.Empty" @bind-ActivePanelIndex="CurrentViewModel.ScheduleStepper.Index">
						@if (CurrentViewModel.ScheduleStepper.EnableServices)
						{
							<MudTabPanel Text="Servizio">
								<div class="d-flex flex-column w-100 justify-content-around columnCalendar" style="height:65vh;">
									<BaseComponent TViewModel="IScheduleServicesViewModel" TModel="DTOService">
										<Content>
											<ScheduleServices  CallBack="@((List<DTOService> services) => CurrentViewModel.ScheduleStepper.UpdateServices(services))" Resource="@CurrentViewModel.SelectedItem" IsSmallView="CurrentViewModel.IsSmallView" LastServices="CurrentViewModel.ScheduleStepper.Services"/>
										</Content>
									</BaseComponent>
								</div>
							</MudTabPanel>
						}
						<MudTabPanel Text="Giorno" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.DATE))">
							<div class="d-flex p-2 justify-content-center w-100 h-100">
								<Calendar DisabledWhen="CurrentViewModel.DayDisabled" OnClick="@(async (DateTime date) => {CurrentViewModel.ScheduleStepper.UpdateDate(date);await CurrentViewModel.GetSlot(date);})" IsSmallView="true" />
							</div>
						</MudTabPanel>
						<MudTabPanel Text="Orario" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.SLOT))">
							<div class="d-flex flex-column w-100 columnCalendar">
								<TimeSchedule TimeSlots="CurrentViewModel.TimeSlots" SavedTimeSlot="CurrentViewModel.ScheduleStepper.Slot"
										  OnClick="@((DTOTimeSlot selectedSlot) => CurrentViewModel.ScheduleStepper.UpdateSlot(selectedSlot))" IsLoading="@CurrentViewModel.SlotLoading" IsFirstLoading="@CurrentViewModel.IsFirstLoad"></TimeSchedule>
							</div>
						</MudTabPanel>
						@if (!CurrentViewModel.ScheduleStepper.IsLoggedIn)
						{
							<MudTabPanel Text="Anagrafica" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.USER))">
								<BaseComponent TViewModel="IScheduleFormViewModel" TModel="DTOUserLight">
									<Content>
										<ScheduleForm Callback="@((DTOUserLight user) => CurrentViewModel.ScheduleStepper.UpdateUser(user))" PreviousClick="(() =>  CurrentViewModel.ScheduleStepper.PreviewsIndex())"/>
									</Content>
								</BaseComponent>
							</MudTabPanel>
						}
						<MudTabPanel Text="Conferma" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.CONFIRM))">
							<ConfirmSchedule Stepper="@CurrentViewModel.ScheduleStepper" OnClick="@(async (bool submit) => await CurrentViewModel.InsertBooking(submit))" />
						</MudTabPanel>
					</MudTabs>
					<div class="d-flex justify-content-around" style="background-color:white">

						@if (CurrentViewModel.ScheduleStepper.ViewButtonsSmartphone())
						{
							<div class="d-flex p-2 w-50 h-100">
								<MudButton class="registerButton btn-primary" style="width:100%;height:7vh;" type="submit" OnClick="@( () => CurrentViewModel.ScheduleStepper.PreviewsIndex() )" Disabled="CurrentViewModel.ScheduleStepper.Index==0">
									<MudIcon Icon="@Icons.Material.Filled.ArrowBackIos" Style="font-size: x-large; color:white;" />
								</MudButton>
							</div>
							<div class="d-flex p-2 w-50 h-100">
								<MudButton class="registerButton btn-primary" style="width:100%;height:7vh;" Disabled="CurrentViewModel.ScheduleStepper.DisabledNextButtonSmartphone()" type="submit" OnClick="@( () => CurrentViewModel.ScheduleStepper.NextIndex() )">
									<MudIcon Icon="@Icons.Material.Filled.ArrowForwardIos" Style="font-size: x-large; color:white;" />
								</MudButton>
							</div>
						}

					</div>
				</div>

			</div>
		}
		else
		{
			<div class="d-flex dialogScheduleContainer p-1">
				<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" @ref="tabs" @bind-ActivePanelIndex="CurrentViewModel.ScheduleStepper.Index">
					@if (CurrentViewModel.ScheduleStepper.EnableServices)
					{
						<MudTabPanel Text="Servizio">
							<div class="d-flex flex-column w-100 justify-content-around columnCalendar">
								<BaseComponent TViewModel="IScheduleServicesViewModel" TModel="DTOService">
									<Content>
										<ScheduleServices CallBack="@((List<DTOService> services) => CurrentViewModel.ScheduleStepper.UpdateServices(services))" Resource="@CurrentViewModel.SelectedItem" IsSmallView="CurrentViewModel.IsSmallView" LastServices="CurrentViewModel.ScheduleStepper.Services"/>
									</Content>
								</BaseComponent>
							</div>
						</MudTabPanel>
					}
					<MudTabPanel Text="Giorno e ora" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.DATESLOT))">
						<div class="d-flex flex-column justify-content-around columnCalendar" style="width:50%;">
							<Calendar DisabledWhen="CurrentViewModel.DayDisabled" OnClick="@(async (DateTime date) => {CurrentViewModel.ScheduleStepper.UpdateDate(date);await CurrentViewModel.GetSlot(date);} )" />
						</div>

						<div class="d-flex flex-column justify-content-center h-100">
							<div class="scheduleDivider"></div>
						</div>

						<div class="d-flex flex-column columnCalendar" style="width:50%;">
							<TimeSchedule TimeSlots="CurrentViewModel.TimeSlots" SavedTimeSlot="CurrentViewModel.ScheduleStepper.Slot"
										  OnClick="@((DTOTimeSlot selectedSlot) => CurrentViewModel.ScheduleStepper.UpdateSlot(selectedSlot))" IsLoading="@CurrentViewModel.SlotLoading" IsFirstLoading="@CurrentViewModel.IsFirstLoad"></TimeSchedule>
						</div>
					</MudTabPanel>

					@if (!CurrentViewModel.ScheduleStepper.IsLoggedIn)
					{
						<MudTabPanel Text="Anagrafica" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.USER))">
							<BaseComponent TViewModel="IScheduleFormViewModel" TModel="DTOUserLight">
								<Content>
									<ScheduleForm Callback="@((DTOUserLight user) => CurrentViewModel.ScheduleStepper.UpdateUser(user))" />
								</Content>
							</BaseComponent>

						</MudTabPanel>
					}
					<MudTabPanel Text="Conferma" Disabled="@(CurrentViewModel.ScheduleStepper.Disabled(StateOfStepper.CONFIRM))">
						<ConfirmSchedule Stepper="@CurrentViewModel.ScheduleStepper" OnClick="@(async (bool submit) => await CurrentViewModel.InsertBooking(submit))" />
					</MudTabPanel>
				</MudTabs>
			</div>
		}

	</DialogContent>

</MudDialog>

@code {

	private MudTabs tabs;

	[Parameter]
	public EventCallback<DateTime> OnClick { get; set; }

	private DateTime _date { get; set; } = DateTime.Now;

	public DialogOptions Options = new DialogOptions
		{
			CloseOnEscapeKey = true,
			MaxWidth = MaxWidth.ExtraLarge,
			NoHeader = true,
		};

	private async Task OnBackdropClickHandler(MouseEventArgs e)
	{
		CurrentViewModel.Close();
	}

	protected override async Task OnInitializedAsync()
	{
		await CurrentViewModel.RegisterOnScreenResize(800);
	}

	public async Task OnDateChanged(DateTime? date)
	{
		_date = date.Value;
		if (OnClick.HasDelegate)
			await OnClick.InvokeAsync(date.Value);
	}

}

<style>
	.scheduleDialogCss {
		border-radius: 30px !important;
	}

	.scheduleDialogCssSmall {
		width: 100%;
		height: 100%;
		border-radius: 30px !important;
	}

	.scheduleCalendarCss {
		border: 1px solid lightgray;
		border-radius: 15px;
	}

	.mud-tabs {
		width: 100%;
	}

	.mud-tabs-panels {
		display: flex;
		height: 100%;
	}


	.mud-tabs-tabbar.mud-tabs-rounded.mud-tabs-tabbar-primary.mud-elevation-4 {
		border-radius: 20px !important
	}

	.mud-tabs-tabbar-primary {
		background-color: #0066FF !important;
		color: var(--mud-palette-primary-text);
	}

	.mud-dialog-content {
		width: 71vw;
		height: 65vh;
	}

	.mud-tabs-panels {
		display: flex;
		height: 93% !important;
	}

</style>

@if (CurrentViewModel.IsSmallView)
{
	<style>
		.mud-dialog-content {
			width: 100%;
			height: 100%;
		}

		.mud-tabs-tabbar-secondary {
			background-color: #0066FF !important;
			color: var(--mud-palette-secondary-text);
			max-width: 85%;
		}

		.mud-tab {
			min-width: unset;
		}

		.mud-tabs {
			align-items: center !important;
			box-shadow: none !important;
		}

		.mud-elevation-4 {
			box-shadow: none !important;
		}

		.mud-tabs-panels {
			background-color: white !important;
			width: 100% !important;
			height: 100% !important;
		}
	</style>
}


