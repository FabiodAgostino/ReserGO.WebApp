@using ReserGO.DTO
@using MudBlazor
@using ReserGO.DTO.Extensions;
@using ReserGO.Miscellaneous.Model;
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t
@if (Stepper is object)
{
    <div class="d-flex flex-column justify-content-around w-100 @(IsSmallView ? "p-2":"") " style="@(IsSmallView ? "":"height:100%;")">

        <div class="d-flex flex-row align-items-center w-100 titleSummary" style="@(IsSmallView ? "font-size:large; padding:1vh;":"height:18%;")">
            <span>@(t.Words["Riepilogo prenotazione"])</span>
        </div>

        <div class="d-flex flex-column align-items-center w-100 @(IsSmallView ? "":"justify-content-center")" style="@(IsSmallView ? "overflow:auto":"max-height:65%;height:65%;")">
            <div class="d-flex justify-content-around align-items-center shadow cardSummary @(IsSmallView ? "flex-column":"flex-row") " style="@(IsSmallView ? "width:95%;":"width:70%;height:95%;")">

                <div class="d-flex flex-column @(IsSmallView ? "p-3":"p-2")" style="@(IsSmallView ? "width:100%;height:100%;":"width:48%; height:95%;")">

                    <div class="d-flex w-100 cardTitleSummry" style="@(IsSmallView ? "font-size:large;":"")">@(t.Words["Dettagli"])</div>
                    <div class="d-flex p-1 dividerTitleSummary" style="width:50%"></div>
                    <div class="d-flex flex-column w-100 h-100 justify-content-around cardSummaryDescription" style="@(IsSmallView ? "font-size:larger;":"overflow:auto;") ">
                        <span>NOME: @Stepper.User.FirstName</span>
                        <span>COGNOME: @Stepper.User.LastName</span>
                        <span>DATA: @GetDate()</span>
                        <span>ORA: @GetTime()</span>
                        <span>PRENOTAZIONE: @Stepper.ResourceName</span>
                        <span>TOTALE: @Stepper.TotalPrice €</span>
                    </div>
                
                </div>
                
                @if(!IsSmallView)
                {
                    <div class="scheduleDivider"></div>
                }


                <div class="d-flex flex-column p-2" style="@(IsSmallView ? "width:100%;":"width:48%;height:95%;")">
                    <div class="d-flex w-100 cardTitleSummry" style="@(IsSmallView ? "font-size:larger;" :"")">@(t.Words["Servizi"])</div>
                    <div class="d-flex p-1 dividerTitleSummary" style="width:50%"></div>
                    <div class="d-flex w-100  @(IsSmallView ? "":"align-items-end h-100")">
                        <div class="d-flex flex-column justfy-content-center w-100 cardSummaryService" style="@(IsSmallView ? "font-size:larger;max-height:none;" :"overflow:auto;")">
                            @foreach (var service in Stepper.Services)
                            {
                                <div class="d-flex @(IsSmallView ? "p-2":"p-3")" style="@(IsSmallView ? "height:12vh ":"height:9vh")">
                                    <div class="d-flex p-2 shadow align-items-center justify-content-between checkboxCard w-100 h-100">
                                        <span style="opacity:0.8;">@service.ServiceName</span>
                                        <span style="opacity:0.8;">@service.Price.Value</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

            </div>
            @if (!Stepper.RequestToConfirm)
            {
                <div class="d-flex justify-content-center pt-4 w-100 @(IsSmallView ? "infoMailSmall" : "infoMail")">
                    <span><b>* @(t.Words["Invio email prenotazione"])</b></span>
                </div>
            }
        </div>

        @if(!IsSmallView)
        {
            <div class="d-flex justify-content-around align-items-center p-2" style="height:20%">
                <div class="d-flex p-1" style="width:25%;">
                    <MudButton @onclick="@(() => Submit(false))" class="registerButtonConfirm btn-primary" style="width:100%;" type="submit">@(t.Words["Annulla"])</MudButton>
                </div>
                <div class="d-flex p-1" style="width:25%;">
                    <MudButton @onclick="@(() => Submit(true))" class="registerButtonConfirm btn-primary" style="width:100%;" type="submit">@(t.Words["Salva"])</MudButton>
                </div>
            </div>
        }
    </div>
   
}
@code {
    [Parameter]
    public DTOModalScheduleStepper Stepper { get; set; }
    [Parameter]
    public EventCallback<bool> OnClick { get; set; }
    [Parameter]
    public bool IsSmallView { get; set; }

    private async Task Submit(bool submit)
    {
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync(submit);
    }


    public string GetDate()
    {
        return $"{Stepper.Date:yyyy-MM-dd}";
    }
    public string GetTime()
    {
        return $"{Stepper.Slot.StartTime.Hours:D2}:{Stepper.Slot.StartTime.Minutes:D2} - {Stepper.Slot.EndTime.Hours:D2}:{Stepper.Slot.EndTime.Minutes:D2}";
    }
}
