@using ReserGO.Miscellaneous.Model
@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ReserGO.UI.Utils
@using ReserGO.DTO.ListAvailability
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t

<div class="d-flex timeScheduleContainer" style="@(IsSmallView ? "height: 53vh; !important":"")">
    @if (IsLoading)
    {
        <div class="d-flex align-items-center justify-content-center h-100 w-100">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mudProgressSchedules" />
        </div>
    }else
    if (TimeSlots != null && TimeSlots.Count() > 0 && !IsFirstLoading)
    {
        <div class="d-flex flex-column w-100 h-100" style="overflow:scroll">
            <div class="d-flex flex-wrap align-items-center justify-content-between w-100" style="height:25%">


                @foreach (var timeslot in TimeSlots)
                {
                    <TimeCard 
                        Time="@($"{timeslot.StartTime.Hours:D2}:{timeslot.StartTime.Minutes:D2}")"
                        OnClick="@(() => OnClickSlot(timeslot))"
                        IsSelected="@(timeslot == selectedTimeSlot)">
                    </TimeCard>
                }

            </div>

        </div>
    }
    else if (IsFirstLoading)
    {
        <div class="d-flex w-100 h-100 align-items-center justify-content-center" >
            <span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>@(t.Words["Seleziona un'altra data"])'</i></span>
        </div>
    }
    else
    {
        <div class="d-flex w-100 h-100 align-items-center justify-content-center">
            <span class="descriptionDetails" style="font-size:x-large; opacity:0.5; margin-right:20px;"><i>@(t.Words["Orari non disponibili"])</i></span>
        </div>
    }

</div>


@code {
    [Parameter]
    public List<DTOTimeSlot> TimeSlots { get; set; }
    [Parameter]
    public EventCallback<DTOTimeSlot> OnClick { get; set; }
    [Parameter]
    public bool IsLoading { get; set; }
    [Parameter]
    public bool IsFirstLoading { get; set; }
    [Parameter]
    public bool IsSmallView { get; set; }
    private string TimeForCard = "";
    [Parameter]
    public DTOTimeSlot SavedTimeSlot { get; set; }

    private DTOTimeSlot selectedTimeSlot;

    protected override async Task OnParametersSetAsync()
    {
        if (SavedTimeSlot != null && TimeSlots!=null) 
            selectedTimeSlot = TimeSlots.SingleOrDefault(x => x.StartTime == SavedTimeSlot.StartTime && x.EndTime == SavedTimeSlot.EndTime);
    }

    public async Task OnClickSlot(DTOTimeSlot slot)
    {
        selectedTimeSlot = slot;
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync(slot);
    }

}
