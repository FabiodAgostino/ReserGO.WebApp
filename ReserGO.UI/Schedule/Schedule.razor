@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.UI.Schedule
@using ReserGO.Miscellaneous.Model
@using ReserGO.ViewModel.Interface.Schedule
@using ReserGO.DTO;
@using ReserGO.Utils.DTO.Utils
@using Utils

@inherits BaseComponentChild<IScheduleViewModel,DTOResource>
@inject IDialogService DialogService

<div class="d-flex flex-column p-0 h-100 w-100 justify-content-center align-items-center homeGuestScheduleContainer">
	<div class="d-flex flex-row shadow  p-0 w-100 homeGuestScheduleBody @(CurrentViewModel.IsSmallView ? "justify-content-center align-items-center":"")">
		@if (!CurrentViewModel.IsSmallView)
		{
			<div class="d-flex leftSideSchedule justify-content-center align-items-center">
				@if (OpenDetailsCard)
				{
					<ScheduleCardDetails CardStyle="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? "width:90%;height:95%;" : "width:95%;height:80vh;")" Icon="@InformationIcon" CallbackOpenModal="@( async (int idResource) => await CurrentViewModel.OpenModalCalendar())" Resource="@CurrentViewModel.SelectedItem" IsLoading="@CurrentViewModel.LoadingFullResource" />
				}
				else
				{
					@if (CurrentViewModel.IsLoading)
					{
						<div style="position:fixed;">
							<span class="loadingText">In attessa della risorsa...</span>
						</div>
					}
					else
					{
						<CardReserGo Title=" " Description="Seleziona Risorsa" BodyStyle="@CardItemEmptyStyle" ZoomEffect="false" Icon="@InformationIcon" />
					}
				}
			</div>


			<div class="d-flex flex-column justify-content-center h-100">
				<div class="scheduleMainDivider"></div>
			</div>
		}

		<div class="d-flex @(CurrentViewModel.IsSmallView ? "rightSideScheduleSmall":"rightSideSchedule align-items-center h-100")" style="@(CurrentViewModel.IsSmallView ? "width:95%; height:96%;":"")">
			<ListSchedules Callback="@( async (int idResource) => await OpenDetails(idResource))" Resources="CurrentViewModel.List" IsLoading="CurrentViewModel.IsLoading" IsSmallView="@CurrentViewModel.IsSmallView" />
		</div>
	</div>
</div>

<BaseComponent TViewModel="IModalScheduleViewModel" TModel="DTOResource">
	<Content>
		<ModalSchedule />
	</Content>
</BaseComponent>


@code {

	private string InformationIcon = "";

	private string CardItemEmptyStyle = "";

	private bool OpenDetailsCard;

	private bool ShowModal = false;
	private bool _refresh { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CurrentViewModel.RegisterOnScreenResize(900);
		InformationIcon = Icons.Material.Filled.Today;
		CardItemEmptyStyle = "background-color:#0066FF;color:#FFFFFF;font-size:xx-large;justify-content: center;";
		await CurrentViewModel.Refresh();
	}

	private async Task GetData(int idResource)
	{
		OpenDetailsCard = true;
	}

	private async Task OpenDetails(int idResource)
	{
		await CurrentViewModel.GetFullResource(idResource);

		if (CurrentViewModel.IsSmallView)
			await OpenDialogAsync();
		else
			OpenDetailsCard = true;
	}

	private async Task OpenDialogAsync()
	{
		var scheduleDetails = new DTOScheduleCardDetailsModal
			{
				Resource = CurrentViewModel.SelectedItem,
				CallbackOpenModal = EventCallback.Factory.Create<int>(this, HandleCallback)
			};

		var dialogParameters = new DialogParameters
	{
		{ "ResourceDetails", scheduleDetails }  // Passa l'oggetto direttamente
    };

		var options = new DialogOptions
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center
			};

		var result = await DialogService.Show<ScheduleCardDetailsModal>("Dettagli Programmazione", dialogParameters, options).Result;
	}

	private async Task HandleCallback(int value)
	{
		await CurrentViewModel.OpenModalCalendar();
	}

}


<style>
	.mud-paper.mud-elevation-1 {
		background: none;
	}
</style>