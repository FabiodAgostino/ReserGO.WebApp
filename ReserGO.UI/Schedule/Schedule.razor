@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.UI.Schedule
@using ReserGO.Miscellaneous.Model
@using ReserGO.ViewModel.Interface.Schedule
@using ReserGO.DTO;
@inherits BaseComponentChild<IScheduleViewModel,DTOResource>

<div class="d-flex flex-column p-0 homeGuestScheduleContainer">
    <div class="d-flex flex-row justify-content-between p-0 h-100 homeGuestScheduleBody">
        <div class="d-flex leftSideSchedule justify-content-center align-items-center">
            @if (OpenDetailsCard)
            {
                <ScheduleCardDetails Title="Titolo della risorsa" Description="Seleziona Risorsa" CardStyle="width:95%;height:80vh;" Icon="@InformationIcon" CallbackOpenModal="@( async (int idResource) => await CurrentViewModel.OpenModalCalendar(idResource))" />
            }
            else
            {
                <CardReserGo Title=" " Description="Seleziona Risorsa" CardStyle="opacity:0.5;" BodyStyle="@CardItemEmptyStyle" Icon="@InformationIcon" />
            }
        </div>
        <div class="d-felx rightSideSchedule">
            <ListSchedules Callback="@( async (int idResource) => await GetData(idResource))" Resources="CurrentViewModel.List" IsLoading="CurrentViewModel.IsLoading"/>
        </div>
    </div>
</div>

<BaseComponent TViewModel="IModalScheduleViewModel" TModel="GenericModal<int>">
    <Content>
        <ModalSchedule />
    </Content>
</BaseComponent>


@code {
    private string InformationIcon = "";

    private string CardItemEmptyStyle = "";

    private bool OpenDetailsCard;

    private bool ShowModal = false;

    protected override async Task OnInitializedAsync()
    {
        InformationIcon = Icons.Material.Filled.Today;
        CardItemEmptyStyle = "background-color:#0066FF;color:#FFFFFF;font-size:xx-large;justify-content: center;font-family:ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;";
        await CurrentViewModel.Refresh();
    }

    private async Task GetData(int idResource)
    {
        OpenDetailsCard = true;
    }

}


<style>
    .mud-paper.mud-elevation-1 {
        background: white !important;
    }
</style>