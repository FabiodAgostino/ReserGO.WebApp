@using MudBlazor
@using ReserGO.Miscellaneous.Model
@using ReserGO.UI.FiltersComponent
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ReserGO.ViewModel.Interface.Schedule
@inherits BaseComponentChild<IScheduleFormViewModel, DTOUserLight>

<div class="d-flex flex-column w-100" style="@(CurrentViewModel.IsSmallView ? "height:67vh !important;":"")">

    <div class="d-flex @(CurrentViewModel.IsSmallView ? "p-3":"p-5")">
        @if (ForThird)
        {
            <div class="d-flex justify-content-between w-100">
                <div>
                    <span class="descriptionFormDetails" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large":"")">Prenotazione per terzi</span>
                </div>
                <div>
                    <MudCheckBox @bind-Value="_enableEmail" RequiredError="">Inserisci email</MudCheckBox>
                </div>
            </div>
        }
        else
        {
            <span class="descriptionFormDetails" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large":"")">Inserisci i tuoi dati</span>
        }
    </div>

    <div class="d-flex justify-content-around columnFormRegister w-100  @(CurrentViewModel.IsSmallView ? "flex-column":"flex-row")" style="@(CurrentViewModel.IsSmallView ? "height:59vh;":"height:80%;")">

        <MudForm @ref="form" @bind-IsValid="@_success">

            @if (CurrentViewModel.IsSmallView)
            {
                <div class="inputSpace" style="height:65px;">
                    <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FirstName = value)" Label="Nome" Value="@CurrentViewModel.SelectedItem.FirstName" />
                </div>
                <div class="inputSpace" style="height:65px;">
                    <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.LastName = value)" Label="Cognome" Value="@CurrentViewModel.SelectedItem.LastName" />
                </div>
                <div class="inputSpace" style="height:65px;">
                    <BaseTextField Bind="@((string? value) => CurrentViewModel.SelectedItem.PhoneNumber = value)" Label="Numero di telefono" Regex="^(\d{10}|3\d{9})$" NumericField="true" CustomErrorText="Inserisci un numero valido" Value="@CurrentViewModel.SelectedItem.PhoneNumber" />
                </div>
                <div class="inputSpace" style="height:65px;">
                    @if (!ForThird || (ForThird && _enableEmail))
                    {
                        <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Email"
                                      Label="E-mail" Variant="Variant.Outlined" Margin="Margin.Dense"
                                      Required="true" RequiredError="Inserire Email corretta"
                                      Immediate="true"
                                      Validation="@(new EmailAddressAttribute() { ErrorMessage = "L'email non è valida'" })">
                        </MudTextField>
                    }
                </div>
                <div class="inputSpace">
                    <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.Privacy" Required="true" ErrorText=""><a href="#">Accetto le condizioni d'uso, l'informativa sulla privacy e le note legali</a> </MudCheckBox>
                </div>
                <div class="inputSpace">
                    <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.TrattamentoDati" Required="true" ErrorText=""><a href="#">Acconsento al trattamento dei dati personali</a></MudCheckBox>
                </div>
            }
            else
            {
                <table style="border-collapse: collapse; width: 100%; border: none;">
                    <tr>
                        <td>
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FirstName = value)" Label="Nome" Value="@CurrentViewModel.SelectedItem.FirstName" />
                            </div>
                        </td>
                        <td>
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.LastName = value)" Label="Cognome" Value="@CurrentViewModel.SelectedItem.LastName" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string? value) => CurrentViewModel.SelectedItem.PhoneNumber = value)" Label="Numero di telefono" Regex="^(\d{10}|3\d{9})$" NumericField="true" CustomErrorText="Inserisci un numero valido" Value="@CurrentViewModel.SelectedItem.PhoneNumber" />
                            </div>
                        </td>
                        <td>
                            <div class="inputSpace">
                                @if (!ForThird || (ForThird && _enableEmail))
                                {
                                    <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Email"
                                                  Label="E-mail" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                  Required="true" RequiredError="Inserire Email corretta"
                                                  Immediate="true"
                                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "L'email non è valida'" })">
                                    </MudTextField>
                                }

                            </div>
                        </td>
                    </tr>

                </table>

                <div class="inputSpace">
                    <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.Privacy" Required="true" RequiredError=""><a href="#">Accetto le condizioni d'uso, l'informativa sulla privacy e le note legali</a> </MudCheckBox>
                </div>

                <div class="inputSpace">
                    <MudCheckBox @bind-Value="CurrentViewModel.SelectedItem.TrattamentoDati" Required="true" RequiredError=""><a href="#">Acconsento al trattamento dei dati personali</a></MudCheckBox>
                </div>
            }
        </MudForm>

    </div>
    @if (!CurrentViewModel.IsSmallView)
    {
        <div class="d-flex flex-row justify-content-center w-100 columnFormRegister" style="height:30%">
            <MudButton class="registerButton btn-primary" Disabled="@(!_success)" style="width:15vw; height:8vh;" type="submit" OnClick="Click">Conferma</MudButton>
        </div>
    }

</div>

@code {

    [Parameter]
    public EventCallback<DTOUserLight> Callback { get; set; }

    [Parameter]
    public EventCallback PreviousClick { get; set; }

    [Parameter]
    public bool ForThird { get; set; }

    private bool _enableEmail { get; set; }

    private bool _success;
    MudForm form;
    private bool _privacy { get; set; }
    private bool _trattamentoDati { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!String.IsNullOrEmpty(CurrentViewModel.SelectedItem.FirstName))
        {
            form.Validate();
            _success = form.IsValid;
        }
    }


    private async Task Click()
    {
        if (Callback.HasDelegate)
        {
            await Callback.InvokeAsync(CurrentViewModel.SelectedItem);
        }
    }

    private async Task Previous()
    {
        if (PreviousClick.HasDelegate)
        {
            await PreviousClick.InvokeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
    }


}


<style>
    .registerDialogCss {
        width: 50vw;
        height: 55vh;
        max-width: 50vw !important;
        border-radius: 30px !important;
    }

    .mud-input > input.mud-input-root-outlined.mud-input-root-adorned-end, div.mud-input-slot.mud-input-root-outlined.mud-input-root-adorned-end {
    }

    .mud-form {
        flex-direction: unset !important;
    }

    td {
        padding: 9px;
        margin-bottom: 15px;
    }

    .inputSpace {
        height: 45px;
    }

    .mud-form {
        width: 100% !important;
    }
</style>
