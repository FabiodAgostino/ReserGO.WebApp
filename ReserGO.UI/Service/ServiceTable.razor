@using MudBlazor
@using ReserGO.DTO;
@using ReserGO.Utils.DTO.Service;
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.UI.Utils
@using ReserGO.Miscellaneous.Model;
@using ReserGO.Utils.DTO.Utils;
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t
@inject IDialogService DialogService

@if (Services is object)
{
	<MudTable Items="@Services.CurrentPageData" Loading="IsLoading"
			  Hover="true" Class="w-100 shadow tableClass" Breakpoint="Breakpoint.Sm"
			  LoadingProgressColor="Color.Primary" RowsPerPage="PagingOptions.PageSize.HasValue ? PagingOptions.PageSize.Value : 10"
			  TotalItems="PagingOptions.TotalCount.Value">
		<ToolBarContent>
			<div class="d-flex w-100 h-100 align-items-center toolbarCss" style="background-color:#0066FF;" >
				<MudText Typo="Typo.h6"> <span style="@(IsSmallView ? "padding-inline:2vw;":"")"> Servizi </span> </MudText>
				<MudSpacer />
				<div class="d-flex flex-row @(IsSmallView ? "w-100 justify-content-end":"w-50")">
					<div class="d-flex justify-content-end align-items-center w-50 toolItem">
						<MudButton StartIcon="@Icons.Material.Filled.NotificationAdd" Size="Size.Small" Color="Color.Success" Class="@(IsSmallView ? "btn-new-small":"btn-new")" Variant="Variant.Filled" @onclick="(() =>InsertUpdateDialog(TypeActionsGRID.INSERT))">@(IsSmallView ? "Nuovo" : "Nuovo servizio")</MudButton>
					</div>
					<div class="toolItem @(IsSmallView ? "w-50":"w-100")">
						<BaseTextField MinLenght="0" Bind="@((string value) => OnChangeSearchText(value))" Value="@PagingOptions.Filter.SearchText" Required="false" Label="Ricerca per nome del servizio e premi invio..."></BaseTextField>
					</div>
				</div>
			</div>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Nome servizio</MudTh>
			<MudTh>Descrizione</MudTh>
			<MudTh>Prezzo</MudTh>
			<MudTh>Durata</MudTh>
			<MudTh></MudTh>
		</HeaderContent>

		<RowTemplate Context="element">
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:2vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Nome"]): </b>
					}
					@element.ServiceName
				</div>
			</MudTd>
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Descrizione"]): </b>
					}
					@(element.Description is object && element.Description.Length > 0 ? element.Description : t.Words["Nessuna descrizione"])
				</div>
			</MudTd>
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Prezzo"]): </b>
					}
					@element.Price
				</div>
			</MudTd>
			<MudTd>
				<div style="@(IsSmallView ? "margin-top:1vh;":"")">
					@if (IsSmallView)
					{
						<b style="padding-inline:2vw;">@(t.Words["Durata"]): </b>
					}
					@element.Duration
				</div>
			</MudTd>
			<MudTd>
				<div class="d-flex flex-row @(IsSmallView ? "w-100":"")">
					<div title="@(t.Words["Elimina"])" class="m-3 @(IsSmallView ? "w-50":"")">
						<MudIconButton Class="@(IsSmallView ? "w-100":"")" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" @onclick="(() =>DeleteDialog(element))" Size="Size.Small"></MudIconButton>
					</div>
					<div title="@(t.Words["Modifica"])" class="m-3 @(IsSmallView ? "w-50":"")">
						<MudIconButton Class="@(IsSmallView ? "w-100":"")" Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Variant="Variant.Filled" @onclick="(() =>InsertUpdateDialog(TypeActionsGRID.UPDATE, element))" Size="Size.Small"></MudIconButton>
					</div>
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<div class="d-flex flex-row align-items-center @(IsSmallView ? "":"justify-content-between")">
				<MudPagination SelectedChanged="OnPageChangedHandler" ShowPageButtons="!IsSmallView" Count="@((PagingOptions.TotalCount.Value + PagingOptions.PageSize.Value - 1) / PagingOptions.PageSize.Value)" Class="pa-4" />
				<div class="paginatorPageSize" style="@(IsSmallView ? "width:50%;":"")">
					<MudSelect T="int" Label="@(t.Words["Elementi per pagina"])" ValueChanged="@OnPageSizeHandler" Value="PagingOptions.PageSize.HasValue ? PagingOptions.PageSize.Value : 10" Variant="Variant.Outlined">
						@foreach (var size in pageSizes)
						{
							<MudSelectItem Value="size">@size</MudSelectItem>
						}
					</MudSelect>
				</div>
			</div>
		</PagerContent>
	</MudTable>
}

@code {
	[Parameter]
	public GenericPagedList<DTOService> Services { get; set; }
	[Parameter]
	public GenericPagedFilter<DTOServiceFilter> PagingOptions { get; set; }
	[Parameter]
	public EventCallback<GridAction<DTOService, DTOServiceFilter>> Action { get; set; }
	[Parameter]
	public bool IsLoading { get; set; }
	[Parameter]
	public bool IsSmallView { get; set; }

	private DTOServiceFilter Filter = new();
	private List<int> pageSizes = new List<int> { 5, 10, 20, 50 }; // Opzioni di PageSize
	private List<string> status = new List<string> { "Tutte", "Da confermare", "Confermate", "Rifiutate" }; // Opzioni di conferma
	private string statusSelected = "Tutte";

	protected override async Task OnParametersSetAsync()
	{
		StateHasChanged();
	}

	private async Task OnPageChangedHandler(int currPageIndex)
	{
		if (Action.HasDelegate)
		{
			PagingOptions.Page = currPageIndex;
			var action = new GridAction<DTOService, DTOServiceFilter>(PagingOptions, TypeActionsGRID.PAGE_CHANGED, "");
			await Action.InvokeAsync(action);
		}
	}

	private async Task OnPageSizeHandler(int pageSize)
	{
		PagingOptions.PageSize = pageSize;
		if (Action.HasDelegate)
		{
			var action = new GridAction<DTOService, DTOServiceFilter>(PagingOptions, TypeActionsGRID.PAGE_SIZE_CHANGED, "");
			await Action.InvokeAsync(action);
		}
	}


	private async Task OnChangeSearchText(string value)
	{
		Filter.SearchText = value;
		var action = new GridAction<DTOService, DTOServiceFilter>(Filter, TypeActionsGRID.FILTER, "");
		await ChangeFilter(action);

	}

	private async Task ChangeFilter(GridAction<DTOService, DTOServiceFilter> filter)
	{
		if (Action.HasDelegate)
		{
			await Action.InvokeAsync(filter);
		}
	}


	private async Task DeleteDialog(DTOService service)
	{
		var callback = EventCallback.Factory.Create<bool>(this, ((bool value) => DeleteCallback(value, service)));
		string text = $"<b>{t.Words["Irreversibile"]}</b><br/>*{t.Words["Info cancellazione"]}";
		var modal = new GenericModal<bool>(callback, text, t.Words["Elimina servizio"], TypeActionsGRID.GENERIC_DELETE);

		var dialogParameters = new DialogParameters
			{
				{ "Modal", modal },
				{ "IsSmallView", IsSmallView }
            };

		var options = new DialogOptions
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center
			};

		var result = await DialogService.Show<ConfirmModal>(t.Words["Elimina servizio"], dialogParameters, options).Result;
	}

	private async Task DeleteCallback(bool value, DTOService service)
	{
		if (Action.HasDelegate && value)
		{
			var list = new List<DTOService>();
			list.Add(service);

			var action = new GridAction<DTOService, DTOServiceFilter>(list, TypeActionsGRID.SINGLE_DELETE, "");
			await Action.InvokeAsync(action);
		}
	}

	private async Task InsertUpdateDialog(TypeActionsGRID typeActionGrid, DTOService service = null)
	{
		var callback = EventCallback.Factory.Create<DTOService>(this, ((DTOService value) => InsertUpdateCallback(value, typeActionGrid)));
		string text = $"<b>{t.Words["Irreversibile"]}</b><br/>{t.Words["Conferma elimina servizio"]}";
		var modal = new GenericModal<DTOService>(callback, text, "", typeActionGrid, service);

		var dialogParameters = new DialogParameters
			{
				{ "Modal", modal },
				{ "IsSmallView", IsSmallView }// Passa l'oggetto direttamente
            };

		var options = new DialogOptions
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center
			};

		var result = await DialogService.Show<ServiceModalInsertUpdate>(t.Words["Modifica servizio"], dialogParameters, options).Result;
	}

	private async Task InsertUpdateCallback(DTOService service, TypeActionsGRID actiongrid)
	{
		if (Action.HasDelegate && service != null)
		{
			var list = new List<DTOService>();
			list.Add(service);

			var action = new GridAction<DTOService, DTOServiceFilter>(list, actiongrid, "");
			await Action.InvokeAsync(action);
		}
	}


}

<style>
	.tableClass {
		border: 1px solid lightgray !important;
		border-radius: 25px !important;
	}

	.toolbarCss {
		background: linear-gradient(45deg, #006, transparent);
		border-radius: 25px 25px 0px 0px;
		color: white;
		padding-inline: 2vw;
	}

	.toolItem{
		padding-inline:2vw;
	}

	.mud-table-root .mud-table-head {
		display: table-header-group;
		background-color: #0066FF;
	}

		.mud-table-root .mud-table-head .mud-table-cell {
			color: white !important;
			font-weight: 500;
			line-height: 1.5rem;
		}

	.paginatorPageSize {
		width: 15%;
		padding-inline: 2vw;
	}

	.mud-table-container {
		max-height: 75vh;
		height: 75vh;
	}


	.mud-toolbar-gutters {
		padding-left: 0px !important;
		padding-right: 0px !important;
	}


	.mud-input-control-input-container {
		background-color: white !important;
		border-radius: 15px !important;
	}
	
	.btn-new-small{
		height:75%;
		margin-top: 3px !important;
	}


	@@media (max-width: 960px) {
		.mud-sm-table .mud-table-cell {
			justify-content: unset !important;
			padding: 0px 16px !important;
		}
	}

	.mud-input > input.mud-input-root-outlined, div.mud-input-slot.mud-input-root-outlined {
		padding: 10px !important;
	}	
</style>