@using Microsoft.AspNetCore.Components.Routing
@using MudBlazor;
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.ViewModel.Interface.Home;
@using Microsoft.AspNetCore.Components.Authorization
@using ReserGO.UI.Utils
@using ReserGO.UI.Login
@using ReserGO.ViewModel.Interface.Authentication
@using ReserGO.Miscellaneous.Enum
@using ReserGO.Utils.DTO.Utils
@using ReserGO.UI.FiltersComponent
@using ReserGO.UI.MainHome.Containers
@inject NavigationManager NaviMngr;
@inherits BaseComponentChild<IHomeViewModel, object>

<div class="d-flex flex-column loginContainter">


    <BaseComponent TViewModel="IHeaderViewModel" TModel="object">
        <Content>
            <Header Title="Studio Rossi" RightTitle="Accedi o Registrati" RightTitleEnabled="true" BackgroundColor="#0066FF" ColorFont="@(CurrentViewModel.UserIs(RoleConst.GUEST) ? "#FFFFFF":"#0066FF")" GoToHome="ChangeComponentHome" OpenMenu="ToggleDrawer"></Header>
        </Content>
    </BaseComponent>

    @if (CurrentViewModel.User.Roles != null && !CurrentViewModel.UserIs(RoleConst.GUEST))
    {
        @if (CurrentViewModel.ItemsMenu is object && CurrentViewModel.ItemsMenu.Count() > 0)
        {
            <MudPaper Height="100%" Style="padding:0px; height:100%;">
                <MudDrawerContainer Class="h-100">
                    <MudDrawer @bind-Open="@CurrentViewModel.Open" Overlay="false" Elevation="@(CurrentViewModel.IsSmallView ? 1 : 8)" Variant="@(CurrentViewModel.IsSmallView ? DrawerVariant.Temporary : DrawerVariant.Mini)" Class="mainContent">
                        <MudNavMenu Class="mudDrawer">
                            @if (CurrentViewModel.IsSmallView)
                            {
                                <MudNavLink OnClick="ToggleDrawer">
                                    <div class="d-flex align-items-center textNavMenu">
                                        <MudIcon Icon="@ItemMenuSmall" Style="font-size: x-large; color:white;" />
                                    </div>
                                </MudNavLink>
                            }

                            @foreach (var item in CurrentViewModel.ItemsMenu)
                            {
                                <MudNavLink OnClick="() => ChangeComponent(item)">
                                    <div class="d-flex align-items-center textNavMenu">

                                        <MudIcon Icon="@item.Icon" Style="font-size: x-large; color:white;" />

                                        @if (CurrentViewModel.Open)
                                        {
                                            <span style="padding-inline: 10px;">@item.Text</span>
                                        }
                                    </div>
                                </MudNavLink>
                            }
                        </MudNavMenu>
                    </MudDrawer>
                    <MudMainContent Class="row content mudblazor-main-content mainContent" Style="height:100%;">
                        <div class="d-flex w-100 h-100" @onclick="CloseToggle">
                            @CurrentViewModel.Content
                        </div>
                    </MudMainContent>   
                </MudDrawerContainer>
            </MudPaper>
        }
    }
    else
    {
        @if (CurrentViewModel.ItemsMenu is null || CurrentViewModel.ItemsMenu.Count() == 0 || (CurrentViewModel.ItemsMenu is object && CurrentViewModel.SelectedItem.Text.ToLower().Contains("home")))
        {
            <MainHomeContainer />
        }
        else
        {
            @CurrentViewModel.Content
        }
    }
</div>
<BaseComponent TViewModel="ILoginViewModel" TModel="DTOLoginRequest">
    <Content>
        <CardLogin />
    </Content>
</BaseComponent>
@code {

    private string ItemMenuSmall = Icons.Material.Filled.ArrowBack;


    private void ToggleDrawer()
    {
        CurrentViewModel.Open = !CurrentViewModel.Open;
    }

    private void CloseToggle()
    {
        if (CurrentViewModel.IsSmallView && CurrentViewModel.Open)
            CurrentViewModel.Open = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.OnInitialize();
    }


    public void ChangeComponent(DTOSettingMenu menu)
    {
        if (CurrentViewModel.IsSmallView)
            CurrentViewModel.Open = false;
        CurrentViewModel.SelectedItem = menu;
        CurrentViewModel.ChangeComponent();
    }

    public void ChangeComponentHome()
    {
        CurrentViewModel.SelectedItem = CurrentViewModel.ItemsMenu.SingleOrDefault(x => x.Text.ToLower() == "home");
        CurrentViewModel.ChangeComponent();
    }
}

<style>
    .loginContainter {
        width: 100%;
        height: 100%;
    }

    .textNavMenu {
        color: white;
        font-size: large;
        padding-left: 10px;
        font-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;
    }

    .mud-nav-link.mud-ripple {
        padding-left: 0;
    }

    .mudDrawer {
        background-color: #0066FF;
    }

    .mud-drawer-content {
        background-color: #0066FF;
    }

    .mud-drawer.mud-drawer-pos-left.mud-drawer--open.mud-drawer--initial.mud-drawer-md.mud-drawer-clipped-never.mud-elevation-1.mud-drawer-mini {
        border-radius: 25px;
        height: 91%;
    }

    .iconDrawer {
        color: white;
    }

    .mud-paper.mud-elevation-1 {
        padding-top: 5px;
    }

    .mud-main-content {
        padding: 0 !important;
    }

    .mud-nav-link.mud-ripple {
        padding-left: 0;
        padding-block: 20px !important;
    }

    .mainContent {
        height: 100% !impostant;
    }

    .mud-drawer.mud-drawer-mini {
        height: 92% !important;
        transition: width 225ms cubic-bezier(0, 0, 0.2, 1);
    }

        .mud-drawer.mud-drawer-mini.mud-drawer-pos-left.mud-drawer--open {
            width: var(--mud-drawer-width-left);
            border-radius: 15px 15px 0px 0px;
        }

    .mud-drawer-open-mini-md-left.mud-drawer-left-clipped-never {
        height: 100% !important;
    }

    .mud-drawer-close-mini-md-left .mud-main-content {
        margin-left: 0px !important
    }

    .mud-drawer-open-mini-md-left .mud-main-content {
        height: 100%;
    }

    .mud-paper.mud-elevation-1 {
        background: linear-gradient(to bottom, #EEEEEE 50%, #FFFFFF 50%);
    }

</style>
