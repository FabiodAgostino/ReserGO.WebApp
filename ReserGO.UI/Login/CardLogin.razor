@using MudBlazor
@using ReserGO.DTO
@using ReserGO.Miscellaneous.Enum;
@using ReserGO.Miscellaneous.Model;
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Authentication
@using ReserGO.DTO;
@using System.ComponentModel.DataAnnotations
@inherits BaseComponentChild<ILoginViewModel, DTOLoginRequest>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "dialogClassSmall":"dialogClass")" OnBackdropClick="@HandleBackdropClick" Visible="CurrentViewModel.IsOpen" Options="@Options">
    <DialogContent>

        <div class="d-flex @(CurrentViewModel.IsSmallView ? "flex-column cardLoginSmall":"cardLogin") justify-content-between p-2 ">
            <div class="d-flex flex-column loginSide @(CurrentViewModel.IsSmallView ? "w-100":"") ">

                <div class="d-flex flex-row align-items-center w-100">
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="@(CurrentViewModel.IsSmallView ? "iconCardLoginSmall":"iconCardLogin")"></MudIcon>
                    <span class="titleCardLogin" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large;":"")">Log-in</span>
                </div>
                <div class="d-flex flex-column @(CurrentViewModel.IsSmallView ? "justify-content-around p-3 ":"p-5") w-100 h-100">
                    <MudForm @ref="form" @bind-IsValid="@_success">
                        <div class="d-flex flex-column pt-2">
                            <span class="textInputCardLogin" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large;":"")">Email:</span>
                            <div class="inputSpace">
                                <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Email" Label="E-mail" class="inputText"
                                Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Required="false" 
                                RequiredError="Inserire Email corretta" OnKeyDown="HandleKeyDown"/>

                                @if (CurrentViewModel.LoginError != null && CurrentViewModel.LoginError.ToLower().Contains("email"))
                                {
                                    <div class="d-flex w-100 justify-content-end p-1">
                                        <bold style="color:white">@CurrentViewModel.LoginError!</bold>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="d-flex flex-column pt-3">
                            <span class="textInputCardLogin" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large;":"")">Password:</span>
                            <div class="inputSpace">
                                <MudTextField @bind-Value="CurrentViewModel.SelectedItem.Password"
                                              InputType="InputType.Password"
                                              Required="false"
                                              Immediate="true"
                                              Label="inserisci password"
                                              class="inputText"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              OnKeyDown="HandleKeyDown">
                                </MudTextField>
                                @if (CurrentViewModel.LoginError != null && CurrentViewModel.LoginError.ToLower().Contains("password"))
                                {
                                    <div class="d-flex w-100 justify-content-end p-1">
                                        <bold style="color:white">@CurrentViewModel.LoginError!</bold>
                                    </div>
                                }
                            </div>
                        </div>
                    </MudForm>
                    <div class="d-flex justify-content-center pt-10 align-items-center">
                        <MudButton Disabled="@(!_success)" style="@(CurrentViewModel.IsSmallView ? "width:100%;" :"width:15vw;")" Class="@GetButtonClass()" type="submit" @onclick="@(()=>Login(EnumLoginType.LOGIN))">Accedi</MudButton>
                    </div>
                </div>

            </div>

            @if (CurrentViewModel.IsSmallView)
            {
                <MudDivider DividerType="DividerType.Middle" Class="my-6" style="border-width:3px" />


                <div class="d-flex flex-row justify-content-center w-100" style="height:5%">
                    <span class="titleCardRegisterSmall">Non sei registrato?</span>
                </div>

                <div class="d-flex flex-row w-100" style="height:25%">

                    <div class="d-flex align-items-center justify-content-center" style="width: 40%;padding-inline:2vw;">
                        <MudIcon Icon="@Icons.Material.Filled.PersonAddAlt" Class="iconCardLoginSmall"></MudIcon>
                    </div>

                    <div class="d-flex flex-column justify-content-center align-items-center p-1 w-50">
                        <button class="loginButtonSmall btn-primary" type="submit" @onclick="OpenDialogAsync">Registrati</button>
                    </div>

                </div>
            }
            else
            {

                <div class="d-flex flex-column justify-content-center h-100">
                    <div class="loginDivider"></div>
                </div>


                <div class="d-flex flex-column registerSide">

                    <div class="d-flex flex-column align-items-end" style="padding-inline:2vw;">
                        <MudIcon Icon="@Icons.Material.Filled.PersonAddAlt" Class="iconCardRegister"></MudIcon>
                    </div>

                    <div class="d-flex flex-column justify-content-center h-100">
                        <span class="titleCardRegister">Non sei registrato?</span>
                        <span class="descRegister">Esegui ora la registrazione in pochi passaggi</span>
                    </div>

                    <div class="d-flex flex-column justify-content-start p-1 w-100 h-100">
                        <div class="d-flex justify-content-center align-items-center p-2" style="height:50%">
                            <button class="loginButton btn-primary" type="submit" @onclick="OpenDialogAsync">Registrati</button>
                        </div>
                    </div>

                </div>
            }
        </div>
    </DialogContent>
</MudDialog>

<BaseComponent TViewModel="IRegisterViewModel" TModel="DTOUser">
    <Content>
        <RegisterDialog />
    </Content>
</BaseComponent>

@code {
    MudForm form;
    private bool _success = false;

    protected override async Task OnInitializedAsync()
    {
        await CurrentViewModel.RegisterOnScreenResize(800);
    }

    void HandleBackdropClick(MouseEventArgs eArgs)
    {
        CurrentViewModel.IsOpen = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Login(EnumLoginType.LOGIN);
        }
    }

    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };
    private async Task Login(EnumLoginType typeAction)
    {
        await CurrentViewModel.Login(CurrentViewModel.SelectedItem);
    }

    private async Task OpenDialogAsync()
    {
        CurrentViewModel.IsOpen = false;
        await CurrentViewModel.OpenModal();
    }

    private string GetButtonClass()
    {
        return (CurrentViewModel.IsSmallView ? "loginButtonSmall" : "loginButton") + " btn-primary";
    }

}



<style>
    .mud-form {
        flex-direction: unset !important;
    }

    .inputText {
        border-radius: 15px !important;
        background-color: white;
    }

    .inputSpace {
        height: 45px;
    }

    .mud-input-outlined-border {
        border-radius: 15px !important;
    }

    .dialogClass {
        border-radius: 25px !important;
        background-color: #0066FF !important;
    }

    .dialogClassSmall {
        border-radius: 25px !important;
        max-width: 100%;
        width: 95% !important;
        height: 100% !important;
        background-color: #0066FF !important;
    }

    .mud-dialog .mud-dialog-content {
        overflow: hidden !important;
    }

</style>