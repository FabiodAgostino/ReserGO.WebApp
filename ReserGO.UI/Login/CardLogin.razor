@using MudBlazor 
@using ReserGO.DTO
@using ReserGO.Miscellaneous.Enum;
@using ReserGO.Miscellaneous.Model;
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Authentication
@inherits BaseComponentChild<ILoginViewModel, DTOLoginRequest>
<MudDialog Class="dialogClass" OnBackdropClick="@HandleBackdropClick" Visible="CurrentViewModel.IsOpen" Options="@Options">
    <DialogContent>
        <div class="d-flex justify-content-between p-2 cardLogin">
            <div class="d-flex flex-column loginSide">

                <div class="d-flex flex-row align-items-center w-100">
                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="iconCardLogin"></MudIcon>
                    <span class="titleCardLogin">Log-in</span>
                </div>

                <div class="d-flex flex-column p-5 w-100 h-100">
                    <span class="textInputCardLogin">Nome utente:</span>
                    <MudTextField @bind-Value="CurrentViewModel.User.Username" class="inputText"  Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    @if (CurrentViewModel.LoginError != null && CurrentViewModel.LoginError.ToLower().Contains("utente"))
                    {
                        <bold>@CurrentViewModel.LoginError</bold>
                    }

                    <span class="textInputCardLogin">Password:</span>
                    <MudTextField @bind-Value="CurrentViewModel.User.Password" InputType="InputType.Password" class="inputText" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    @if (CurrentViewModel.LoginError != null && CurrentViewModel.LoginError.ToLower().Contains("password"))
                    {
                        <bold>@CurrentViewModel.LoginError</bold>
                    }

                    <div class="d-flex justify-content-center align-items-center p-3 h-100">
                        <button class="loginButton btn-primary" type="submit" @onclick="@(()=>Login(EnumLoginType.LOGIN))">Accedi</button>
                    </div>
                </div>

            </div>


            <div class="d-flex flex-column justify-content-center h-100">
                <div class="loginDivider"></div>
            </div>


            <div class="d-flex flex-column registerSide">

                <div class="d-flex flex-column align-items-end" style="padding-inline:2vw;">
                    <MudIcon Icon="@Icons.Material.Filled.PersonAddAlt" Class="iconCardRegister"></MudIcon>
                </div>
                
                <div class="d-flex flex-column justify-content-center h-100">
                    <span class="titleCardRegister">Non sei registrato?</span>
                    <span class="descRegister">Esegui ora la registrazione in pochi passaggi</span>
                </div>

                <div class="d-flex flex-column justify-content-start p-1 w-100 h-100">
                    <div class="d-flex justify-content-center align-items-center p-2" style="height:50%">
                        <button class="loginButton btn-primary" type="submit">Registrati</button>
                    </div>
                </div>

            </div>
        </div>
    </DialogContent>
</MudDialog>




@code {
    void HandleBackdropClick(MouseEventArgs eArgs)
    {
        CurrentViewModel.IsOpen = false;
    }

    public DialogOptions Options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraLarge,
            NoHeader = true,
        };
    private async Task Login(EnumLoginType typeAction)
    {
        await CurrentViewModel.Login(CurrentViewModel.User);
    }

}



<style>

    .inputText{
        border-radius: 15px !important;
        background-color:white;
    }

    .mud-input-outlined-border{
        border-radius: 15px !important;
    }

    .dialogClass {
        border-radius: 25px !important;
    }

  .mud-dialog .mud-dialog-content {
        overflow: hidden !important;
    }
</style>