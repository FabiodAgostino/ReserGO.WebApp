@using ReserGO.Miscellaneous.Model
@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ReserGO.Utils.DTO.Utils
@using ReserGO.Service.Interface.Service
@inject ITranslateService t
@inherits BaseComponentChild<IRegisterViewModel, DTOUser>

<MudDialog Class="@(CurrentViewModel.IsSmallView ? "registerDialogCssSmall":"registerDialogCss")" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler">
    <TitleContent>
        <div class="d-flex flex-column" style="padding-inline: 0.5vw;">
            <span class="dialogTitleRegister" style="@(CurrentViewModel.IsSmallView ? "font-size:x-large":"")">@(t.Words["Registrazione utente"])</span>
        </div>
    </TitleContent>
    <DialogContent>

        <div class="d-flex dialogRegisterContainer p-1 @(CurrentViewModel.IsSmallView ? "flex-column": "")">
            <div class="d-flex flex-column justify-content-around columnFormRegister" style="@(CurrentViewModel.IsSmallView ? "width:100%; overflow:auto":"width:80%;")">

                <MudForm @ref="form" @bind-IsValid="@_success">
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FirstName = value)" Label="Nome" />
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.LastName = value)" Label="Cognome" />
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.Address = value)" Label="Indirizzo" />
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <MudDatePicker @bind-Date="@CurrentViewModel.SelectedItem.DateOfBirth" Immediate="true" Label="Data di nascita" Required="true" RequiredError="Inserire data di nascita" Variant="Variant.Outlined" />
                            </div>
                        </MudItem>
                        @if (CurrentViewModel.ConfigurationServer.ExtendedInput == ExtendedInput.ADVANCED)
                        {
                            <MudItem xs="12" sm="6">
                                <div class="inputSpace">
                                    <RegioneCombo OnRegionSelected="@((string regione) => _regione = regione)" />
                                </div>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <div class="inputSpace">
                                    <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                                        <Content>
                                            <ComuneCombo Regione="@_regione" OnComuneSelected="@((string? comune) => CurrentViewModel.SelectedItem.CityOfBirth = comune ?? "")" />
                                        </Content>
                                    </BaseComponent>
                                </div>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <div class="inputSpace">
                                    <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                                        <Content>
                                            <ComuneCombo OnComuneSelected="@((string? comune) => CurrentViewModel.SelectedItem.CityOfBirth = comune ?? "")" />
                                        </Content>
                                    </BaseComponent>
                                </div>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <div class="inputSpace" style="margin-top:6px">
                                    <BaseComponent TViewModel="INazioneViewModel" TModel="DTONazione">
                                        <Content>
                                            <NationalityCombo OnNazioneSelected="@((string? nazione) => OnNazioneChanged(nazione))" Label="@(t.Words["Luogo di nascita"])" />
                                        </Content>
                                    </BaseComponent>
                                </div>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <div class="inputSpace">
                                    <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.FiscalCode"
                                                  Required="true"
                                                  Pattern="@GetMinLenght()"
                                                  RequiredError="inserire codice fiscale"
                                                  ErrorText="@GetErrorText()"
                                                  Label="@(t.Words["Codice fiscale"])"
                                                  Error="GetError()"
                                                  Immediate="true"
                                                  MaxLength="MaxLenghtCF"
                                                  InputType="InputType.Text"
                                                  Variant="Variant.Outlined"
                                                  Margin="Margin.Dense"
                                                  Disabled="!EnableCF" />
                                </div>
                            </MudItem>
                        }

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <BaseTextField Bind="@((string? value) => CurrentViewModel.SelectedItem.PhoneNumber = value)" Label="Numero di telefono" Regex="^(\d{10}|3\d{9})$" NumericField="true" CustomErrorText="@(t.Words["Inserisci un numero valido"])" />
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                                    <Content>
                                        <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Email" Label="E-mail" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Required="true" RequiredError="Inserire Email corretta" Validation="@(new EmailAddressAttribute() { ErrorMessage = t.Words["la mail non è valida"] })" />
                                    </Content>
                                </BaseComponent>
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Password" Required="true" RequiredError="inserire password" Label="Password" Immediate="true" @ref="pwField1" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </div>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.ConfirmPassword" Required="true" InputType="InputType.Password" Immediate="true" Validation="@(new Func<string, string>(PasswordMatch))" RequiredError="@(t.Words["La password non corrisponde"])" Label="Conferma password" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </div>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <MudCheckBox @bind-Value="_privacy" Required="true" RequiredError=""><a href="#">@(t.Words["Accetto le condizioni"])</a> </MudCheckBox>
                            </div>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <div class="inputSpace">
                                <MudCheckBox @bind-Value="_trattamentoDati" Required="true" RequiredError=""><a href="#">@(t.Words["Acconsento al trattamento"])</a></MudCheckBox>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudForm>

            </div>
                @if (CurrentViewModel.IsSmallView)
                {
                    <div class="s-flex flex-column" >
                        <div class="d-flex justify-content-center align-items-center p-2" >
                        <MudButton OnClick="Cancel" class="cancelButtonSmall btn-primary" type="submit">@(t.Words["Annulla"])</MudButton>
                        </div>

                        <div class="d-flex justify-content-center align-items-center p-2" >
                        <MudButton OnClick="Submit" class="registerButtonSmall btn-primary mt-1" Disabled="@(!_success)" type="submit">@(t.Words["Salva"])</MudButton>
                        </div>
                    </div>
                }


            
            <div class="d-flex flex-column justify-content-center h-100" style="@(CurrentViewModel.IsSmallView ? "display:none !important":"")">
                <div class="registerDivider"></div>
            </div>
            

            <div class="d-flex flex-column columnFormRegister" style="width:30%;@(CurrentViewModel.IsSmallView ? "display:none !important":"")">

                <div class="d-flex flex-column align-items-center" style="padding-inline:2vw; margin-left:3vw; @(CurrentViewModel.IsSmallView ? "display:none !important":"")">
                    <MudIcon Icon="@Icons.Material.Filled.PersonAddAlt" Class="iconDialogRegister"></MudIcon>
                </div>

                <div class="d-flex justify-content-center align-items-center p-2" style="height:40%; margin-left: 1vw;">
                    <MudButton OnClick="Cancel" class="cancelButton btn-primary" style="width:15vw;" type="submit">@(t.Words["Annulla"])</MudButton>
                </div>

                <div class="d-flex justify-content-center align-items-center p-2" style="height:20%;margin-left: 1vw;">
                    <MudButton OnClick="Submit" class="registerButton btn-primary" Disabled="@(!_success)" style="width:15vw;" type="submit">@(t.Words["Salva"])</MudButton>
                </div>
            </div>

        </div>
    </DialogContent>

</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string _regione { get; set; }

    private void Submit() => CurrentViewModel.Register();

    private void Cancel() => CurrentViewModel.Close();

    MudTextField<string> pwField1;
    MudForm form;
    private bool _success;
    private bool _privacy { get; set; }
    private bool _trattamentoDati { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentViewModel.RegisterOnScreenResize(800);
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Inerire password!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Inserire almeno 8 caratteri";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Inerire almeno una maiuscola";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Inerire almeno una minuscola";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Inserire almeno un numero";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "La passwords non corrisponde";
        return null;
    }

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.Close();
    }

    private string RegexEmail => "^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";

    private bool IsItalian => CurrentViewModel.SelectedItem.Nationality == "Italia";

    private bool EnableCF;

    private string RegexCf = "";

    private int MaxLenghtCF = 30;

    public bool GetError()
    {
        if (CurrentViewModel.SelectedItem == null || String.IsNullOrEmpty(CurrentViewModel.SelectedItem.FiscalCode))
            return false;

        Regex regex = new Regex(RegexCf);
        return !regex.IsMatch(CurrentViewModel.SelectedItem.FiscalCode);
    }


    private string GetMinLenght()
    {
        return RegexCf;
    }

    private string GetErrorText()
    {
        return "codice fiscale non valido";
    }

    private void OnNazioneChanged(string? nazione)
    {

        CurrentViewModel.SelectedItem.Nationality = nazione ?? string.Empty;

        if (!IsItalian && CurrentViewModel.SelectedItem.Nationality.Length > 1)
        {
            EnableCF = true;
            RegexCf = "^[a-zA-Z0-9]+$";
            MaxLenghtCF = 30;
        }
        else if (IsItalian)
        {
            EnableCF = true;
            RegexCf = @"^[a-zA-Z]{6}\d{2}[a-eh-lmprstA-EHLMPRST]{1}\d{2}[a-zA-Z]{1}\d{3}[a-zA-Z]{1}$";
            MaxLenghtCF = 16;
        }
    }
}


<style>
    .registerDialogCss {
        width: 50vw;
        height: 55vh;
        max-width: 50vw !important;
        border-radius: 30px !important;
    }

    .registerDialogCssSmall {
        width: 90vw;
        height: 90vh;
        max-width: 90vw !important;
        border-radius: 30px !important;
    }

    .mud-input > input.mud-input-root-outlined.mud-input-root-adorned-end, div.mud-input-slot.mud-input-root-outlined.mud-input-root-adorned-end {
        
    }

    td {
        padding: 9px;
        margin-bottom: 15px;
    }

    .inputSpace {
        height: 45px;
    }

    .iconDialogRegister{
        font-size:7vw !important;
    }

    .mud-input > input.mud-input-root-outlined, div.mud-input-slot.mud-input-root-outlined {
        padding: 10px !important;
    }
</style>