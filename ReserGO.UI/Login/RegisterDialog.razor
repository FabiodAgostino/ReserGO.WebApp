@using ReserGO.Miscellaneous.Model
@using ReserGO.UI.FiltersComponent
@using MudBlazor
@using ReserGO.ViewModel.Interface.FiltersComponent
@using ReserGO.ViewModel.Interface.Register
@using ReserGO.DTO
@using ReserGO.Utils.UI
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ReserGO.Utils.DTO.Utils
@inherits BaseComponentChild<IRegisterViewModel, DTOUser>

<MudDialog Class="registerDialogCss" Visible="CurrentViewModel.IsOpen" OnBackdropClick="OnBackdropClickHandler">
    <TitleContent>
        <div class="d-flex flex-column" style="padding-inline: 0.5vw;">
            <span class="dialogTitleRegister">Registrazione Utente</span>
        </div>
    </TitleContent>
    <DialogContent>

        <div class="d-flex dialogRegisterContainer p-1">
            <div class="d-flex flex-column justify-content-around columnFormRegister" style="width:80%;">

                <MudForm @ref="form" @bind-IsValid="@_success">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FirstName = value)" Label="Nome"/>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.LastName = value)" Label="Cognome"/>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.Address = value)" Label="Indirizzo"/>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <MudDatePicker @bind-Date="@CurrentViewModel.SelectedItem.DateOfBirth" Immediate="true" Label="Data di nascita" Required="true" RequiredError="Inserire data di nascita" Variant="Variant.Outlined" />
            </div>
        </MudItem>

            <MudItem xs="12" sm="6">
                <div class="inputSpace">
                    <BaseComponent TViewModel="INazioneViewModel" TModel="DTONazione">
                        <Content>
                            <NationalityCombo  OnNazioneSelected="@((string? nazione) => CurrentViewModel.SelectedItem.Nationality = nazione ?? "")" />
                        </Content>
                    </BaseComponent>
                </div>
            </MudItem>

        @if (CurrentViewModel.ConfigurationServer.ExtendedInput == ExtendedInput.ADVANCED)
        {
            <MudItem xs="12" sm="6">
                <div class="inputSpace">
                    <RegioneCombo OnRegionSelected="@((string regione) => _regione = regione)" />
                </div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="inputSpace">
                    <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                        <Content>
                            <ComuneCombo Regione="@_regione" OnComuneSelected="@((string? comune) => CurrentViewModel.SelectedItem.CityOfBirth = comune ?? "")" />
                        </Content>
                    </BaseComponent>
                </div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="inputSpace">
                    <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                        <Content>
                            <ComuneCombo  OnComuneSelected="@((string? comune) => CurrentViewModel.SelectedItem.CityOfBirth = comune ?? "")" />
                        </Content>
                    </BaseComponent>
                </div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="inputSpace">
                    @if(true)
                    {

                        <BaseComponent TViewModel="INazioneViewModel" TModel="DTONazione">
                            <Content>
                                <NationalityCombo  OnNazioneSelected="@((string? nazione) => CurrentViewModel.SelectedItem.Nationality = nazione ?? "")" />
                            </Content>
                        </BaseComponent>

                        <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FiscalCode = value)" Label="Codice fiscale" Regex="^[A-Z]{6}\d{2}[A-EHLMPRST]{1}\d{2}[A-Z]{1}\d{3}[A-Z]{1}$"/>
                    }
                    else
                    {
                        <BaseTextField Bind="@((string value) => CurrentViewModel.SelectedItem.FiscalCode = value)" Label="Codice fiscale" />
                    }
                </div>
            </MudItem>
        }

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <BaseTextField Bind="@((string? value) => CurrentViewModel.SelectedItem.PhoneNumber = value)" Label="Numero di telefono" Regex="^(\d{10}|3\d{9})$" NumericField="true" CustomErrorText="Inserisci un numero valido"/>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <BaseComponent TViewModel="IComuneComboViewModel" TModel="DTOComuneProvincia">
                    <Content>
                        <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Email" Label="E-mail" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Required="true" RequiredError="Inserire Email corretta" Validation="@(new EmailAddressAttribute() { ErrorMessage = "L'email non è valida'" })"/>
                    </Content>
                </BaseComponent>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.Password" Required="true" RequiredError="inserire password" Label="Password" Immediate="true" @ref="pwField1" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            </div>
        </MudItem>

        <MudItem xs="12" sm="6">
            <div class="inputSpace">
                <MudTextField @bind-Value="@CurrentViewModel.SelectedItem.ConfirmPassword" Required="true" InputType="InputType.Password" Immediate="true" Validation="@(new Func<string, string>(PasswordMatch))" RequiredError="La password non corrisponde" Label="Conferma password" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            </div>
        </MudItem>
    </MudGrid>
</MudForm>
            </div>

            <div class="d-flex flex-column justify-content-center h-100">
                <div class="registerDivider"></div>
            </div>

            <div class="d-flex flex-column columnFormRegister" style="width:30%;">

                <div class="d-flex flex-column align-items-center" style="padding-inline:2vw; margin-left:3vw;">
                    <MudIcon Icon="@Icons.Material.Filled.PersonAddAlt" Class="iconDialogRegister"></MudIcon>
                </div>

                <div class="d-flex justify-content-center align-items-center p-2" style="height:40%; margin-left: 2vw;">
                    <MudButton OnClick="Cancel" class="cancelButton btn-primary" style="width:15vw;" type="submit">Annulla</MudButton>
                </div>

                <div class="d-flex justify-content-center align-items-center p-2" style="height:20%;margin-left: 2vw;">
                    <MudButton OnClick="Submit" class="registerButton btn-primary" Disabled="@(!_success)" style="width:15vw;" type="submit">Salva</MudButton>
                </div>
            </div>


        </div>
    </DialogContent>

</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string _regione { get; set; }

    private void Submit() => CurrentViewModel.Register();

    private void Cancel() => CurrentViewModel.Close();

    MudTextField<string> pwField1;
    MudForm form;
    private bool _success;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Inerire password!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Inserire almeno 8 caratteri";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Inerire almeno una maiuscola";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Inerire almeno una minuscola";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Inserire almeno un numero";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "La passwords non corrisponde";
        return null;
    }

    private async Task OnBackdropClickHandler(MouseEventArgs e)
    {
        CurrentViewModel.Close();
    }

    private string RegexEmail => "^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";

}


<style>
    .registerDialogCss {
        width: 50vw;
        height: 55vh;
        max-width: 50vw !important;
        border-radius: 30px !important;
    }

    .mud-input > input.mud-input-root-outlined.mud-input-root-adorned-end, div.mud-input-slot.mud-input-root-outlined.mud-input-root-adorned-end {
        padding: 10px !important;
    }

    td {
        padding: 9px;
        margin-bottom: 15px;
    }

    .inputSpace {
        height: 45px;
    }
</style>