@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.UI.Admin;


<div class="d-flex flex-column homeLoginContainer">
    <div class="d-flex flex-column homeLoginBody">

        <div class="d-flex @(IsSmallView ? "flex-column w-100 h-100":"flex-row topSideLogin")">

            <div class="d-flex align-items-center w-100 h-100 @(IsSmallView ? "flex-column":"justify-content-around")">

                <div class="d-flex p-2 @(IsSmallView ? "w-100":"")" style="@(IsSmallView ? "height:25%;":"")">
                    <CardReserGo Title="Prenotazione" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon" Callback="@(() => ClickChangeComponent("Prenotazione"))" IsSmallView="@IsSmallView" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />

                </div>

                <div class="d-flex p-2 @(IsSmallView ? "w-100":"")" style="@(IsSmallView ? "height:25%;":"")">
                    <CardReserGo Title="Storico prenotazioni" Description="Storico delle richieste di prenotazione" Icon="@InformationIcon" Callback="@(() => ClickChangeComponent("Storico"))" IsSmallView="@IsSmallView" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />

                </div>

                @if (IsSmallView)
                {
                    <div class="d-felx flex-column h-50 w-100">

                        <div class="d-flex justify-content-center p-2 h-50 informationHomeContiner">
                            <CardReserGo Title="Inserisci risorsa" Description="Inserisci una nuova risorsa" Icon="@ReservationIcon" IsSmallView="@IsSmallView" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                        </div>

                        <div class="d-flex justify-content-center p-2 h-50 informationHomeContiner">
                            <CardReserGo Title="Inserisci comunicazione" Description="Il giorno xx lo studio resterà chiuso" Icon="@ComunicationIcon" IsSmallView="@IsSmallView" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                        </div>
                    </div>
                }
            </div>

        </div>

        @if (!IsSmallView)
        {
            <div class="d-flex flex-row justify-content-around bottomSideLogin">

                <div class="d-flex justify-content-around align-items-center w-100 h-100">

                    <CalendarHome />

                    <div class="d-flex align-items-center p-2">
                        <CardReserGo Title="Inserisci risorsa" Description="Inserisci una nuova risorsa" Icon="@ReservationIcon" CardStyle="width:19vw;height:44vh" IsSmallView="@IsSmallView" Vertical="@(IsSmallView ? false : true )" />
                    </div>
                    <div class="d-flex align-items-center p-2" onclick="@OpenModalComunications">
                        <CardReserGo Title="Inserisci comunicazione" Description="Il giorno xx lo studio resterà chiuso" Icon="@ComunicationIcon" CardStyle="width:19vw;height:44vh" IsSmallView="@IsSmallView" Vertical="@(IsSmallView ? false : true )" />
                    </div>

                </div>

            </div>
        }

    </div>
    <InsertComunication ShowModal="@ShowModal" />
</div>



@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }
    [Parameter]
    public bool IsSmallView { get; set; }
    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string ComunicationIcon = "";
    private string HourDesc = "";
    private string AddresDesc = "";
    private bool ShowModal = false;


    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        ComunicationIcon = Icons.Material.Filled.InterpreterMode;

        AddresDesc = "Via Roma, 123, 00100 Roma, Italia.     Dr.Rossi: 06 / xxxxxxx    Segreteria: 06 / xxxxxxx";
        HourDesc = "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 Martedì: 09:00 - 13:00 / 16:00 - 18:30 Mercoledì:09:00 - 13:00 / 16:00 - 18:30 Giovedì:09:00 - 13:00 / 16:00 - 18:30 Venerdì:09:00 - 13:00 / 16:00 - 18:30 Sabato/Domenica:studio chiuso";

    }

    private void Click()
    {

    }

    private async Task ClickChangeComponent(string component)
    {
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }

    private void OpenModalComunications()
    {
        ShowModal = true;
    }

}

