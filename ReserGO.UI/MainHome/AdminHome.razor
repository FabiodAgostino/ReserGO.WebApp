@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.UI.Admin;
<div class="d-flex flex-column homeLoginContainer">
    <div class="d-flex flex-column homeLoginBody">

        <div class="d-felx flex-row topSideLogin">

            <div class="d-flex justify-content-around align-items-center w-100 h-100">

                <CardReserGo Title="Prenotazione" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon"  Callback="@(() => ClickChangeComponent("Prenotazione"))"/>

                <CardReserGo Title="Richieste" Description="Richieste di appuntamento da confermare" Icon="@InformationIcon" />

            </div>

        </div>

        <div class="d-flex flex-row justify-content-around bottomSideLogin">

            <CalendarHome />

                <div class="d-flex align-items-center p-2">
                    <CardReserGo Title="Inserisci risorsa" Description="Inserisci una nuova risorsa" Icon="@ReservationIcon" CardStyle="width:19vw;height:44vh" />
                </div>
                <div class="d-flex align-items-center p-2" onclick="@OpenModalComunications">
                    <CardReserGo Title="Inserisci comunicazione" Description="Il giorno xx lo studio resterà chiuso" Icon="@InformationIcon" CardStyle="width:19vw;height:44vh" />
                </div>

        </div>
    </div>
    <InsertComunication ShowModal="@ShowModal" />
</div>



@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }
    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string HourDesc = "";
    private string AddresDesc = "";
    private bool ShowModal = false;


    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        InformationIcon = Icons.Material.Filled.Info;

        AddresDesc = "Via Roma, 123, 00100 Roma, Italia.     Dr.Rossi: 06 / xxxxxxx    Segreteria: 06 / xxxxxxx";
        HourDesc = "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 Martedì: 09:00 - 13:00 / 16:00 - 18:30 Mercoledì:09:00 - 13:00 / 16:00 - 18:30 Giovedì:09:00 - 13:00 / 16:00 - 18:30 Venerdì:09:00 - 13:00 / 16:00 - 18:30 Sabato/Domenica:studio chiuso";

    }

    private void Click()
    {

    }

    private async Task ClickChangeComponent(string component)
    {
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }

    private void OpenModalComunications()
    {
        ShowModal = true;
    }

}

