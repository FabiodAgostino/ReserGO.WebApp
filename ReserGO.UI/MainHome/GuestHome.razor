@using MudBlazor;
@using ReserGO.Service.Interface.Service
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@inject ITranslateService t


<div class="d-flex flex-column homeGuestContainer" style="@(IsSmallView ? "padding-block: 3vh":"")">

    <div class="d-flex @(IsSmallView ? "flex-column":"flex-row") homeGuestBody">

        @if (!IsSmallView)
            {
                <div class="d-felx flex-column leftSide">

                    <div class="d-flex justify-content-center informationHomeContiner">
                        <CardInformation />
                    </div>

                    <div class="d-flex justify-content-center detailsHomeContiner">
                        <div class="d-flex flex-row w-100">
                            <div class="d-flex p-2 w-100">
                            <CardDetails Title="Orari studio:" Description="@Hours" CompleteDescription="@CompleteHours" />
                            </div>
                        <div class="d-flex p-2 w-100">
                            <CardDetails Title="Contatti e Indirizzo:" Description="@AddresDesc" CompleteDescription="@CompleteAddresDesc" />
                            </div>
                        </div>
                    </div>

                </div>
            }

        <div class="d-flex flex-column  @(IsSmallView ? "h-50":"justify-content-center align-items-center rightSide")">
            <div class="d-flex  @(IsSmallView ? "p-2 h-100":"p-4")">
                <CardReserGo Title="@(t.Words["Prenotazione"])" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" IsSmallView="IsSmallView" Callback="@(() => ClickChangeComponent("Prenotazione"))" />
            </div>
            <div class="d-flex @(IsSmallView ? "p-2 h-100":"p-4")">
                <CardReserGo Title="Informazioni" Description="Tutte le informazioni sullo studio medico" Icon="@InformationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" IsSmallView="IsSmallView" />
            </div>
        </div>

        @if (IsSmallView)
            {
            <div class="d-felx flex-column @(IsSmallView ? "h-50":"leftSide")">

                <div class="d-flex justify-content-center p-2 informationHomeContiner @(IsSmallView ? "h-50":"")">
                    <CardDetails Title="Orari studio" Description="@Hours" CompleteDescription="@CompleteHours" IsSmallView="@IsSmallView" />
                </div>
                <div class="d-flex justify-content-center p-2 informationHomeContiner @(IsSmallView ? "h-50":"")">
                    <CardDetails Title="Contatti e Indirizzo" Description="@AddresDesc" CompleteDescription="@CompleteAddresDesc" IsSmallView="@IsSmallView" />
                </div>


                </div>
            }
        </div>

</div>







@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }

    private bool _isSmallView = false;

    [Parameter]
    public bool IsSmallView
    {
        get 
        { 
            return _isSmallView; 
        }
        set 
        { 
            _isSmallView = value;
            CheckLength();
        }
    }

    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string Hours;
    private string AddresDesc;
    private string CompleteHours;
    private string CompleteAddresDesc;



    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        InformationIcon = Icons.Material.Filled.Info;
        CheckLength();
        CompleteAddresDesc =
            "Via Roma, 123, 00100 Roma, Italia. ° Dr.Rossi: 06 / xxxxxxx ° Segreteria: 06 / xxxxxxx";
        CompleteHours = 
            "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 ° Martedì: 09:00 - 13:00 / 16:00 - 18:30 ° Mercoledì: 09:00 - 13:00 / 16:00 - 18:30 ° Giovedì: 09:00 - 13:00 / 16:00 - 18:30 ° Venerdì: 09:00 - 13:00 / 16:00 - 18:30 ° Sabato / Domenica: studio chiuso";

    }

    private async Task  ClickChangeComponent(string component){
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }



    public void CheckLength(){
        AddresDesc =
            "Via Roma, 123, 00100 Roma, Italia. ° Dr.Rossi: 06 / xxxxxxx ° Segreteria: 06 / xxxxxxx";

        Hours =
            "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 ° Martedì: 09:00 - 13:00 / 16:00 - 18:30 ° Mercoledì: 09:00 - 13:00 / 16:00 - 18:30 ° Giovedì: 09:00 - 13:00 / 16:00 - 18:30 ° Venerdì: 09:00 - 13:00 / 16:00 - 18:30 ° Sabato / Domenica: studio chiuso";

        if (AddresDesc is object && Hours is object)
        {
            if (IsSmallView)
            {
                AddresDesc = t.TruncateText(AddresDesc, 60);
                AddresDesc = AddresDesc.Replace("°", "<br/>");
                Hours = t.TruncateText(Hours, 40);
                Hours = Hours.Replace("°", "<br/>");
            }
            else
            {
                AddresDesc = t.TruncateText(AddresDesc, 300);
                AddresDesc = AddresDesc.Replace("°", "<br/>");
                Hours = t.TruncateText(Hours, 300);
                Hours = Hours.Replace("°", "<br/>");
            }
        }
    }
}

