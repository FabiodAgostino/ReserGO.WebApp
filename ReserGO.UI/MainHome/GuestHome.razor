@using MudBlazor;
@using ReserGO.Service.Interface.Service
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@inject ITranslateService t


<div class="d-flex flex-column homeGuestContainer" style="@(IsSmallView ? "padding-block: 3vh":"")">

    <div class="d-flex @(IsSmallView ? "flex-column":"flex-row") homeGuestBody">

        @if (!IsSmallView)
            {
                <div class="d-felx flex-column leftSide">

                    <div class="d-flex justify-content-center informationHomeContiner">
                        <CardInformation />
                    </div>

                    <div class="d-flex justify-content-center detailsHomeContiner">
                        <div class="d-flex flex-row">
                            <div class="d-flex p-2 w-100">
                                <CardDetails Title="Orari studio:" Description="@HourDesc" />
                            </div>
                        <div class="d-flex p-2 w-100">
                                <CardDetails Title="Contatti e Indirizzo:" Description="@AddresDesc" />
                            </div>
                        </div>
                    </div>

                </div>
            }

        <div class="d-flex flex-column  @(IsSmallView ? "h-50":"justify-content-center align-items-center rightSide")">
            <div class="d-flex  @(IsSmallView ? "p-2 h-100":"p-4")">
                <CardReserGo Title="@(t.Words["Prenotazione"])" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" IsSmallView="IsSmallView" Callback="@(() => ClickChangeComponent("Prenotazione"))" />
            </div>
            <div class="d-flex @(IsSmallView ? "p-2 h-100":"p-4")">
                <CardReserGo Title="Informazioni" Description="Tutte le informazioni sullo studio medico" Icon="@InformationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" IsSmallView="IsSmallView" />
            </div>
        </div>

        @if (IsSmallView)
            {
            <div class="d-felx flex-column @(IsSmallView ? "h-50":"leftSide")">

                <div class="d-flex justify-content-center p-2 informationHomeContiner @(IsSmallView ? "h-50":"")">
                    <CardDetails Title="Orari studio" Description="@HourDesc" IsSmallView="@IsSmallView" />
                </div>
                <div class="d-flex justify-content-center p-2 informationHomeContiner @(IsSmallView ? "h-50":"")">
                    <CardDetails Title="Contatti e Indirizzo" Description="@AddresDesc" IsSmallView="@IsSmallView" />
                </div>


                </div>
            }
        </div>

</div>







@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }

    [Parameter]
    public bool IsSmallView { get; set; }

    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string HourDesc = "";
    private string AddresDesc = "";

   

    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        InformationIcon = Icons.Material.Filled.Info;

        AddresDesc = "Via Roma, 123, 00100 Roma, Italia.     Dr.Rossi: 06 / xxxxxxx    Segreteria: 06 / xxxxxxx";
        HourDesc = "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 Martedì: 09:00 - 13:00 / 16:00 - 18:30 Mercoledì:09:00 - 13:00 / 16:00 - 18:30 Giovedì:09:00 - 13:00 / 16:00 - 18:30 Venerdì:09:00 - 13:00 / 16:00 - 18:30 Sabato/Domenica:studio chiuso";

    }

    private async Task  ClickChangeComponent(string component){
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }

    

}
