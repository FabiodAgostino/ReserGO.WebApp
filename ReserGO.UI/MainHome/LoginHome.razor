@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.ViewModel.Interface.Authentication
@using ReserGO.Service.Interface.Service;
@inject ITranslateService t

<div class="d-flex flex-column homeLoginContainer">
    <div class="d-flex flex-column homeLoginBody">

        
        <div class="d-flex @(IsSmallView ? "flex-column w-100 h-100":"flex-row topSideLogin")">

            <div class="d-flex align-items-center w-100 h-100 @(IsSmallView ? "flex-column":"justify-content-around")">

                <div class="d-flex p-2 @(IsSmallView ? "w-100":"")" style="@(IsSmallView ? "height:25%;":"")">
                    <CardReserGo Title="@t.Words["Prenotazione"]" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon" IsSmallView="@IsSmallView"  Callback="@(() => ClickChangeComponent("Prenotazione"))" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                </div>

                <div class="d-flex p-2 @(IsSmallView ? "w-100":"")" style="@(IsSmallView ? "height:25%;":"")">
                    <CardReserGo Title="@t.Words["Comunicazioni"]" Description="Il giorno xx lo studio rimarrà chiuso" Icon="@InformationIcon" IsSmallView="@IsSmallView" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                </div>
                
                @if (IsSmallView)
                {
                    <div class="d-felx flex-column h-50 w-100">

                        <div class="d-flex justify-content-center p-2 h-50 informationHomeContiner">
                            <CardDetails Title="Orari studio" Description="@Hours" IsSmallView="true" />
                        </div>
                        <div class="d-flex justify-content-center p-2 h-50 informationHomeContiner">
                            <CardDetails Title="Contatti e Indirizzo" Description="@AddresDesc" IsSmallView="true" />
                        </div>

                </div>
                }
            </div>

        </div>

        @if (!IsSmallView)
        {
            <div class="d-flex flex-row justify-content-around bottomSideLogin">

                <div class="d-flex justify-content-around align-items-center w-100 h-100">
                
                    <CalendarHome />

                    <div class="d-flex align-items-center p-2">
                        <CardReserGo Title="@(t.Words["Storico prenotazioni"])" IsSmallView="@IsSmallView"  Description="@(t.Words["Storico delle tue prenotazioni"])" Icon="@Icons.Material.Filled.ContentPasteSearch" Callback="@(() => ClickChangeComponent("Storico"))"/>
                    </div>
                
                </div>

            </div>
        }

    </div>
</div>


@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }

    [Parameter]
    public bool IsSmallView { get; set; }

    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string Hours;
    private string AddresDesc;


    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        InformationIcon = Icons.Material.Filled.Info;

        AddresDesc =
           "Via Roma, 123, 00100 Roma, Italia. <br/>Dr.Rossi: 06 / xxxxxxx<br/>Segreteria: 06 / xxxxxxx";

        Hours =
             "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 <br/> Martedì: 09:00 - 13:00 / 16:00 - 18:30 <br/>Mercoledì: 09:00 - 13:00 / 16:00 - 18:30<br/>Giovedì: 09:00 - 13:00 / 16:00 - 18:30<br/>Venerdì: 09:00 - 13:00 / 16:00 - 18:30<br/>Sabato/Domenica: studio chiuso";
    }

    private void Click()
    {

    }

    private async Task ClickChangeComponent(string component)
    {
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }

}

