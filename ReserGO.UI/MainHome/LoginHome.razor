@using MudBlazor;
@using ReserGO.UI.Utils
@using ReserGO.Utils.UI
@using ReserGO.ViewModel.Interface.Header
@using ReserGO.ViewModel.Interface.Authentication


<div class="d-flex flex-column homeLoginContainer">
    <div class="d-flex flex-column homeLoginBody">

        
        <div class="d-flex @(IsSmallView ? "flex-column w-100 h-100":"flex-row topSideLogin")">

            <div class="d-flex align-items-center w-100 h-100 @(IsSmallView ? "flex-column p-3":"justify-content-around")">

                <div class="d-flex p-2 @(IsSmallView ? "h-100 w-100":"")">
                    <CardReserGo Title="Prenotazione" Description="Richiedi un appuntamento per una nuova visita medica" Icon="@ReservationIcon"  Callback="@(() => ClickChangeComponent("Prenotazione"))" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                </div>

                <div class="d-flex p-2 @(IsSmallView ? "h-100 w-100":"")">
                    <CardReserGo Title="Comunicazioni" Description="Il giorno xx lo studio rimarrà chiuso" Icon="@InformationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                </div>
                
                @if (IsSmallView)
                {
                    <div class="d-flex p-2 @(IsSmallView ? "h-100 w-100":"")">
                        <CardReserGo Title="Comunicazioni" Description="Il giorno xx lo studio rimarrà chiuso" Icon="@InformationIcon" CardStyle="@(IsSmallView ? "width:100%;height:100%;":"")" />
                    </div>
                }
            </div>

        </div>

        @if (!IsSmallView)
        {
            <div class="d-flex flex-row justify-content-around bottomSideLogin">

                <div class="d-flex justify-content-around align-items-center w-100 h-100">
                
                    <CalendarHome />

                    <div class="d-flex align-items-center p-2">
                        <CardReserGo Title="Storico prenotazioni"  Description="Storico delle tue prenotazioni" Icon="@Icons.Material.Filled.ContentPasteSearch" Callback="@(() => ClickChangeComponent("Storico"))"/>
                    </div>
                
                </div>

            </div>
        }

    </div>
</div>


@code {
    [Parameter]
    public EventCallback<string> ChoiceSelectedComponent { get; set; }

    [Parameter]
    public bool IsSmallView { get; set; }

    private string ReservationIcon = "";
    private string InformationIcon = "";
    private string HourDesc = "";
    private string AddresDesc = "";
    

    protected override void OnInitialized()
    {
        ReservationIcon = Icons.Material.Filled.AddCircleOutline;
        InformationIcon = Icons.Material.Filled.Info;

        AddresDesc = "Via Roma, 123, 00100 Roma, Italia.     Dr.Rossi: 06 / xxxxxxx    Segreteria: 06 / xxxxxxx";
        HourDesc = "Lunedì: 09:00 - 13:00 / 16:00 - 18:30 Martedì: 09:00 - 13:00 / 16:00 - 18:30 Mercoledì:09:00 - 13:00 / 16:00 - 18:30 Giovedì:09:00 - 13:00 / 16:00 - 18:30 Venerdì:09:00 - 13:00 / 16:00 - 18:30 Sabato/Domenica:studio chiuso";

    }

    private void Click()
    {

    }

    private async Task ClickChangeComponent(string component)
    {
        if (ChoiceSelectedComponent.HasDelegate)
            await ChoiceSelectedComponent.InvokeAsync(component);
    }

}

